
================================================================================
Files with extension: .py
================================================================================


--------------------------------------------------------------------------------
File: test.py
--------------------------------------------------------------------------------

import os

def write_file_contents():
    # Get the current directory
    root_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Dictionary to store file contents by extension
    extension_files = {
        '.py': [],
        '.jsx': [], 
        '.js': [],
        '.css': [],
        '.env.example':[]
    }

    # Walk through all files in directory and subdirectories
    for dirpath, dirnames, filenames in os.walk(root_dir):
        for filename in filenames:
            file_ext = os.path.splitext(filename)[1].lower()
            
            # Check if file extension is one we want to process
            if file_ext in extension_files:
                full_path = os.path.join(dirpath, filename)
                rel_path = os.path.relpath(full_path, root_dir)
                
                try:
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        extension_files[file_ext].append({
                            'path': rel_path,
                            'content': content
                        })
                except Exception as e:
                    print(f"Error reading {rel_path}: {str(e)}")

    # Write all contents to a single file
    output_filename = "contents.txt"
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            for ext, files in extension_files.items():
                if files:
                    f.write(f"\n{'='*80}\n")
                    f.write(f"Files with extension: {ext}\n")
                    f.write(f"{'='*80}\n\n")
                    
                    for file_info in files:
                        f.write(f"\n{'-'*80}\n")
                        f.write(f"File: {file_info['path']}\n")
                        f.write(f"{'-'*80}\n\n")
                        f.write(file_info['content'])
                        f.write("\n")
        print(f"Created {output_filename}")
    except Exception as e:
        print(f"Error writing {output_filename}: {str(e)}")

if __name__ == "__main__":
    write_file_contents()


--------------------------------------------------------------------------------
File: backend\db.py
--------------------------------------------------------------------------------

import statistics
from bson import ObjectId
from pymongo import MongoClient
import asyncio
import threading
import time
from pytz import timezone
from datetime import datetime
import logging
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Connect to MongoDB Atlas using environment variables
uri = os.getenv('MONGODB_URI')
if not uri:
    raise ValueError("MONGODB_URI environment variable is not set")

client = MongoClient(uri)
db9 = client[os.getenv('MONGODB_DB_CLASS9', 'student_database')]
db10 = client[os.getenv('MONGODB_DB_CLASS10', 'student_database_class10')]

data_store = {
    9: {
        "collections": [
            {"Users": []},
            {
                "DivA": {"Stats": {}, "Subjects": {}},
                "DivB": {"Stats": {}, "Subjects": {}},
                "DivC": {"Stats": {}, "Subjects": {}},
                "DivD": {"Stats": {}, "Subjects": {}},
                "DivE": {"Stats": {}, "Subjects": {}}
            },
            {"ExamHistory": {}},
            {"Exams": {}},
            {"Leaderboard": {}}
        ]
    },
    10: {
        "collections": [
            {"Users": []},
            {
                "DivA": {"Stats": {}, "Subjects": {}},
                "DivB": {"Stats": {}, "Subjects": {}},
                "DivC": {"Stats": {}, "Subjects": {}},
                "DivD": {"Stats": {}, "Subjects": {}},
                "DivE": {"Stats": {}, "Subjects": {}}
            },
            {"ExamHistory": {}},
            {"Exams": {}},
            {"Leaderboard": {}}
        ]
    }
}

# Queue for MongoDB updates
update_queue = asyncio.Queue()

def convert_mongo_doc(doc):
    if isinstance(doc, dict):
        for key, value in doc.items():
            if isinstance(value, ObjectId):
                doc[key] = str(value)
            elif isinstance(value, (dict, list)):
                doc[key] = convert_mongo_doc(value)
    elif isinstance(doc, list):
        for i, item in enumerate(doc):
            doc[i] = convert_mongo_doc(item)
    return doc

def download_data():
    """Downloads all data from MongoDB to RAM for both classes."""
    start_time = time.time()
    logger.info("Starting data download from MongoDB to RAM")

    try:
        for class_num, db in [(9, db9), (10, db10)]:
            # Clear existing data
            data_store[class_num]['collections'][0]['Users'].clear()
            for div in ['A', 'B', 'C', 'D', 'E']:
                data_store[class_num]['collections'][1][f'Div{div}']['Stats'].clear()
                data_store[class_num]['collections'][1][f'Div{div}']['Subjects'].clear()
            data_store[class_num]['collections'][2]['ExamHistory'].clear()
            data_store[class_num]['collections'][3]['Exams'].clear()
            data_store[class_num]['collections'][4]['Leaderboard'].clear()

            # Download Users
            logger.info(f"Downloading Users for Class {class_num}")
            data_store[class_num]['collections'][0]['Users'] = [
                convert_mongo_doc(user) for user in db['Users'].find()
            ]

            # Download Division data
            for div in ['A', 'B', 'C', 'D', 'E']:
                logger.info(f"Downloading Div{div} data for Class {class_num}")
                div_data = data_store[class_num]['collections'][1][f'Div{div}']
                div_collection = db[f'Div{div}']

                # Stats
                stats_doc = div_collection.find_one({'Stats': {'$exists': True}})
                div_data['Stats'] = convert_mongo_doc(stats_doc['Stats'] if stats_doc else {})

                # Subjects
                subjects_doc = div_collection.find_one({'Subjects': {'$exists': True}})
                div_data['Subjects'] = convert_mongo_doc(subjects_doc['Subjects'] if subjects_doc else {})

            # Download ExamHistory
            logger.info(f"Downloading ExamHistory for Class {class_num}")
            exam_history_doc = db['ExamHistory'].find_one({'_id': 'exam_history'}) or {}
            data_store[class_num]['collections'][2]['ExamHistory'] = convert_mongo_doc(exam_history_doc)

            # Download Exams
            logger.info(f"Downloading Exams for Class {class_num}")
            exams = list(db['Exams'].find())
            data_store[class_num]['collections'][3]['Exams'] = {
                exam['exam-id']: convert_mongo_doc(exam) for exam in exams
            }

            # Download Leaderboard
            logger.info(f"Downloading Leaderboard for Class {class_num}")
            leaderboard_data = list(db['Leaderboard'].find())
            data_store[class_num]['collections'][4]['Leaderboard'] = {
                doc['_id']: convert_mongo_doc(doc) for doc in leaderboard_data
            }

        end_time = time.time()
        logger.info(f"Data download completed in {end_time - start_time:.2f} seconds")

        # Log statistics about the downloaded data
        for class_num in [9, 10]:
            logger.info(f"Class {class_num} statistics:")
            logger.info(f"Users: {len(data_store[class_num]['collections'][0]['Users'])}")
            for div in ['A', 'B', 'C', 'D', 'E']:
                logger.info(f"Div{div} Stats: {len(data_store[class_num]['collections'][1][f'Div{div}']['Stats'])}")
                logger.info(f"Div{div} Subjects: {len(data_store[class_num]['collections'][1][f'Div{div}']['Subjects'])}")
            logger.info(f"ExamHistory entries: {len(data_store[class_num]['collections'][2]['ExamHistory'])}")
            logger.info(f"Exams: {len(data_store[class_num]['collections'][3]['Exams'])}")
            logger.info(f"Leaderboard entries: {len(data_store[class_num]['collections'][4]['Leaderboard'])}")

    except Exception as e:
        logger.error(f"Error during data download: {str(e)}")
        raise

    return data_store

def get_user(user_id, class10=False):
    """Fetches user data from RAM."""
    class_num = 10 if class10 else 9
    users = data_store[class_num]['collections'][0]['Users']
    return next((user for user in users if user['id'] == user_id), None)

def get_division(user_id, class10=False):
    """Determines the division of a user."""
    user = get_user(user_id, class10)
    return user['division'] if user else None

def get_user_stats(user_id, class10=False):
    """Fetches user stats from RAM."""
    class_num = 10 if class10 else 9
    division = get_division(user_id, class10)
    if not division:
        return None
    stats = data_store[class_num]['collections'][1][f'Div{division}']['Stats']
    return stats.get(user_id)

def get_user_subjects(user_id, subject=None, class10=False):
    class_num = 10 if class10 else 9
    division = get_division(user_id, class10)
    if not division:
        return None
    subjects = data_store[class_num]['collections'][1][f'Div{division}']['Subjects'].get(user_id, [])
    print(subjects)
    if subject:
        subject_stats = next((subj for subj in subjects if subj['subject'].lower() == subject.lower()), None)
        if subject_stats:
            subject_stats.pop('_id', None)  # Remove _id if it exists
        return subject_stats
    return [subj for subj in subjects if '_id' not in subj]

def get_user_exam_history(user_id, class10=False):
    """Fetches user exam history from the data store."""
    class_num = 10 if class10 else 9
    user_exam_history = data_store[class_num]['collections'][2]['ExamHistory'].get(user_id, {})

    print(f"User exam history for {user_id}: {user_exam_history}")  # Debug print

    if user_exam_history:
        overview_stats = user_exam_history.get('overview-stats', [])
        print(f"Overview stats for {user_id}: {overview_stats}")  # Debug print
        return overview_stats
    else:
        return []

def update_user_stats(user_id, new_stats, class10=False):
    """Updates user stats in RAM and queues update for MongoDB."""
    class_num = 10 if class10 else 9
    division = get_division(user_id, class10)
    if not division:
        return False

    try:
        # Update RAM
        div_stats = data_store[class_num]['collections'][1][f'Div{division}']['Stats']
        if user_id not in div_stats:
            div_stats[user_id] = {}
        div_stats[user_id].update(new_stats)

        # Queue update for MongoDB
        update_queue.put_nowait(('Stats', f'Div{division}', user_id, new_stats, class_num))

        # Perform immediate update to MongoDB
        db = db10 if class10 else db9
        db[f'Div{division}'].update_one(
            {'Stats': {'$exists': True}},
            {'$set': {f'Stats.{user_id}': div_stats[user_id]}},
            upsert=True
        )

        return True
    except Exception as e:
        print(f"Error updating user stats: {e}")
        return False

def update_user_subjects(user_id, subject, new_data, class10=False):
    """Updates user subject data in RAM and queues update for MongoDB."""
    class_num = 10 if class10 else 9
    division = get_division(user_id, class10)
    if division:
        subjects = data_store[class_num]['collections'][1][f'Div{division}']['Subjects'].get(user_id, [])
        subject_index = next((index for (index, d) in enumerate(subjects) if d["subject"] == subject), None)
        if subject_index is not None:
            subjects[subject_index].update(new_data)
        else:
            subjects.append(new_data)

        # Update RAM
        data_store[class_num]['collections'][1][f'Div{division}']['Subjects'][user_id] = subjects

        # Queue update for MongoDB
        update_queue.put_nowait(('Subjects', f'Div{division}', user_id, subjects, class_num))

        # Perform immediate update to MongoDB
        db = db10 if class10 else db9
        db[f'Div{division}'].update_one(
            {'Subjects': {'$exists': True}},
            {'$set': {f'Subjects.{user_id}': subjects}},
            upsert=True
        )

def add_exam_to_history(user_id, overview_stats, class10=False):
    """Adds an exam to user's exam history in RAM and MongoDB."""
    class_num = 10 if class10 else 9

    # Update RAM
    if user_id not in data_store[class_num]['collections'][2]['ExamHistory']:
        data_store[class_num]['collections'][2]['ExamHistory'][user_id] = {"overview-stats": []}

    data_store[class_num]['collections'][2]['ExamHistory'][user_id]["overview-stats"].append(overview_stats)

    # Update MongoDB directly
    try:
        db = db10 if class10 else db9
        presult = db['ExamHistory'].update_one(
            {'_id': 'exam_history'},
            {'$push': {f'{user_id}.overview-stats': overview_stats}},
            upsert=True
        )
    except Exception as e:
        print(f"Error updating MongoDB: {e}")
    # Still queue the update for any additional processing
    update_queue.put_nowait(('ExamHistory', user_id, overview_stats, class_num))

def initialize_overview_stats(user_id, class10=False):
    """Initialize overview stats for a new user."""
    db = db10 if class10 else db9
    overview_stats = {
        "user_id": user_id,
        "subjects": {
            "Math": {"exams_given": 0, "highest_marks": 0, "average_percentage": 0},
            "SS": {"exams_given": 0, "highest_marks": 0, "average_percentage": 0},
            "English": {"exams_given": 0, "highest_marks": 0, "average_percentage": 0},
            "Science": {"exams_given": 0, "highest_marks": 0, "average_percentage": 0}
        }
    }
    db['overview_stats'].insert_one(overview_stats)
    return overview_stats

def get_overview_stats(user_id, class10=False):
    """Get overview stats for a user, initializing if they don't exist."""
    db = db10 if class10 else db9
    stats = db['overview_stats'].find_one({"user_id": user_id})
    
    if not stats:
        # Initialize stats if they don't exist
        stats = initialize_overview_stats(user_id, class10)
    
    if stats:
        # Remove the _id field as it's not needed in the response
        stats.pop('_id', None)
        return stats
    return None

def update_overview_stats(user_id, subject, exam_marks, total_marks, class10=False):
    """Update overview stats for a user after an exam."""
    db = db10 if class10 else db9
    stats = get_overview_stats(user_id, class10)
    if stats:
        subject_stats = stats['subjects'][subject]
        subject_stats['exams_given'] += 1
        subject_stats['highest_marks'] = max(
            subject_stats['highest_marks'], exam_marks)

        # Calculate new average percentage
        old_average = subject_stats['average_percentage']
        old_total = old_average * (subject_stats['exams_given'] - 1)
        new_percentage = (exam_marks / total_marks) * 100
        new_average = (old_total + new_percentage) / \
            subject_stats['exams_given']
        subject_stats['average_percentage'] = round(new_average, 2)

        db['overview_stats'].update_one(
            {'user_id': user_id},
            {'$set': {f'subjects.{subject}': subject_stats}}
        )

def add_exam(exam_data, class10=False):
    """Adds a new exam to the Exams collection in both RAM and MongoDB."""
    class_num = 10 if class10 else 9
    exam_id = exam_data['exam-id']

    # Add to RAM
    data_store[class_num]['collections'][3]['Exams'][exam_id] = exam_data

    # Add to MongoDB
    try:
        db = db10 if class10 else db9
        result = db['Exams'].insert_one(exam_data)
        return exam_data
    except Exception as e:
        print(f"Error adding exam to MongoDB: {e}")
        return None

def get_exam(exam_id, class10=False):
    """Retrieves an exam by exam-id from RAM or MongoDB."""
    class_num = 10 if class10 else 9

    # Check in RAM
    exam = data_store[class_num]['collections'][3]['Exams'].get(exam_id)
    if exam:
        return convert_mongo_doc(exam)

    print("Exam not found in RAM, checking MongoDB...")

    # If not in RAM, try to fetch from MongoDB
    db = db10 if class10 else db9
    exam = db['Exams'].find_one({"exam-id": exam_id})
    if exam:
        # Convert to JSON-serializable format
        exam = convert_mongo_doc(exam)
        # Add to RAM for future use
        data_store[class_num]['collections'][3]['Exams'][exam_id] = exam
        return exam

    print(f"Exam with id {exam_id} not found in RAM or MongoDB")
    return None

def update_exam(exam_id, updated_data, class10=False):
    """Updates an existing exam in both RAM and MongoDB."""
    class_num = 10 if class10 else 9

    # Update in RAM
    if exam_id in data_store[class_num]['collections'][3]['Exams']:
        data_store[class_num]['collections'][3]['Exams'][exam_id].update(updated_data)

    # Update in MongoDB
    db = db10 if class10 else db9
    result = db['Exams'].update_one({'exam-id': exam_id}, {'$set': updated_data})

    if result.modified_count > 0:
        print(f"Exam {exam_id} updated successfully")
        return True
    else:
        print(f"No exam found with id {exam_id}")
        return False

def get_user_exams(user_id, class10=False):
    """Retrieves all exams for a given user."""
    class_num = 10 if class10 else 9
    user_exams = []
    for exam in data_store[class_num]['collections'][3]['Exams'].values():
        if exam.get('userId') == user_id:
            user_exams.append(exam)

    if not user_exams:
        # If not found in RAM, check MongoDB
        db = db10 if class10 else db9
        user_exams = list(db['Exams'].find({"userId": user_id}))
        # Add to RAM for future use
        for exam in user_exams:
            exam_id = exam['exam-id']
            data_store[class_num]['collections'][3]['Exams'][exam_id] = exam

    return [convert_mongo_doc(exam) for exam in user_exams]

async def update_mongodb():
    """Asynchronously updates MongoDB with queued changes."""
    while True:
        update = await update_queue.get()
        try:
            if update[0] == 'Stats':
                _, div, user_id, new_stats, class_num = update
                db = db10 if class_num == 10 else db9
                await db[div].update_one(
                    {'Stats': {'$exists': True}},
                    {'$set': {f'Stats.{user_id}': new_stats}},
                    upsert=True
                )
            elif update[0] == 'Subjects':
                _, div, user_id, subject, new_data, class_num = update
                db = db10 if class_num == 10 else db9
                await db[div].update_one(
                    {'Subjects': {'$exists': True}},
                    {'$set': {f'Subjects.{user_id}': new_data}},
                    upsert=True
                )
            elif update[0] == 'ExamHistory':
                _, user_id, overview_stats, class_num = update
                db = db10 if class_num == 10 else db9
                await db['ExamHistory'].update_one(
                    {'_id': 'exam_history'},
                    {'$push': {f'{user_id}.overview-stats': overview_stats}},
                    upsert=True
                )
            elif update[0] == 'Exams':
                _, operation = update[:2]
                if operation == 'insert':
                    exam_data, class_num = update[2:]
                    db = db10 if class_num == 10 else db9
                    await db['Exams'].insert_one(exam_data)
                elif operation == 'update':
                    exam_id, updated_data, class_num = update[2:]
                    db = db10 if class_num == 10 else db9
                    await db['Exams'].update_one(
                        {'exam-id': exam_id},
                        {'$set': updated_data}
                    )
                elif operation == 'delete':
                    exam_id, class_num = update[2:]
                    db = db10 if class_num == 10 else db9
                    await db['Exams'].delete_one({'exam-id': exam_id})
            update_queue.task_done()
        except Exception as e:
            print(f"Error in update_mongodb: {e}")
            update_queue.task_done()  # Ensure the task is marked as done even if an error occurs

def start_update_thread():
    """Starts the asynchronous update thread."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(update_mongodb())

def update_user_stats_after_exam(user_id, subject, score, total_questions, exam_data, exam_id, class10=False):
    logger.info(f"Starting update_user_stats_after_exam with params: user_id={user_id}, subject={subject}, score={score}, total_questions={total_questions}")
    class_num = 10 if class10 else 9
    db = db10 if class10 else db9

    try:
        # Get user division
        user = get_user(user_id, class10)
        if not user:
            raise ValueError(f"User {user_id} not found")
        division = user['division']
        
        # Update user stats
        div_stats = data_store[class_num]['collections'][1][f'Div{division}']['Stats']
        user_stats = div_stats.get(user_id, {})
        
        # Update basic stats with type checking
        current_avgpercentage = float(user_stats.get('avgpercentage', 0))
        current_attempted = int(user_stats.get('attempted', 0))
        exam_percentage = float(exam_data['percentage'])
        
        # Update basic stats
        user_stats['attempted'] = current_attempted + 1
        user_stats['correct'] = user_stats.get('correct', 0) + score
        user_stats['questions'] = user_stats.get('questions', 0) + total_questions
        
        # Calculate new average
        if current_attempted == 0:
            user_stats['avgpercentage'] = exam_percentage
        else:
            user_stats['avgpercentage'] = (current_avgpercentage * current_attempted + exam_percentage) / (current_attempted + 1)

        # Get subjects data structure
        div_subjects = data_store[class_num]['collections'][1][f'Div{division}']['Subjects']
        subjects_list = div_subjects.get(user_id, [])

        # Handle both list and dictionary formats
        if isinstance(subjects_list, dict):
            if subjects_list.get('subject') == subject:
                subject_stats = subjects_list
            else:
                subject_stats = None
            subjects_list = [subjects_list]
        else:
            subject_stats = next((s for s in subjects_list if s['subject'] == subject), None)

        if subject_stats is None:
            subject_stats = {
                'subject': subject,
                'attempted': 0,
                'avgPercentage': 0,
                'marksGained': 0,
                'marksAttempted': 0,
                'highestMark': 0
            }
            subjects_list.append(subject_stats)

        # Update subject stats with type checking
        current_subject_attempted = int(subject_stats.get('attempted', 0))
        current_subject_avgPercentage = float(subject_stats.get('avgPercentage', 0))
        
        # Update subject stats
        subject_stats['attempted'] = current_subject_attempted + 1
        subject_stats['marksGained'] = subject_stats.get('marksGained', 0) + score
        subject_stats['marksAttempted'] = subject_stats.get('marksAttempted', 0) + total_questions
        
        # Calculate new subject average
        if current_subject_attempted == 0:
            subject_stats['avgPercentage'] = exam_percentage
        else:
            subject_stats['avgPercentage'] = (current_subject_avgPercentage * current_subject_attempted + exam_percentage) / (current_subject_attempted + 1)
            
        subject_stats['highestMark'] = max(float(subject_stats.get('highestMark', 0)), exam_percentage)

        # Store back in list format
        div_subjects[user_id] = subjects_list

        # Get or create overview stats
        overview_stats = get_overview_stats(user_id, class10)
        if not overview_stats:
            overview_stats = initialize_overview_stats(user_id, class10)

        # Update overview stats for the subject
        percentage = float(exam_data['percentage'])
        subject_overview = overview_stats['subjects'][subject]
        
        current_exams_given = int(subject_overview['exams_given'])
        current_average = float(subject_overview['average_percentage'])
        
        subject_overview['exams_given'] = current_exams_given + 1
        subject_overview['highest_marks'] = max(float(subject_overview['highest_marks']), percentage)
        
        # Calculate new overview average
        if current_exams_given == 0:
            subject_overview['average_percentage'] = percentage
        else:
            subject_overview['average_percentage'] = (current_average * current_exams_given + percentage) / (current_exams_given + 1)

        # Create overview stats object
        overview_stats = {
            "exam-id": exam_id,
            "subject": subject,
            "score": score, 
            "totalQuestions": total_questions,
            "percentage": exam_data['percentage'],
            "lessons": exam_data.get('lessons', []),
            "date": datetime.now(timezone("Asia/Kolkata")).strftime("%d-%m-%Y")
        }

        # Update exam history
        exam_history = data_store[class_num]['collections'][2]['ExamHistory']
        if user_id not in exam_history:
            exam_history[user_id] = {"overview-stats": []}
        exam_history[user_id]["overview-stats"].append(overview_stats)

        # Update MongoDB
        try:
            # Update exam history
            db['ExamHistory'].update_one(
                {'_id': 'exam_history'},
                {'$push': {f'{user_id}.overview-stats': overview_stats}},
                upsert=True
            )

            # Update user stats
            db[f'Div{division}'].update_one(
                {'Stats': {'$exists': True}},
                {'$set': {f'Stats.{user_id}': user_stats}},
                upsert=True
            )

            # Update user subjects
            db[f'Div{division}'].update_one(
                {'Subjects': {'$exists': True}},
                {'$set': {f'Subjects.{user_id}': subjects_list}},
                upsert=True
            )

            logger.info(f"Successfully updated stats for user {user_id} in subject {subject}")

        except Exception as e:
            logger.error(f"MongoDB update error: {e}")
            raise

        # Update leaderboard
        lessons = exam_data.get('lessons', [])
        if isinstance(lessons, list):
            num_lessons = len(lessons)
            update_leaderboard(user_id, score, total_questions, subject, num_lessons, class10)

        return user_stats, subject_stats

    except Exception as e:
        logger.error(f"Error in update_user_stats_after_exam: {str(e)}")
        raise

def create_user_data(user_id, password, name, roll_no, div, class10=False):
    """Creates user data and inserts it into appropriate MongoDB collections."""
    class_num = 10 if class10 else 9
    db = db10 if class10 else db9

    # Insert into Users collection
    users_collection = db['Users']
    user_data = {
        "id": user_id,
        "name": name,
        "password": password,
        "rollno": roll_no,
        "division": div,
        "class": class_num
    }
    users_collection.insert_one(user_data)
    data_store[class_num]['collections'][0]['Users'].append(user_data)

    # Update Division collection (using upsert=True for Stats and Subjects)
    div_data = data_store[class_num]['collections'][1][f'Div{div}']
    div_collection = db[f'Div{div}']

    # Stats
    stats_data = {
        "attempted": 0,
        "correct": 0,
        "avgpercentage": 0,
        "questions": 0
    }
    div_data['Stats'][user_id] = stats_data
    div_collection.update_one(
        {"Stats": {"$exists": True}},
        {"$set": {f"Stats.{user_id}": stats_data}},
        upsert=True)

    # Subjects
    subjects_data = [
        {"subject": subj, "attempted": 0, "avgPercentage": 0,
         "marksGained": 0, "marksAttempted": 0, "highestMark": 0}
        for subj in ["Math", "SS", "English", "Science"]
    ]
    div_data['Subjects'][user_id] = subjects_data
    div_collection.update_one(
        {"Subjects": {"$exists": True}},
        {"$set": {f"Subjects.{user_id}": subjects_data}},
        upsert=True)

    # Initialize ExamHistory for the user
    data_store[class_num]['collections'][2]['ExamHistory'][user_id] = {"overview-stats": []}
    db['ExamHistory'].update_one(
        {'_id': 'exam_history'},
        {'$set': {user_id: {"overview-stats": []}}},
        upsert=True
    )

    # Initialize overview stats
    initialize_overview_stats(user_id, class10)

    # Create Leaderboard collection if it doesn't exist
    if 'Leaderboard' not in db.list_collection_names():
        db.create_collection('Leaderboard')
        data_store[class_num]['collections'][4]['Leaderboard'] = {}
        print("Leaderboard collection created")

    print(f"User data added successfully for user ID: {user_id}")

def calculate_elo_change(score_percentage, num_lessons, subject):
    """Calculates ELO score change based on test performance and subject."""
    # Base ELO change multiplier
    base_multiplier = 32
    
    # Subject weights
    subject_weights = {
        "Mathematics": 1.5,  # Highest weight
        "Science": 1.2,     # Medium weight
        "Social Studies": 1.0  # Lowest weight
    }
    
    # Get subject weight (default to 1.0 if subject not found)
    subject_weight = subject_weights.get(subject, 1.0)
    
    # Calculate lesson multiplier (more lessons = more ELO)
    lesson_multiplier = 1 + (num_lessons * 0.1)  # Each lesson adds 10% more ELO
    
    # Calculate performance multiplier (better score = more ELO)
    performance_multiplier = score_percentage / 100
    
    # Calculate final ELO change
    elo_change = base_multiplier * subject_weight * lesson_multiplier * performance_multiplier
    
    return round(elo_change)

def update_leaderboard(user_id, score, total_questions, subject, num_lessons, class10=False):
    """Updates the leaderboard with new exam data."""
    class_num = 10 if class10 else 9
    current_date = datetime.now(timezone("Asia/Kolkata"))
    month_key = current_date.strftime('%Y-%m')

    # Get user details
    user = get_user(user_id, class10)
    if not user:
        return

    # Update RAM
    if month_key not in data_store[class_num]['collections'][4]['Leaderboard']:
        data_store[class_num]['collections'][4]['Leaderboard'][month_key] = {}

    # Initialize user data if not exists
    if user_id not in data_store[class_num]['collections'][4]['Leaderboard'][month_key]:
        data_store[class_num]['collections'][4]['Leaderboard'][month_key][user_id] = {
            "name": user['name'],
            "total_exams": 0,
            "total_score": 0,
            "total_questions": 0,
            "average_percentage": 0,
            "elo_score": 0  # Initial ELO score starts from 0
        }

    user_data = data_store[class_num]['collections'][4]['Leaderboard'][month_key][user_id]
    
    # Calculate score percentage for this exam
    score_percentage = (score / total_questions) * 100
    
    # Calculate ELO change
    elo_change = calculate_elo_change(score_percentage, num_lessons, subject)
    
    # Update user data
    user_data["total_exams"] += 1
    user_data["total_score"] += score
    user_data["total_questions"] += total_questions
    user_data["average_percentage"] = (user_data["total_score"] / user_data["total_questions"]) * 100
    user_data["elo_score"] += elo_change

    # Update MongoDB
    db = db10 if class10 else db9
    db['Leaderboard'].update_one(
        {'_id': month_key},
        {'$set': {user_id: user_data}},
        upsert=True
    )

def delete_unsubmitted_exams():
    """Deletes all exams with is_submitted=False from both class 9 and 10 databases."""
    try:
        # Delete from Class 9
        result9 = db9['Exams'].delete_many({'is_submitted': False})
        
        # Delete from Class 10
        result10 = db10['Exams'].delete_many({'is_submitted': False})
        
        # Clear from RAM storage
        for class_num in [9, 10]:
            exams = data_store[class_num]['collections'][3]['Exams']
            exam_ids_to_delete = [
                exam_id for exam_id, exam in exams.items() 
                if not exam.get('is_submitted', False)
            ]
            for exam_id in exam_ids_to_delete:
                del exams[exam_id]
        
        total_deleted = result9.deleted_count + result10.deleted_count
        logger.info(f"Deleted {total_deleted} unsubmitted exams ({result9.deleted_count} from Class 9, {result10.deleted_count} from Class 10)")
        
        return total_deleted
        
    except Exception as e:
        logger.error(f"Error deleting unsubmitted exams: {str(e)}")
        raise

update_thread = threading.Thread(target=start_update_thread, daemon=True)
update_thread.start()

# Download initial data
st = time.time()
download_data()
end = (time.time() - st)
print(end)

def get_standard_stats(class10=False):
    class_num = 10 if class10 else 9
    stats = {
        'total_students': 0,
        'mean_score': 0,
        'subjects': {
            'Math': {'total_score': 0, 'count': 0, 'mean': 0},
            'Science': {'total_score': 0, 'count': 0, 'mean': 0},
            'SS': {'total_score': 0, 'count': 0, 'mean': 0}
        }
    }

    users = data_store[class_num]['collections'][0]['Users']
    stats['total_students'] = len(users)

    exams = data_store[class_num]['collections'][3]['Exams']
    total_score = 0
    total_count = 0

    for exam in exams.values():
        if not exam["is_submitted"] or exam['subject'] == 'English':
            continue

        subject = exam['subject']
        score = exam['score']
        total_questions = len(exam['questions'])
        percentage = (score / total_questions) * 100 if total_questions > 0 else 0

        stats['subjects'][subject]['total_score'] += percentage
        stats['subjects'][subject]['count'] += 1
        total_score += percentage
        total_count += 1

    # Calculate mean for each subject
    for subject in stats['subjects']:
        if stats['subjects'][subject]['count'] > 0:
            stats['subjects'][subject]['mean'] = stats['subjects'][subject]['total_score'] / stats['subjects'][subject]['count']
        del stats['subjects'][subject]['total_score']
        del stats['subjects'][subject]['count']

    # Calculate overall mean score
    if total_count > 0:
        stats['mean_score'] = total_score / total_count

    return stats

def get_subject_stats_by_division(class10=False):
    class_num = 10 if class10 else 9

    stats = {
        'A': {'Math': {'total': 0, 'count': 0}, 'Science': {'total': 0, 'count': 0}, 'SS': {'total': 0, 'count': 0}},
        'B': {'Math': {'total': 0, 'count': 0}, 'Science': {'total': 0, 'count': 0}, 'SS': {'total': 0, 'count': 0}},
        'C': {'Math': {'total': 0, 'count': 0}, 'Science': {'total': 0, 'count': 0}, 'SS': {'total': 0, 'count': 0}},
        'D': {'Math': {'total': 0, 'count': 0}, 'Science': {'total': 0, 'count': 0}, 'SS': {'total': 0, 'count': 0}},
        'E': {'Math': {'total': 0, 'count': 0}, 'Science': {'total': 0, 'count': 0}, 'SS': {'total': 0, 'count': 0}}
    }

    exams = data_store[class_num]['collections'][3]['Exams']
    for exam in exams.values():
        if not exam["is_submitted"] or exam['subject'] == 'English':
            continue
        user_id = exam['userId']
        user = get_user(user_id, class10)
        if user:
            division = user['division']
            subject = exam['subject']
            score = exam['score']
            total_questions = len(exam['questions'])
            percentage = (score / total_questions) * 100 if total_questions > 0 else 0

            stats[division][subject]['total'] += percentage
            stats[division][subject]['count'] += 1

    result = {
        'A': {'Math': 0, 'Science': 0, 'SS': 0, 'TotalAvg': 0},
        'B': {'Math': 0, 'Science': 0, 'SS': 0, 'TotalAvg': 0},
        'C': {'Math': 0, 'Science': 0, 'SS': 0, 'TotalAvg': 0},
        'D': {'Math': 0, 'Science': 0, 'SS': 0, 'TotalAvg': 0},
        'E': {'Math': 0, 'Science': 0, 'SS': 0, 'TotalAvg': 0}
    }

    for division in stats:
        total_scores = 0
        total_count = 0
        for subject in stats[division]:
            if stats[division][subject]['count'] > 0:
                result[division][subject] = stats[division][subject]['total'] / stats[division][subject]['count']
                total_scores += stats[division][subject]['total']
                total_count += stats[division][subject]['count']
            else:
                result[division][subject] = 0

        if total_count > 0:
            result[division]['TotalAvg'] = total_scores / total_count
        else:
            result[division]['TotalAvg'] = 0

    return result

def get_student_detailed_stats(user_id, class10=False):
    class_num = 10 if class10 else 9
    user = get_user(user_id, class10)
    if not user:
        return None

    division = user['division']
    user_stats = data_store[class_num]['collections'][1][f'Div{division}']['Stats']
    user_subjects = data_store[class_num]['collections'][1][f'Div{division}']['Subjects'].get(user_id, [])

    return {
        'user_id': user_id,
        'name': user['name'],
        'class': class_num,
        'division': division,
        'overall_stats': user_stats,
        'subject_stats': user_subjects
    }

def get_student_exams(user_id, class10=False):
    exams  = get_user_exam_history(user_id, class10)
    return exams
def get_total_exams():
    total_exams = len(data_store[9]['collections'][3]['Exams']) + len(data_store[10]['collections'][3]['Exams'])
    return total_exams

# Function to get total number of students
def get_total_students():
    total_students = len(data_store[9]['collections'][0]['Users']) + len(data_store[10]['collections'][0]['Users'])
    return total_students

# Function to get average percentage across all exams
def get_average_percentage():
    percentages = []
    i = 0
    for class_num in [9, 10]:
        for exam in data_store[class_num]['collections'][3]['Exams'].values():
            i += 1
            if exam.get('is_submitted', False):
                try:
                    print(exam['percentage'])
                    percentages.append(exam['percentage'])
                except:  # noqa: E722
                    pass
    if percentages:
        print(i)
        return statistics.median(percentages)
    return 0

# Function to get average scores across all exams
def get_average_scores():
    scores = []
    for class_num in [9, 10]:
        for exam in data_store[class_num]['collections'][3]['Exams'].values():
            if exam.get('is_submitted', False):
                scores.append(exam['score'])
    if scores:
        return statistics.median(scores)
    return 0
def get_total_exams_by_class(class10=False):
    class_num = 10 if class10 else 9
    total_exams = len(data_store[class_num]['collections'][3]['Exams'])
    return total_exams

def get_total_students_by_class(class10=False):
    class_num = 10 if class10 else 9
    total_students = len(data_store[class_num]['collections'][0]['Users'])
    return total_students
def get_students_by_division(class_num, division):
    students = []
    for student in data_store[class_num]['collections'][0]['Users']:
        if student['division'] == division:
            students.append({
                'name': student['name'],
                'roll': student['rollno'],
                'gr_number': student['id']
            })
    return sorted(students, key=lambda x: x['roll'])
# delete_unsubmitted_exams()

def fix_missing_lowest_marks():
    """Add lowest_marks field for users who don't have it in their overview stats"""
    for class_num in [9, 10]:
        db = db10 if class_num == 10 else db9
        
        # Get all users' overview stats
        overview_stats = db['overview_stats'].find({})
        
        for user_stats in overview_stats:
            user_id = user_stats['user_id']
            subjects = user_stats.get('subjects', {})
            
            updates = {}
            for subject, stats in subjects.items():
                if 'lowest_marks' not in stats:
                    # Get all exam scores for this subject from exam history
                    exam_history = db['ExamHistory'].find_one({'_id': 'exam_history'})
                    if not exam_history or user_id not in exam_history:
                        continue
                        
                    subject_scores = [
                        exam['score'] 
                        for exam in exam_history[user_id]['overview-stats']
                        if exam['subject'] == subject
                    ]
                    
                    if subject_scores:
                        lowest_mark = min(subject_scores)
                        updates[f'subjects.{subject}.lowest_marks'] = lowest_mark
            
            if updates:
                db['overview_stats'].update_one(
                    {'user_id': user_id},
                    {'$set': updates}
                )

def recalculate_subject_stats():
    """Reset and recalculate all subject statistics for all users in both classes."""
    logger.info("Starting subject statistics recalculation")
    
    for class_num in [9, 10]:
        db = db10 if class_num == 10 else db9
        
        # Get all users
        users = data_store[class_num]['collections'][0]['Users']
        
        for user in users:
            user_id = user['id']
            division = user['division']
            
            # Get all exams for this user
            exams = list(db['Exams'].find({"userId": user_id, "is_submitted": True}))
            
            # Initialize subject stats
            subject_stats = {
                "Math": {"subject": "Math", "attempted": 0, "avgPercentage": 0, "marksGained": 0, "marksAttempted": 0, "highestMark": 0, "lowestMark": float('inf')},
                "Science": {"subject": "Science", "attempted": 0, "avgPercentage": 0, "marksGained": 0, "marksAttempted": 0, "highestMark": 0, "lowestMark": float('inf')},
                "SS": {"subject": "SS", "attempted": 0, "avgPercentage": 0, "marksGained": 0, "marksAttempted": 0, "highestMark": 0, "lowestMark": float('inf')},
                "English": {"subject": "English", "attempted": 0, "avgPercentage": 0, "marksGained": 0, "marksAttempted": 0, "highestMark": 0, "lowestMark": float('inf')}
            }
            
            # Calculate stats from exams
            for exam in exams:
                subject = exam['subject']
                if subject not in subject_stats:
                    continue
                
                score = exam['score']
                total_questions = len(exam['questions'])
                percentage = (score / total_questions) * 100 if total_questions > 0 else 0
                
                stats = subject_stats[subject]
                stats['attempted'] += 1
                stats['marksGained'] += score
                stats['marksAttempted'] += total_questions
                stats['highestMark'] = max(stats['highestMark'], percentage)
                stats['lowestMark'] = min(stats['lowestMark'], percentage)
                
                # Recalculate average percentage
                if stats['attempted'] > 0:
                    stats['avgPercentage'] = (stats['marksGained'] / stats['marksAttempted']) * 100
            
            # Convert to list and remove subjects with no attempts
            subject_stats_list = [
                stats for stats in subject_stats.values()
                if stats['attempted'] > 0
            ]
            
            # Set lowestMark to 0 if no attempts
            for stats in subject_stats_list:
                if stats['lowestMark'] == float('inf'):
                    stats['lowestMark'] = 0
            
            # Update in RAM
            data_store[class_num]['collections'][1][f'Div{division}']['Subjects'][user_id] = subject_stats_list
            
            # Update in MongoDB
            db[f'Div{division}'].update_one(
                {'Subjects': {'$exists': True}},
                {'$set': {f'Subjects.{user_id}': subject_stats_list}},
                upsert=True
            )
            
            logger.info(f"Recalculated stats for user {user_id} in class {class_num}")
    
    logger.info("Subject statistics recalculation completed")

def print_database_statistics():
    """
    Prints comprehensive statistics for both Class 9 and Class 10 databases.
    Includes number of students, exams, division-wise distribution, and performance metrics.
    """
    print("\n=== Database Statistics ===\n")
    
    # Overall statistics
    total_students = get_total_students()
    total_exams = get_total_exams()
    avg_percentage = get_average_percentage()
    
    print(f"Total Students (All Classes): {total_students}")
    print(f"Total Exams (All Classes): {total_exams}")
    print(f"Overall Average Percentage: {avg_percentage:.2f}%\n")
    
    # Class-wise statistics
    for class_num, is_class10 in [(9, False), (10, True)]:
        print(f"\n=== Class {class_num} Statistics ===")
        
        # Students and exams count
        students = get_total_students_by_class(is_class10)
        exams = get_total_exams_by_class(is_class10)
        print(f"Total Students: {students}")
        print(f"Total Exams: {exams}")
        
        # Division-wise distribution
        print("\nDivision-wise Student Distribution:")
        for div in ['A', 'B', 'C', 'D', 'E']:
            div_students = get_students_by_division(class_num, div)
            print(f"Division {div}: {len(div_students)} students")
        
        # Get subject statistics by division
        subject_stats = get_subject_stats_by_division(is_class10)
        if subject_stats:
            print("\nSubject-wise Performance:")
            for subject, stats in subject_stats.items():
                avg_score = stats.get('average_score', 0)
                print(f"{subject}: Average Score = {avg_score:.2f}%")

def get_exam_submission_stats():
    """
    Gets statistics about exam submissions from both Class 9 and 10 databases.
    Returns counts of total exams and submitted exams for each class.
    Also shows size of data_store in RAM.
    """
    print("\n=== Exam Submission Statistics ===\n")

    # Get data_store size
    import sys
    data_store_size = sys.getsizeof(data_store)
    print(f"Data Store Size in RAM: {data_store_size / (1024*1024):.2f} MB")

    for class_num, db in [(9, db9), (10, db10)]:
        print(f"\nClass {class_num}:")
        
        try:
            # Get total exams count
            total_exams = db.Exams.count_documents({})
            
            # Get submitted exams count
            submitted_exams = db.Exams.count_documents({"is_submitted": True})
            
            print(f"Total Exams: {total_exams}")
            print(f"Submitted Exams: {submitted_exams}")
            print(f"Submission Rate: {(submitted_exams/total_exams*100):.1f}%" if total_exams > 0 else 0)
            
        except Exception as e:
            print(f"Error getting exam stats for Class {class_num}: {str(e)}")
            continue

def recalculate_current_month_leaderboard(class10=False):
    """Recalculates the current month's leaderboard using the new ELO system."""
    class_num = 10 if class10 else 9
    current_date = datetime.now(timezone("Asia/Kolkata"))
    month_key = current_date.strftime('%Y-%m')

    # Clear current month's leaderboard
    data_store[class_num]['collections'][4]['Leaderboard'][month_key] = {}

    # Get all users
    users = data_store[class_num]['collections'][0]['Users']
    
    # Initialize all users with base ELO
    for user in users:
        user_id = user['id']
        data_store[class_num]['collections'][4]['Leaderboard'][month_key][user_id] = {
            "name": user['name'],
            "total_exams": 0,
            "total_score": 0,
            "total_questions": 0,
            "average_percentage": 0,
            "elo_score": 0  # Initial ELO score starts from 0
        }

    # Get exam history for the current month
    exam_history = data_store[class_num]['collections'][2]['ExamHistory']
    
    # Process each user's exams
    for user_id, history in exam_history.items():
        if 'overview-stats' not in history:
            continue
            
        for exam in history['overview-stats']:
            exam_date = datetime.strptime(exam['date'], '%d-%m-%Y')
            exam_month_key = exam_date.strftime('%Y-%m')
            
            # Only process exams from current month
            if exam_month_key == month_key:
                score = exam['score']
                total_questions = exam['totalQuestions']
                subject = exam['subject']
                num_lessons = len(exam.get('lessons', []))
                
                # Calculate score percentage
                score_percentage = (score / total_questions) * 100
                
                # Calculate ELO change
                elo_change = calculate_elo_change(score_percentage, num_lessons, subject)
                
                # Update user's leaderboard entry
                user_data = data_store[class_num]['collections'][4]['Leaderboard'][month_key][user_id]
                user_data["total_exams"] += 1
                user_data["total_score"] += score
                user_data["total_questions"] += total_questions
                user_data["average_percentage"] = (user_data["total_score"] / user_data["total_questions"]) * 100
                user_data["elo_score"] += elo_change

    # Update MongoDB
    db = db10 if class10 else db9
    db['Leaderboard'].update_one(
        {'_id': month_key},
        {'$set': data_store[class_num]['collections'][4]['Leaderboard'][month_key]},
        upsert=True
    )

get_exam_submission_stats()

__all__ = [
    "data_store",
    "download_data",
    "db9",
    "db10",
    "get_user",
    "get_user_stats",
    "update_user_stats",
    "add_exam",
    "get_exam",
    "update_exam",
    "get_user_exam_history",
    "get_overview_stats",
    "get_user_subjects",
    "update_user_stats_after_exam",
    "print_database_statistics",
]


--------------------------------------------------------------------------------
File: backend\generate.py
--------------------------------------------------------------------------------

import random
import json
from openai import OpenAI
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
import base64
from dotenv import load_dotenv
import ast
from typing import Dict, List, Tuple

# Load environment variables
load_dotenv()

def validate_env_config() -> List[str]:
    """
    Validate all required environment variables before initializing any clients.
    Returns a list of valid provider names.
    Raises ValueError if any required configuration is missing or invalid.
    """
    valid_providers = []
    env_vars = os.environ

    # Find all potential providers by looking for *_API_KEY pattern
    for key in env_vars:
        if key.endswith('_API_KEY'):
            provider = key.replace('_API_KEY', '')
            if provider:
                # Validate base URL exists
                base_url = os.getenv(f'{provider}_BASE_URL')
                if not base_url:
                    raise ValueError(f"Missing base URL for provider: {provider}")

                # Validate models configuration
                models_str = os.getenv(f'{provider}_MODELS')
                if not models_str:
                    raise ValueError(f"Missing models configuration for provider: {provider}")

                try:
                    models = ast.literal_eval(models_str)
                    if not isinstance(models, list) or not models:
                        raise ValueError(f"Invalid models configuration for provider: {provider}")
                except Exception as e:
                    raise ValueError(f"Error parsing models for provider {provider}: {str(e)}")

                # Check additional keys if they exist
                i = 2
                while True:
                    key = f"{provider}_API_KEY_{i}"
                    base_url_key = f"{provider}_BASE_URL_{i}"
                    
                    api_key = os.getenv(key)
                    base_url = os.getenv(base_url_key)
                    
                    # Break if no more keys found
                    if not api_key:
                        break
                    
                    # Validate base URL exists for additional key
                    if not base_url:
                        raise ValueError(f"Missing base URL for API key: {key}")
                    
                    i += 1

                valid_providers.append(provider)

    if not valid_providers:
        raise ValueError("No valid API providers found. Please check your environment variables.")

    # Validate specific use case configurations
    image_provider = os.getenv('IMAGE_MODEL_PROVIDER', '').upper()
    image_model = os.getenv('IMAGE_MODEL')
    if not image_provider or not image_model:
        raise ValueError("IMAGE_MODEL_PROVIDER and IMAGE_MODEL must be configured")
    if image_provider not in valid_providers:
        raise ValueError(f"IMAGE_MODEL_PROVIDER '{image_provider}' is not a valid provider")

    perf_provider = os.getenv('PERFORMANCE_MODEL_PROVIDER', '').upper()
    perf_model = os.getenv('PERFORMANCE_MODEL')
    if not perf_provider or not perf_model:
        raise ValueError("PERFORMANCE_MODEL_PROVIDER and PERFORMANCE_MODEL must be configured")
    if perf_provider not in valid_providers:
        raise ValueError(f"PERFORMANCE_MODEL_PROVIDER '{perf_provider}' is not a valid provider")

    return valid_providers

# Validate environment configuration
valid_providers = validate_env_config()

def get_provider_configs() -> Dict[str, Dict]:
    """
    Get configurations for validated providers.
    Returns a dictionary of provider configurations with their API keys and base URLs.
    """
    providers = {}
    
    # Process each validated provider
    for provider in valid_providers:
        base_keys = []
        base_urls = []
        
        # Get the first key and URL
        api_key = os.getenv(f'{provider}_API_KEY')
        base_url = os.getenv(f'{provider}_BASE_URL')
        base_keys.append(api_key)
        base_urls.append(base_url)
        
        # Get additional keys if they exist
        i = 2
        while True:
            key = f"{provider}_API_KEY_{i}"
            base_url_key = f"{provider}_BASE_URL_{i}"
            
            api_key = os.getenv(key)
            base_url = os.getenv(base_url_key)
            
            if not api_key or not base_url:
                break
                
            base_keys.append(api_key)
            base_urls.append(base_url)
            i += 1

        # Get models (already validated)
        models = ast.literal_eval(os.getenv(f'{provider}_MODELS'))
        
        # Store configuration
        providers[provider] = {
            'keys': list(zip(base_keys, base_urls)),
            'models': models
        }

    return providers

# Configure OpenAI clients
clients = {}
provider_configs = get_provider_configs()

# Initialize clients for each provider and key
for provider, config in provider_configs.items():
    for i, (api_key, base_url) in enumerate(config['keys'], 1):
        client_key = f"{provider.lower()}{i}" if len(config['keys']) > 1 else provider.lower()
        try:
            # Create OpenAI client with only required parameters
            clients[client_key] = OpenAI(
                api_key=api_key,
                base_url=base_url
            )
            print(f"Successfully initialized client for {provider} key {i}")
        except Exception as e:
            print(f"Error initializing client for {provider} key {i}: {str(e)}")

# Model configurations
MODEL_CONFIGS = {
    provider.lower(): config['models']
    for provider, config in provider_configs.items()
}

# Get validated model providers and models
IMAGE_MODEL_PROVIDER = os.getenv('IMAGE_MODEL_PROVIDER', '').upper()
IMAGE_MODEL = os.getenv('IMAGE_MODEL')
PERFORMANCE_MODEL_PROVIDER = os.getenv('PERFORMANCE_MODEL_PROVIDER', '').upper()
PERFORMANCE_MODEL = os.getenv('PERFORMANCE_MODEL')

def get_provider_clients(provider: str) -> List[Tuple[str, OpenAI]]:
    """Get all clients for a specific provider."""
    provider = provider.lower()
    provider_clients = []
    
    # If single client
    if provider in clients:
        provider_clients.append((provider, clients[provider]))
    
    # If multiple clients
    i = 1
    while True:
        client_key = f"{provider}{i}"
        if client_key not in clients:
            break
        provider_clients.append((client_key, clients[client_key]))
        i += 1
    
    if not provider_clients:
        raise ValueError(f"No clients found for provider: {provider}")
    
    return provider_clients

def get_random_provider_client(provider: str) -> Tuple[str, OpenAI]:
    """Get a random client for a specific provider."""
    provider_clients = get_provider_clients(provider)
    return random.choice(provider_clients)

# Validate providers exist
try:
    image_clients = get_provider_clients(IMAGE_MODEL_PROVIDER)
except ValueError as e:
    raise ValueError(f"Invalid IMAGE_MODEL_PROVIDER: {str(e)}")

try:
    performance_clients = get_provider_clients(PERFORMANCE_MODEL_PROVIDER)
except ValueError as e:
    raise ValueError(f"Invalid PERFORMANCE_MODEL_PROVIDER: {str(e)}")

# Add at the top of the file with other global variables
user_question_history = {}  # Stores used question IDs per user

def get_random_client():
    """Get a random client from the available clients."""
    if not clients:
        raise ValueError("No API clients configured")
    return random.choice(list(clients.items()))

def generate_solution(question, correct_answer, given_answer, options, client, model_name):
    prompt = f"""As an expert tutor, help a student understand a problem they got wrong. You have:

        1. The original question
        2. The correct answer
        3. The student's incorrect answer

        Create a response that:

        1. Explains why the correct answer is right
        2. Breaks down the problem-solving steps
        3. Provides helpful context
        4. Uses proper and good formatting like bold (**) etc.

        Use simple language and be encouraging. Here's the information:

        Question: {question}
        Correct Answer: {correct_answer}
        Student's Answer: {given_answer}
        provided options: {options}
        Provide a detailed explanation based on this."""

    try:
        # Get model based on client type
        model = random.choice(MODEL_CONFIGS[model_name])
            
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "Provide direct solutions without introductory phrases. Jump straight to the answer. Do not cheerup anyone in your responses. Dont use formatting like bold (**) etc.",
                },
                {"role": "user", "content": prompt},
            ],
            model=model,
            temperature=0.7,
            max_tokens=1024,
            top_p=1,
            stream=False,
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        raise e

def process_question(question_data):
    """Helper function to process individual questions for parallel execution"""
    client_name, client = get_random_provider_client(IMAGE_MODEL_PROVIDER)
    return generate_solution(
        question_data["question"],
        question_data["correct_answer"],
        question_data["given_answer"],
        question_data["options"],
        client,
        client_name
    )


def generate_solutions_batch(questions_list):
    """
    Generate solutions for a batch of questions in parallel
    Each question in questions_list should be a dictionary with the format:
    {
        'question': 'question text',
        'correct_answer': 'correct answer',
        'given_answer': 'student answer',
        'options': {'A': 'option1', 'B': 'option2', ...}
    }
    """
    batch_size = 10
    solutions = []

    for i in range(0, len(questions_list), batch_size):
        batch = questions_list[i : i + batch_size]

        with ThreadPoolExecutor(max_workers=batch_size) as executor:
            future_to_question = {}
            for question in batch:
                # Try different clients if one fails
                available_clients = list(clients.keys())
                random.shuffle(available_clients)

                def try_with_client(client_name):
                    selected_client = clients[client_name]
                    return generate_solution(
                        question["question"],
                        question["correct_answer"],
                        question["given_answer"],
                        question["options"],
                        selected_client,
                        client_name,
                    )

                future = executor.submit(
                    lambda q: next(
                        (
                            try_with_client(client)
                            for client in available_clients
                            if True
                        ),
                        "Error: All clients failed",
                    ),
                    question,
                )
                future_to_question[future] = question

            # Collect results as they complete
            for future in as_completed(future_to_question):
                question = future_to_question[future]
                try:
                    solution = future.result()
                    solutions.append(
                        {"question": question["question"], "solution": solution}
                    )
                except Exception as e:
                    solutions.append(
                        {
                            "question": question["question"],
                            "solution": f"Error: {str(e)}",
                        }
                    )

    return solutions


def parse_questions_from_json(file_path):
    # Update to explicitly use UTF-8 encoding
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except UnicodeDecodeError:
        # Fallback to read with 'latin-1' if UTF-8 fails
        with open(file_path, 'r', encoding='latin-1') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return []


def shuffle_question_options(questions):
    """
    Shuffle the options of each question while maintaining the correct answer.
    Assertion reason questions will not have their options shuffled.

    Args:
        questions (list): List of question dictionaries

    Returns:
        list: Questions with shuffled options
    """

    for question in questions:
        # Check if this is an assertion reason question by looking at the options
        is_assertion_reason = any(
            "assertion" in str(value).lower() and "reason" in str(value).lower()
            for value in question["options"].values()
        )

        if not is_assertion_reason:
            # Store the correct answer value
            correct_answer_key = question["answer"]
            correct_answer_value = question["options"][correct_answer_key]

            # Get all option values and shuffle them
            option_values = list(question["options"].values())
            random.shuffle(option_values)

            # Create new options dictionary with shuffled values
            option_keys = list(
                question["options"].keys()
            )  # usually ['a', 'b', 'c', 'd']
            question["options"] = dict(zip(option_keys, option_values))

            # Find the new key for the correct answer
            for key, value in question["options"].items():
                if value == correct_answer_value:
                    question["answer"] = key
                    break

    return questions


def remove_duplicates_and_replace(questions, available_questions):
    """
    Remove duplicate questions and replace them with new ones from available questions.
    Simple exact match comparison.
    """
    seen_questions = {}  # question text -> question dict
    unique_questions = []
    
    for question in questions:
        q_text = question['question'].strip().lower()
        if q_text not in seen_questions:
            seen_questions[q_text] = question
            unique_questions.append(question)
    
    # If we removed any duplicates, try to replace them
    remaining_questions = [
        q for q in available_questions.values()
        if q['question'].strip().lower() not in seen_questions
    ]
    
    while len(unique_questions) < len(questions) and remaining_questions:
        new_question = random.choice(remaining_questions)
        unique_questions.append(new_question)
        remaining_questions.remove(new_question)
    
    return unique_questions


def generate_exam_questions(subject, lesson_files, user_id):
    global user_question_history
    
    # Initialize user history if not exists
    if user_id not in user_question_history:
        user_question_history[user_id] = []
    
    num_lessons = len(lesson_files)
    if num_lessons == 1:
        num_questions = 15
    elif num_lessons == 2:
        num_questions = 20
    elif num_lessons == 3:
        num_questions = 30
    elif num_lessons == 4:
        num_questions = 40
    else:
        num_questions = min(40 + (num_lessons - 4) * 10, 60)

    all_questions = {}
    lesson_question_counts = {}

    # First, collect all available questions
    for lesson_index, file in enumerate(lesson_files, 1):
        try:
            questions = parse_questions_from_json(file)
            if not questions:  # Skip if no questions were loaded
                print(f"Warning: No questions loaded from {file}")
                continue
                
            questions = shuffle_question_options(questions)  # Shuffle options
            lesson_question_counts[lesson_index] = len(questions)
            for q_index, question in enumerate(questions, 1):
                question_id = f"L{lesson_index}Q{q_index}"
                all_questions[question_id] = question
                question["lesson"] = lesson_index
                question["l-id"] = question_id
        except Exception as e:
            print(f"Error processing file {file}: {e}")
            continue

    if not all_questions:
        raise Exception("No valid questions could be loaded from any lesson file")

    # Remove previously used questions
    available_questions = {
        qid: q
        for qid, q in all_questions.items()
        if qid not in user_question_history[user_id]
    }
    
    # If we don't have enough questions, reset history for these lesson files
    if len(available_questions) < num_questions:
        print(
            f"Resetting question history for user {user_id} due to insufficient questions"
        )
        current_lesson_ids = set(all_questions.keys())
        user_question_history[user_id] = [
            qid
            for qid in user_question_history[user_id]
            if qid not in current_lesson_ids
        ]
        available_questions = all_questions

    # Calculate the number of questions to select from each lesson
    total_questions = sum(lesson_question_counts.values())
    questions_per_lesson = {
        lesson: int(round(count / total_questions * num_questions))
        for lesson, count in lesson_question_counts.items()
    }

    # Adjust the total number of questions if rounding caused a discrepancy
    total_selected = sum(questions_per_lesson.values())
    if total_selected < num_questions:
        questions_per_lesson[
            max(questions_per_lesson, key=questions_per_lesson.get)
        ] += num_questions - total_selected
    elif total_selected > num_questions:
        questions_per_lesson[
            max(questions_per_lesson, key=questions_per_lesson.get)
        ] -= total_selected - num_questions

    # Select questions from each lesson
    selected_questions = []
    for lesson, count in questions_per_lesson.items():
        lesson_questions = [
            q for q in available_questions.values() 
            if q["lesson"] == lesson
        ]
        selected = random.sample(lesson_questions, min(count, len(lesson_questions)))
        selected_questions.extend(selected)

    # Remove duplicates and replace them with new questions
    selected_questions = remove_duplicates_and_replace(selected_questions, available_questions)
    
    # Shuffle the final selection
    random.shuffle(selected_questions)
    
    # Update user history with final selected questions
    user_question_history[user_id].extend(q["l-id"] for q in selected_questions)

    # Final validation of questions
    valid_questions = [
        q for q in selected_questions
        if isinstance(q.get("options"), dict) and len(q["options"]) == 4
    ]

    return valid_questions


def generate_performance_analysis(results, lessons, is_class10):
    """
    Generate a performance analysis based on exam results and lessons.

    Args:
        results: List of question results including correctness and solutions
        lessons: List of lesson names the exam covered
        is_class10: Boolean indicating if this is for class 10

    Returns:
        str: AI-generated performance analysis
    """
    # Load lessons data
    lessons_file = "lessons10.json" if is_class10 else "lessons.json"
    with open(os.path.join("backend/data", lessons_file), "r") as f:
        all_lessons = json.load(f)

    # Format lesson names
    lesson_names = []
    for lesson in lessons:
        for subject, subject_lessons in all_lessons.items():
            if lesson in subject_lessons:
                lesson_names.append(f"{subject}: {lesson}")
                break

    # Calculate statistics
    total_questions = len(results)
    correct_answers = sum(1 for r in results if r["is_correct"])
    percentage = (correct_answers / total_questions) * 100
    
    # Format results into a string for analysis
    result = ""
    for r in results:
        result += f"Question: {r['question']}\n"
        result += f"Correct Answer: {r['correct_answer']}\n"
        result += f"Student's Answer: {r['selected_answer']}\n"
        result += f"Is Correct: {r['is_correct']}\n"
        if "solution" in r:
            result += f"Solution: {r['solution']}\n"
        result += "\n"

    # Create the prompt
    prompt = f"""Analyze my exam performance and provide specific, actionable feedback.

Format your response using these exact sections and formatting rules:

### Performance Overview
• Start with a brief overview of overall performance
• Include the score: {correct_answers}/{total_questions} ({percentage:.1f}%)
• Mention strongest and weakest areas based on actual results

Results : {result}

### Topic Analysis 
For each topic where mistakes were made:
• Topic name: Number of mistakes
  * Specific concept that needs attention
  * Common misconception identified
  * Example of type of question that caused difficulty

### Focus Areas
List specific topics to practice, in order of priority:
• Topic 1
  * Sub-concept to focus on
  * Specific type of problems to practice
• Topic 2
  * Sub-concept to focus on
  * Specific type of problems to practice

### Next Steps
3-4 specific, actionable steps based on their performance in these exact topics:
• Step 1: [Topic-specific action]
• Step 2: [Topic-specific action]
• Step 3: [Topic-specific action]

Reference these lessons in your analysis: {', '.join(lesson_names)}

Important:
- Identify topics from the questions to give better feedback
- Don't give generic study tips
- Focus on the specific topics where mistakes were made
- Provide concrete examples based on the actual mistakes
- Keep formatting consistent with the above structure
- Use bullet points (•) for main points and (*) for sub-points
"""

    try:
        client_name, client = get_random_provider_client(PERFORMANCE_MODEL_PROVIDER)
        print(f"Generating performance analysis using {client_name} client...")
        
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "You are an experienced teacher providing constructive feedback on exam performance. Be specific, encouraging, and practical in your advice.",
                },
                {"role": "user", "content": prompt},
            ],
            model=PERFORMANCE_MODEL,
            temperature=0.7,
            max_tokens=2048,
            top_p=1,
            stream=False,
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        print(f"Error generating performance analysis with {PERFORMANCE_MODEL_PROVIDER}: {e}")
        return "Unable to generate performance analysis at this time."


def encode_image_to_base64(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def analyze_single_image(image_path, client):
    """Analyze a single image and extract questions"""
    try:
        # Read image and encode to base64
        image_base64 = encode_image_to_base64(image_path)
        
        prompt = """You are a model that analyses a given image containing MCQ questions and identifies the question and 4 options and an answer which will be tick marked upon. Answer in json only with this format:

        [
        {
        "question":"",
        "options":{"a":"",...},
        "answer":"a/b/c/d" 
        }
        ]

        Question would be generally in bold text but not always.
        If no question is found, return an empty list!
        If no option is tick marked, return empty string for answer.
        If options are not found, do not include the question in the response.
        """

        chat_completion = client.chat.completions.create(
            model="gemini-1.5-pro",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text", 
                            "text": prompt
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=2048,
            temperature=0.1,
            timeout=90  # 90 second timeout per image
        )
        
        # Clean up any markdown code block indicators from the response
        response_text = chat_completion.choices[0].message.content.strip()
        response_text = response_text.replace('```json', '').replace('```', '')
        
        try:
            questions = json.loads(response_text)
            return questions if isinstance(questions, list) else []
        except json.JSONDecodeError:
            print(f"Error parsing response for {image_path}")
            return []
            
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return []


def analyze_images(image_paths):
    """
    Analyze multiple images containing MCQ questions using configured image model.
    Sends all images in a single API call to avoid rate limiting.
    Returns a list of questions extracted from the images.
    """
    try:
        client_name, client = get_random_provider_client(IMAGE_MODEL_PROVIDER)
        
        # Prepare all images
        image_contents = []
        for path in image_paths:
            try:
                image_base64 = encode_image_to_base64(path)
                image_contents.append({
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }
                })
            except Exception as e:
                print(f"Error encoding image {path}: {e}")
                continue
        
        if not image_contents:
            print("No valid images to process")
            return []
            
        # Create prompt with all images
        prompt = """Analyze these images containing MCQ questions. For each question found in any image, identify the question text, 4 options, and the answer (if marked).
        Answer in json only with this format:
        [
        {
        "question":"",
        "options":{"a":"",...},
        "answer":"a/b/c/d" 
        }
        ]

        Use LaTeX formatting with $ delimiters for:
        1. All mathematical expressions and equations (e.g. $x^2 + y^2 = z^2$)
        2. Chemical formulas and equations (e.g. $H_2SO_4$, $2H_2 + O_2 \rightarrow 2H_2O$)
        3. Scientific notations (e.g. $3.6 \\times 10^{-19}$)
        4. Units with superscripts/subscripts (e.g. $m/s^2$, $cm^3$)
        5. Greek letters (e.g. $\alpha$, $\beta$, $\theta$)
        6. Special mathematical symbols (e.g. $\pm$, $\div$, $\leq$)
        7. Fractions (e.g. $\frac{1}{2}$)
        8. Square roots (e.g. $\sqrt{2}$)
        9. Vector notations (e.g. $\vec{F}$)
        10. Degree symbols (e.g. $45°$ as $45^\circ$)

        Questions would be generally in bold text but not always.
        If no questions are found, return an empty list!
        If no option is tick marked for a question, return empty string for its answer.
        If options are not found for a question, do not include that question in the response.
        Process all visible questions from all provided images.

        For questions with tables:
        1. Format tables using markdown table syntax with | for columns and - for headers
        2. Example table format:
           | Header1 | Header2 |
           |---------|---------|
           | Cell1   | Cell2   |
        3. Include the formatted table as part of the question text
        4. Preserve table alignment and spacing
        5. Use LaTeX formatting within table cells where applicable

        For questions with sub-options like (i), (ii), (iii), etc. where the main options (a), (b), (c), (d) 
        refer to combinations of these sub-options, include both the sub-options and main options properly.
        Example format for such questions:
        {
            "question": "<Main question text followed by sub-options>: (i) first sub-option (ii) second sub-option...",
            "options": {
                "a": "(i) and (ii)",
                "b": "(i), (ii) and (iii)",
                ...
            },
            "answer": "a/b/c/d"
        }
        If there is any text in square brackets like [NCERT Exemplar] indicating the source, include it at the end of the question text.

        Remember to maintain proper LaTeX spacing and use proper LaTeX commands for mathematical operations.
        For example:
        - Use \\times for multiplication instead of x
        - Use \\cdot for dot multiplication
        - Use proper spacing in equations with \\ when needed
        - Use \\text{} for text within math mode
        - Escape special characters properly
        """
        
        # Combine prompt and all images in the content
        content = [{"type": "text", "text": prompt}]
        content.extend(image_contents)
        
        print(f"Processing {len(image_paths)} images using {client_name} client...")
        
        # Make a single API call with all images
        chat_completion = client.chat.completions.create(
            model=IMAGE_MODEL,
            messages=[{
                "role": "user",
                "content": content
            }],
            max_tokens=8192,
            temperature=0.1,
            timeout=120
        )
        
        # Clean up and parse response
        response_text = chat_completion.choices[0].message.content.strip()
        response_text = response_text.replace('```json', '').replace('```', '')
        
        try:
            questions = json.loads(response_text)
            if not isinstance(questions, list):
                print("Invalid response format - not a list")
                return []
                
            # Validate questions
            valid_questions = [
                q for q in questions 
                if isinstance(q, dict) 
                and "question" in q 
                and "options" in q 
                and isinstance(q["options"], dict)
                and len(q["options"]) == 4
            ]
            
            # Remove duplicates
            seen_questions = set()
            unique_questions = []
            
            for q in valid_questions:
                question_text = q["question"].strip().lower()
                if question_text not in seen_questions:
                    seen_questions.add(question_text)
                    unique_questions.append(q)
            
            print(f"Found {len(unique_questions)} unique valid questions")
            return unique_questions
            
        except json.JSONDecodeError:
            print("Error parsing response JSON")
            return []
            
    except Exception as e:
        print(f"Error in analyze_images: {e}")
        return []


if __name__ == "__main__":
    pass


--------------------------------------------------------------------------------
File: backend\main.py
--------------------------------------------------------------------------------

try:
    import copy
    import json
    import os
    import random
    import time
    from datetime import datetime
    import generate
    import petname
    from bson.json_util import dumps
    from werkzeug.utils import secure_filename
    from flask import Flask, jsonify, request, send_from_directory
    from flask_cors import CORS
    from flask_jwt_extended import (
        JWTManager,
        create_access_token,
        get_jwt_identity,
        jwt_required,
    )
    from dotenv import load_dotenv
    from db import (
        add_exam,
        create_user_data,
        download_data,
        get_average_percentage,
        get_average_scores,
        get_exam,
        get_overview_stats,
        get_standard_stats,
        get_student_detailed_stats,
        data_store,
        get_students_by_division,
        get_subject_stats_by_division,
        get_total_exams,
        get_total_exams_by_class,
        get_total_students,
        get_total_students_by_class,
        get_user,
        get_user_exam_history,
        get_user_stats,
        get_user_subjects,
        update_exam,
        update_user_stats_after_exam,
        db9,
        db10,
        recalculate_current_month_leaderboard,
    )
    import threading
    from queue import Queue
    import uuid
except ImportError as e:
    print(f"Import Error: {str(e)}")
    print("Did you run npm run setup?")
    raise

# Load environment variables
load_dotenv()

# Setup
current_dir = os.path.dirname(os.path.abspath(__file__))
data_path = os.path.join(current_dir, "data")
base_path = os.path.join(data_path, "lessons")

# Configure upload settings from environment variables
UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                            os.getenv('UPLOAD_FOLDER', 'uploads'))
ALLOWED_EXTENSIONS = set(os.getenv('ALLOWED_EXTENSIONS', 'png,jpg,jpeg').split(','))
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

app = Flask(__name__)
CORS(app, resources={
    r"/api/*": {
        "origins": [
            "http://localhost:3000",
            "http://127.0.0.1:3000",
        ],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True,
        "expose_headers": ["Content-Type", "Authorization"],
        "allow_credentials": True
    }
})

# Configure Flask from environment variables
app.config["JWT_SECRET_KEY"] = os.getenv('FLASK_SECRET_KEY', 'boombakabambam')
jwt = JWTManager(app)
app.config["JWT_ACCESS_TOKEN_EXPIRES"] = False
app.config["JWT_REFRESH_TOKEN_EXPIRES"] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = int(os.getenv('MAX_CONTENT_LENGTH', 16777216))  # Default 16MB

# Load student information
student_info = json.loads(open(os.path.join(data_path, "students.json")).read())
class10_student_info = json.loads(
    open(os.path.join(data_path, "class10_students.json")).read()
)

# Add this near the top with other global variables
UPDATE_LOGS = [
    {
        "version": "1.8.3",
        "date": "2024-11-19",
        "changes": [
            {
                "title": "Added Performance Overview",
                "description": "Students will be able to see a performance overview of the exam. AI model will analyse and suggest topics to re-read and steps to practise. This provides a good assistance on what students should study next",
            },
            {
                "title": "Questions repeat less",
                "description": "If you want to practise a lesson more, repeated questions across exams won't haunt you!",
            },
            {
                "title": "Randomised options",
                "description": "Questions would now have varied options for correct answers, which previously revolved around B & C. Assertion and resoning questions are not affected by this change.",
            },
        ],
    }
]

# Add after other global variables
JOB_QUEUE = Queue()
JOB_RESULTS = {}
JOB_STATUS = {}

def get_teacher_data(user_id):
    with open(os.path.join(data_path, "teachers.json"), "r") as f:
        teachers = json.load(f)
    return teachers.get(user_id)


def get_current_user_info():
    """Helper function to extract user info from JWT retoken"""
    jwt_data = get_jwt_identity()

    # Handle both old and new token formats
    if isinstance(jwt_data, dict):
        return jwt_data.get("user_id"), jwt_data.get("class10", False)
    # Legacy token support
    return jwt_data, False  # Assume class 9 for old tokens


def decode_unicode(obj):
    if isinstance(obj, str):
        try:
            return json.loads(f'"{obj}"')
        except json.JSONDecodeError:
            return obj
    elif isinstance(obj, dict):
        return {
            decode_unicode(key): decode_unicode(value) for key, value in obj.items()
        }
    elif isinstance(obj, list):
        return [decode_unicode(element) for element in obj]
    return obj


def generate_memorable_name():
    return f"{''.join([i.capitalize().replace('hot', ' ') for i in petname.generate(2).split('-')])}-{random.randint(100, 999)}"


def get_student_class(user_id):
    """Determine if student is in class 10 or 9"""
    if user_id in class10_student_info:
        return class10_student_info[user_id], True
    elif user_id in student_info:
        return student_info[user_id], False
    return None, None


def lesson2filepath(subject, lesson, class10=False):
    subject_lower = subject.lower()
    lesson_number = lesson.split()[-1]
    # Add class10 folder prefix if needed
    base_folder = "lessons10" if class10 else "lessons"

    if subject == "SS":
        prefix = lesson.split(":")[0].lower()
        return os.path.join(
            data_path,
            base_folder,
            subject_lower,
            f"{prefix}.{lesson_number.split('-')[1]}.json",
        )
    elif subject == "Science":
        return os.path.join(
            data_path, base_folder, subject_lower, f"lesson-{lesson_number}.json"
        )
    elif subject == "Math":
        return os.path.join(
            data_path, base_folder, subject_lower, f"lesson{lesson_number}.json"
        )
    else:
        return os.path.join(
            data_path, base_folder, subject_lower, f"lesson{lesson_number}.json"
        )


def load_json_file(filename):
    try:
        with open(os.path.join(data_path, filename), "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading {filename}: {e}")
        return None


def calculate_lesson_analytics(questions, selected_answers):
    """
    Calculate per-lesson analytics using l-id or lesson field from questions

    Args:
        questions: List of question dictionaries containing l-id or lesson
        selected_answers: List of user's selected answers

    Returns:
        dict: Lesson-wise analytics with scores and details
    """
    lesson_analytics = {}

    for i, (question, selected_answer) in enumerate(zip(questions, selected_answers)):
        # Try to get lesson ID from l-id first, then from lesson field
        if "l-id" in question:
            lesson_id = question["l-id"].split("Q")[0]  # Extract L1, L2, etc.
        elif "lesson" in question:
            lesson_id = f"L{question['lesson']}"
        else:
            # Skip questions without lesson identification
            continue

        if lesson_id not in lesson_analytics:
            lesson_analytics[lesson_id] = {
                "lesson_name": f"Lesson {lesson_id[1:]}",  # L1 -> Lesson 1
                "questions_total": 0,
                "questions_correct": 0,
                "percentage": 0,
            }

        lesson_analytics[lesson_id]["questions_total"] += 1
        if selected_answer["option"] == question.get("answer"):
            lesson_analytics[lesson_id]["questions_correct"] += 1

    # Calculate percentages for each lesson
    for lesson in lesson_analytics.values():
        lesson["percentage"] = (
            lesson["questions_correct"] / lesson["questions_total"]
        ) * 100

    return lesson_analytics


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS





@app.route("/api/login", methods=["POST"])
def login():
    data = request.get_json()
    user_id = data.get("userId")
    password = data.get("password")

    if not user_id or not password:
        return jsonify({"message": "User ID and password are required"}), 400

    # Check if user is a teacher
    teachers_data = load_json_file("teachers.json")
    if teachers_data and user_id in teachers_data:
        teacher_info = teachers_data[user_id]
        student_data = {
            "name": teacher_info.get("name", "Teacher"),
            "roll": 0,
            "div": teacher_info.get("division", "A"),
            "standard": teacher_info.get(
                "current_standard"
            ),  # Use first standard as default
        }
        is_class10 = teacher_info.get("current_standard") == 10
    else:
        # Regular student login flow
        student_data, is_class10 = get_student_class(user_id)
        if student_data is None:
            return jsonify({"message": "Invalid User ID"}), 400

    # Check if user exists in database
    user = get_user(user_id, class10=is_class10)

    if user is None:
        try:
            name = student_data["name"]
            roll = student_data["roll"]
            division = student_data["div"]
            user = create_user_data(user_id, password, name, roll, division, is_class10)

            # Include class10 status in JWT token
            access_token = create_access_token(
                identity={"user_id": user_id, "class10": is_class10},
                expires_delta=False,
            )

            response = {
                "message": "Login successful",
                "token": access_token,
                "user_id": user_id,
                "class10": is_class10,
            }
            return jsonify(response), 200

        except Exception as e:
            return jsonify({"message": f"Error creating new user: {str(e)}"}), 500

    if user["password"] == password:
        # Include class10 status in JWT token
        access_token = create_access_token(
            identity={"user_id": user_id, "class10": is_class10}, expires_delta=False
        )
        response = {
            "message": "Login successful",
            "token": access_token,
            "user_id": user_id,
            "class10": is_class10,
        }
        return jsonify(response), 200
    else:
        return jsonify({"message": "Invalid credentials"}), 401


@app.route("/api/lessons", methods=["GET"])
@jwt_required()
def get_lessons():
    current_user, is_class10 = get_current_user_info()

    # Check if user is a teacher
    teachers_data = load_json_file("teachers.json")
    if teachers_data and current_user in teachers_data:
        # For teachers, get class10 from query param
        class10_param = request.args.get("class10")
        if class10_param is not None:
            is_class10 = class10_param.lower() == "true"

    subject = request.args.get("subject")
    if not subject:
        return jsonify({"message": "Subject parameter is required"}), 400

    lessons_file = "lessons10.json" if is_class10 else "lessons.json"
    with open(os.path.join(data_path, lessons_file)) as f:
        lessons = json.load(f)

    if subject not in lessons:
        return jsonify({"message": "Invalid subject"}), 400

    return jsonify(lessons[subject]), 200


@app.route("/api/create_exam", methods=["POST"])
@jwt_required()
def create_exam():
    current_user, is_class10 = get_current_user_info()

    data = request.get_json()
    is_test = data.get("test", False)

    if is_test:
        test_id = data.get("test-id")
        if not test_id:
            return jsonify({"message": "Test ID is required"}), 400

        # Load test data from active_tests.json
        active_tests = load_json_file("active_tests.json")
        if not active_tests or "tests" not in active_tests:
            return jsonify({"message": "Test not found"}), 404
        print("\n\n", active_tests, "\n\n")
        # Access the tests array inside active_tests
        test_data = next(
            (
                test
                for test in active_tests["tests"]
                if test["test-id"] == test_id
                and current_user not in test.get("completed_by", [])
            ),
            None,
        )
        print("\n\n", test_data, "\n\n")
        if not test_data:
            return jsonify({"message": "Test not found or already completed"}), 404
        print(is_class10)
        exam_id = f"{test_id}-{current_user}"
        subject = test_data["subject"]
        lessons = test_data["lessons"]
        questions = test_data["questions"]

    else:
        # Original exam creation logic
        subject = data.get("subject")
        lessons = data.get("lessons")
        if not subject or not lessons:
            return jsonify({"message": "Subject and lessons are required"}), 400

        lesson_paths = [
            lesson2filepath(subject, lesson, class10=is_class10) for lesson in lessons
        ]
        if not lesson_paths:
            return jsonify({"message": "Invalid lessons provided"}), 400

        exam_id = generate_memorable_name()
        try:
            questions = generate.generate_exam_questions(
                subject, lesson_paths, current_user
            )
        except Exception as e:
            print(f"Error generating questions: {e}")
            return jsonify({"message": f"Error generating questions: {str(e)}"}), 500

    exam_data = {
        "exam-id": exam_id,
        "userId": current_user,
        "subject": subject,
        "lessons": lessons,
        "questions": questions,
        "is_submitted": False,
        "selected_answers": [],
        "class10": is_class10,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "test": is_test,
    }

    try:
        added_exam = add_exam(exam_data, is_class10)
        if added_exam:
            return jsonify({"exam-id": exam_id}), 201
        else:
            return jsonify({"message": "Error creating exam"}), 500
    except Exception as e:
        print(f"Error adding exam: {e}")
        return jsonify({"message": f"Error creating exam: {str(e)}"}), 500


@app.route("/api/submit_exam/<exam_id>", methods=["POST"])
@jwt_required()
def submit_exam(exam_id):
    current_user, is_class10 = get_current_user_info()
    data = request.get_json()
    selected_answers = data.get("answers")

    exam = get_exam(exam_id, is_class10)
    if not exam:
        return jsonify({"message": "Exam not found"}), 404

    if exam.get("is_submitted", False):
        return jsonify({"message": "Exam already submitted"}), 400

    if exam["userId"] != current_user:
        return jsonify({"message": "Unauthorized"}), 401

    total_questions = len(exam["questions"])
    score = 0

    # Prepare questions that need solutions
    questions_needing_solutions = []
    initial_results = []

    for i, (question, selected_answer) in enumerate(
        zip(exam["questions"], selected_answers), 1
    ):
        correct_answer = question.get("answer")
        is_correct = selected_answer["option"] == correct_answer
        score += 1 if is_correct else 0

        selected_option_value = question["options"][selected_answer["option"]]
        correct_option_value = question["options"][correct_answer]

        result = {
            "question-no": str(i),
            "question": question["question"],
            "is_correct": is_correct,
            "selected_answer": f"{selected_answer['option']}) {selected_option_value}",
            "correct_answer": f"{correct_answer}) {correct_option_value}",
            "solution": None,
        }

        initial_results.append(result)

        # Collect incorrect questions for solution generation
        if not is_correct:
            questions_needing_solutions.append(
                {
                    "question": question["question"],
                    "correct_answer": correct_option_value,
                    "given_answer": selected_option_value,
                    "options": question["options"],
                    "index": i - 1,
                }
            )

    # Generate solutions if there are any incorrect answers
    if questions_needing_solutions:
        try:
            solutions = generate.generate_solutions_batch(questions_needing_solutions)

            # Map solutions back to results
            for solution in solutions:
                for i, result in enumerate(initial_results):
                    if result["question"] == solution["question"]:
                        initial_results[i]["solution"] = solution["solution"]
                        break

        except Exception as e:
            print(f"Error generating solutions: {e}")
            # Continue without solutions if generation fails
            pass

    percentage = (score / total_questions) * 100

    # Calculate lesson-wise analytics
    lesson_analytics = calculate_lesson_analytics(exam["questions"], selected_answers)

    # Generate performance analysis
    try:
        performance_analysis = generate.generate_performance_analysis(
            initial_results, exam["lessons"], is_class10
        )
        perf_analysis = performance_analysis
        print("\n\n", perf_analysis, "\n\n")
    except Exception as e:
        print(f"Error generating performance analysis: {e}")
        perf_analysis = None

    updated_data = {
        "is_submitted": True,
        "selected_answers": selected_answers,
        "score": score,
        "percentage": percentage,
        "results": initial_results,
        "lessons": exam["lessons"],
        "lesson_analytics": lesson_analytics,
        "submission_timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "test": exam.get("test", False),
        "performance_analysis": perf_analysis,
    }

    # If it's a test submission
    if exam.get("test", False):
        # Extract the test ID from exam ID (e.g., "TS-Math-101" from "TS-Math-101-user123")
        test_id = "-".join(
            exam_id.split("-")[:-1]
        )  # Get everything before the last segment

        try:
            # Load and update active_tests.json
            active_tests_data = load_json_file("active_tests.json")
            if active_tests_data and "tests" in active_tests_data:
                # Find and update the specific test
                for test in active_tests_data["tests"]:
                    if test["test-id"] == test_id:
                        # Initialize completed_by if it doesn't exist
                        if "completed_by" not in test:
                            test["completed_by"] = []

                        # Add current user if not already completed
                        if current_user not in test["completed_by"]:
                            test["completed_by"].append(current_user)

                        # Write updates back to file
                        with open(
                            os.path.join(data_path, "active_tests.json"),
                            "w",
                            encoding="utf-8",
                        ) as f:
                            json.dump(
                                active_tests_data, f, indent=4, ensure_ascii=False
                            )
                        break
        except Exception as e:
            print(f"Error updating active_tests.json: {e}")
            # Continue even if update fails

    # Get user data before updating stats
    user_data = get_user(current_user, is_class10)
    if not user_data:
        return jsonify({"message": "User data not found"}), 404
    if update_exam(exam_id, updated_data, is_class10):
        try:
            user_stats, subject_stats = update_user_stats_after_exam(
                current_user,
                exam["subject"],
                score,
                total_questions,
                updated_data,
                exam_id,
                is_class10,
            )
        except Exception as e:
            print(f"Error updating user stats: {e}")
            # Continue even if stats update fails

        return jsonify(
            {
                "message": "Exam submitted successfully",
                "score": score,
                "total_questions": total_questions,
                "percentage": percentage,
                "results": initial_results,
            }
        ), 200
    else:
        return jsonify({"message": "Failed to submit exam"}), 500


@app.route("/api/exam/<exam_id>", methods=["GET"])
@jwt_required()
def get_exam_route(exam_id):
    _, is_class10 = get_current_user_info()
    exam_data = get_exam(exam_id, is_class10)

    if exam_data:
        # Create a copy of the exam data for the response
        response_data = copy.deepcopy(exam_data)
        if not response_data.get("is_submitted", False):
            # Remove answers only for the response, not for the stored data
            for question in response_data["questions"]:
                question.pop("answer", None)

        # Decode Unicode for the response data
        response_data = decode_unicode(response_data)
        return jsonify(response_data), 200
    else:
        return jsonify({"message": "Exam not found"}), 404


@app.route("/api/user_exams", methods=["GET"])
@jwt_required()
def get_user_exams_route():
    current_user, is_class10 = get_current_user_info()
    user_exams = get_user_exam_history(current_user, is_class10)
    return jsonify(user_exams), 200


@app.route("/api/report", methods=["POST"])
@jwt_required()
def report_question():
    current_user, is_class10 = get_current_user_info()
    data = request.get_json()

    exam_id = data.get("examId")
    question_index = data.get("questionIndex")

    if not all([exam_id, question_index]):
        return jsonify({"message": "Missing required fields"}), 400

    try:
        # Get the exam data
        exam = get_exam(exam_id, is_class10)
        if not exam:
            return jsonify({"message": "Exam not found"}), 404

        # Get the question data
        if question_index >= len(exam["questions"]):
            return jsonify({"message": "Invalid question index"}), 400

        question_data = exam["questions"][question_index]

        # Updated path to use data folder
        reports_file = os.path.join(data_path, "reports", "question_reports.json")
        os.makedirs(os.path.dirname(reports_file), exist_ok=True)

        try:
            with open(reports_file, "r") as f:
                reports = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            reports = []

        # Check if question already reported
        for report in reports:
            if (
                report["exam_id"] == exam_id
                and report["question_index"] == question_index
                and report["user_id"] == current_user
            ):
                return jsonify({"message": "Report submitted successfully"}), 200

        # Create new report
        report = {
            "user_id": current_user,
            "class10": is_class10,
            "exam_id": exam_id,
            "question_index": question_index,
            "question_data": question_data,
            "subject": exam["subject"],
            "lessons": exam["lessons"],
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        }

        reports.append(report)

        with open(reports_file, "w") as f:
            json.dump(reports, f, indent=2)

        return jsonify({"message": "Report submitted successfully"}), 200

    except Exception as e:
        return jsonify({"message": f"Error submitting report: {str(e)}"}), 500


@app.route("/api/tests", methods=["GET"])
@jwt_required()
def get_tests():
    current_user, is_class10 = get_current_user_info()
    # Load required JSON files
    active_tests_data = load_json_file("active_tests.json")
    teachers_data = load_json_file("teachers.json")

    if not active_tests_data or "tests" not in active_tests_data:
        return jsonify({"message": "No tests available"}), 404

    # Get the tests array from the data
    active_tests = active_tests_data["tests"]

    # Check if user is teacher
    is_teacher = current_user in teachers_data if teachers_data else False

    # Filter tests based on class
    available_tests = []
    for test in active_tests:
        # Ensure test is a dictionary
        if not isinstance(test, dict):
            continue

        # For teachers, only show tests they created
        if is_teacher:
            if test.get("created_by") != current_user:
                continue
        else:
            # For students, skip if already completed
            completed_users = test.get("completed_by", [])
            if current_user in completed_users:
                continue

            # Skip if test is not for student's class
            test_standard = test.get("standard")
            if (test_standard == 10) != is_class10:
                continue

        test_info = {
            "subject": test.get("subject"),
            "test-id": test.get("test-id"),
            "lessons": test.get("lessons", []),
            "questions": len(test.get("questions", [])),
        }
        available_tests.append(test_info)

    response = {"tests": available_tests, "teacher": is_teacher}

    # Add teacher-specific information
    if is_teacher:
        teacher_info = teachers_data.get(current_user, {})
        teacher_standards = teacher_info.get("standard", [])

        response_data = {
            "teacher_subject": teacher_info.get("subject"),
            "teacher_standard": teacher_standards,
        }

        if not (9 in teacher_standards and 10 in teacher_standards):
            lessons_file = "lessons10.json" if is_class10 else "lessons.json"
            lessons_data = load_json_file(lessons_file)
            response_data["subject_lessons"] = (
                lessons_data.get(teacher_info.get("subject"), [])
                if lessons_data
                else []
            )

        response.update(response_data)

    return jsonify(response), 200


@app.route("/api/generate_test", methods=["POST"])
@jwt_required()
def generate_test():
    current_user, _ = get_current_user_info()
    # Verify teacher access (0001-0009)
    teachers_data = load_json_file("teachers.json")
    if not teachers_data or current_user not in teachers_data:
        return jsonify({"message": "Unauthorized access"}), 401

    data = request.get_json()
    subject = data.get("subject")
    lessons = data.get("lessons")
    class10 = data.get("class10", False)  # Allow teacher to specify class

    if not subject or not lessons:
        return jsonify({"message": "Subject and lessons are required"}), 400

    lesson_paths = [
        lesson2filepath(subject, lesson, class10=class10) for lesson in lessons
    ]

    if not lesson_paths:
        return jsonify({"message": "Invalid lessons provided"}), 400

    try:
        questions = generate.generate_exam_questions(subject, lesson_paths, current_user)
        # Format questions without solutions
        formatted_questions = []
        for q in questions:
            formatted_questions.append(
                {
                    "question": q["question"],
                    "options": q["options"],
                    "answer": q["answer"],
                }
            )

        return jsonify(
            {
                "subject": subject,
                "lessons": lessons,
                "questions": formatted_questions,
                "class10": class10,
            }
        ), 200

    except Exception as e:
        print(f"Error generating questions: {e}")
        return jsonify({"message": f"Error generating questions: {str(e)}"}), 500


@app.route("/api/create_test", methods=["POST"])
@jwt_required()
def create_test():
    current_user, _ = get_current_user_info()

    # Verify teacher access
    teachers_data = load_json_file("teachers.json")
    if not teachers_data or current_user not in teachers_data:
        return jsonify({"message": "Unauthorized access"}), 401

    data = request.get_json()
    subject = data.get("subject")
    lessons = data.get("lessons")
    questions = data.get("questions")
    class10 = data.get("class10", False)

    if not all([subject, lessons, questions]):
        return jsonify({"message": "Subject, lessons, and questions are required"}), 400

    # Validate question format
    for q in questions:
        if not all(key in q for key in ["question", "options", "answer"]):
            return jsonify({"message": "Invalid question format"}), 400
        if not all(key in q["options"] for key in ["a", "b", "c", "d"]):
            return jsonify({"message": "Invalid options format"}), 400

    # Shuffle questions
    random.shuffle(questions)

    # Generate test ID using random
    test_id = f"TS-{subject}-{str(random.randint(100,999))}"

    # Create test data
    test_data = {
        "test-id": test_id,
        "subject": subject,
        "standard": 10 if class10 else 9,
        "lessons": lessons,
        "questions": questions,
        "created_by": current_user,
        "created_at": time.strftime("%Y-%m-%dT%H:%M:%SZ"),
        "completed_by": [],
    }

    try:
        # Load and update active_tests.json
        active_tests = load_json_file("active_tests.json") or {"tests": []}
        active_tests["tests"].append(test_data)

        with open(os.path.join(data_path, "active_tests.json"), "w") as f:
            json.dump(active_tests, f, indent=4)

        return jsonify({"test-id": test_id}), 201

    except Exception as e:
        print(f"Error creating test: {e}")
        return jsonify({"message": f"Error creating test: {str(e)}"}), 500


@app.route("/api/user_stats", methods=["GET"])
@jwt_required()
def get_user_stats_route():
    current_user, is_class10 = get_current_user_info()
    stats = get_user_stats(current_user, is_class10)

    if not stats:
        return jsonify(
            [
                {"title": "Total Exams Attempted", "value": 0},
                {"title": "Total Marks Attempted", "value": 0},
                {"title": "Total Marks Gained", "value": 0},
                {"title": "Average Percentage", "value": "0.00%"},
            ]
        ), 200

    formatted_stats = [
        {"title": "Total Exams Attempted", "value": stats.get("attempted", 0)},
        {"title": "Total Marks Attempted", "value": stats.get("questions", 0)},
        {"title": "Total Marks Gained", "value": stats.get("correct", 0)},
        {
            "title": "Average Percentage",
            "value": f"{stats.get('avgpercentage', 0):2.2f}%",
        },
    ]
    return jsonify(formatted_stats), 200


@app.route("/api/overview_stats", methods=["GET"])
@jwt_required()
def get_overview_stats_route():
    current_user, is_class10 = get_current_user_info()
    stats = get_overview_stats(current_user, is_class10)
    if not stats:
        return jsonify(
            {
                "total_exams": 0,
                "total_questions": 0,
                "correct_answers": 0,
                "average_score": 0,
                "subject_stats": {},
                "recent_exams": [],
            }
        ), 200

    return jsonify(stats), 200


@app.route("/api/subject_stats/<subject>", methods=["GET"])
@jwt_required()
def get_subject_stats_route(subject):
    current_user, is_class10 = get_current_user_info()
    stats = get_user_subjects(current_user, subject, is_class10)
    print("\n\nStats:", stats, "\n\n")
    if not stats:
        return jsonify(
            {
                "total_exams": 0,
                "total_questions": 0,
                "correct_answers": 0,
                "average_score": 0,
                "lesson_stats": {},
                "recent_exams": [],
            }
        ), 200

    return jsonify(stats), 200


@app.route("/api/student_stats", methods=["GET"])
@jwt_required()
def get_student_stats():
    current_user, is_class10 = get_current_user_info()

    try:
        stats = get_student_detailed_stats(current_user, is_class10)
        if not stats:
            return jsonify({"message": "No stats found for student"}), 404

        return jsonify(stats), 200
    except Exception as e:
        return jsonify({"message": f"Error fetching student stats: {str(e)}"}), 500


@app.route("/api/division_stats", methods=["GET"])
@jwt_required()
def get_division_stats():
    current_user, is_class10 = get_current_user_info()

    try:
        # Get student info to determine division
        student_data = (
            class10_student_info.get(current_user)
            if is_class10
            else student_info.get(current_user)
        )
        if not student_data:
            return jsonify({"message": "Student not found"}), 404

        division = student_data.get("div")
        if not division:
            return jsonify({"message": "Division not found"}), 404

        # Get division statistics
        students = get_students_by_division(division, is_class10)
        subject_stats = get_subject_stats_by_division(division, is_class10)

        stats = {
            "division": division,
            "total_students": len(students),
            "subject_stats": subject_stats,
            "class": "10" if is_class10 else "9",
        }

        return jsonify(stats), 200
    except Exception as e:
        return jsonify({"message": f"Error fetching division stats: {str(e)}"}), 500


@app.route("/api/standard_stats", methods=["GET"])
@jwt_required()
def get_class_stats():
    _, is_class10 = get_current_user_info()

    try:
        stats = get_standard_stats(is_class10)
        if not stats:
            return jsonify(
                {
                    "total_students": 0,
                    "total_exams": 0,
                    "average_score": 0,
                    "subject_wise_stats": {},
                    "division_wise_stats": {},
                }
            ), 200

        return jsonify(stats), 200
    except Exception as e:
        return jsonify({"message": f"Error fetching standard stats: {str(e)}"}), 500

@app.route("/api/upload_images", methods=["POST"])
@jwt_required()
def upload_images():
    current_user, _ = get_current_user_info()
    
    # Check if any files were uploaded
    files = []
    for key in request.files:
        if key.startswith('image_'):
            files.append(request.files[key])
    
    if not files:
        return jsonify({'message': 'No images provided'}), 400
        
    uploaded_files = []
    
    for file in files:
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            timestamp = int(time.time())
            unique_filename = f"{current_user}_{timestamp}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
            file.save(filepath)
            uploaded_files.append(unique_filename)
    
    if not uploaded_files:
        return jsonify({'message': 'No valid images uploaded'}), 400
        
    return jsonify({
        'message': 'Images uploaded successfully',
        'files': uploaded_files
    }), 200


@app.route("/api/uploads/<filename>")
@jwt_required()
def uploaded_file(filename):
    current_user, _ = get_current_user_info()
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route("/api/download_data", methods=["GET"])
@jwt_required()
def download_data_route():
    current_user, is_class10 = get_current_user_info()

    try:
        data = download_data(current_user, is_class10)
        if not data:
            return jsonify({"message": "No data found"}), 404

        return jsonify(json.loads(dumps(data))), 200
    except Exception as e:
        return jsonify({"message": f"Error downloading data: {str(e)}"}), 500


@app.route("/api/analytics", methods=["GET"])
@jwt_required()
def get_analytics():
    current_user, is_class10 = get_current_user_info()

    try:
        total_students = get_total_students(is_class10)
        total_exams = get_total_exams(is_class10)
        students_by_class = get_total_students_by_class(is_class10)
        exams_by_class = get_total_exams_by_class(is_class10)
        avg_scores = get_average_scores(is_class10)
        avg_percentage = get_average_percentage(is_class10)

        analytics = {
            "total_students": total_students,
            "total_exams": total_exams,
            "students_by_class": students_by_class,
            "exams_by_class": exams_by_class,
            "average_scores": avg_scores,
            "average_percentage": avg_percentage,
            "class": "10" if is_class10 else "9",
        }

        return jsonify(analytics), 200
    except Exception as e:
        return jsonify({"message": f"Error fetching analytics: {str(e)}"}), 500


@app.route("/api/updates", methods=["GET"])
def get_updates():
    return jsonify(UPDATE_LOGS[0]), 200


@app.route("/admin/updates", methods=["POST"])
def add_update():
    data = request.get_json()
    if not all(key in data for key in ["version", "date", "changes"]):
        return jsonify({"message": "Missing required fields"}), 400

    UPDATE_LOGS.insert(0, data)
    return jsonify({"message": "Update added successfully"}), 201


@app.route("/api/leaderboard", methods=["GET"])
@jwt_required()
def get_leaderboard():
    current_user, is_class10 = get_current_user_info()
    class_num = 10 if is_class10 else 9
    current_date = datetime.now()
    month_key = current_date.strftime("%Y-%m")

    # Get current month's leaderboard
    leaderboard_data = data_store[class_num]["collections"][4]["Leaderboard"].get(
        month_key, {}
    )

    # Get all users from the database
    db = db10 if is_class10 else db9
    all_users = list(db['Users'].find())

    # Convert leaderboard data to list
    leaderboard = []
    students_in_leaderboard = set()

    # Add students who have taken exams
    for user_id, user_data in leaderboard_data.items():
        students_in_leaderboard.add(user_id)
        # Check if name exists before splitting
        if isinstance(user_data, dict) and user_data.get("name"):
            name_parts = user_data["name"].split()
            if len(name_parts) >= 2:
                display_name = f"{name_parts[0].upper()} {name_parts[-1].upper()}"
            else:
                display_name = name_parts[0].upper()
        else:
            display_name = "UNKNOWN"

        # Get user's division
        user = next((u for u in all_users if u.get('id') == user_id), None)
        division = user.get('division', 'N/A') if user else 'N/A'

        leaderboard.append(
            {
                "name": display_name,
                "division": division,
                "total_exams": user_data.get("total_exams", 0)
                if isinstance(user_data, dict)
                else 0,
                "average_percentage": round(user_data.get("average_percentage", 0), 2)
                if isinstance(user_data, dict)
                else 0,
                "elo_score": user_data.get("elo_score", 0)
                if isinstance(user_data, dict)
                else 0,
                "has_taken_exam": True
            }
        )

    # Add remaining students with 0 stats
    for user in all_users:
        user_id = user.get('id')
        if user_id not in students_in_leaderboard:
            name_parts = user.get('name', '').split()
            if len(name_parts) >= 2:
                display_name = f"{name_parts[0].upper()} {name_parts[-1].upper()}"
            else:
                display_name = name_parts[0].upper() if name_parts else "UNKNOWN"

            division = user.get('division', 'N/A')

            leaderboard.append(
                {
                    "name": display_name,
                    "division": division,
                    "total_exams": 0,
                    "average_percentage": 0,
                    "elo_score": 0,
                    "has_taken_exam": False
                }
            )

    if not leaderboard:
        return jsonify(
            {"month": current_date.strftime("%B %Y"), "leaderboard": [], "zero": True}
        ), 200

    # Sort by ELO score first, then by average percentage
    leaderboard.sort(
        key=lambda x: (x["elo_score"], x["average_percentage"]),
        reverse=True,
    )

    # Add ranks
    for i, entry in enumerate(leaderboard, 1):
        entry["rank"] = i

    return jsonify(
        {
            "month": current_date.strftime("%B %Y"),
            "leaderboard": leaderboard,
            "zero": False,
            "class": "10" if is_class10 else "9"
        }
    ), 200


@app.route("/api/recalculate_leaderboard", methods=["POST"])
@jwt_required()
def recalculate_leaderboard_route():
    try:
        current_user, is_class10 = get_current_user_info()
        
        # Only allow teachers to recalculate leaderboard
        teachers_data = load_json_file("teachers.json")
        if not teachers_data or current_user not in teachers_data:
            return jsonify({"message": "Unauthorized. Only teachers can recalculate leaderboard."}), 403
            
        # Recalculate leaderboard
        recalculate_current_month_leaderboard(is_class10)
        
        return jsonify({"message": "Leaderboard recalculated successfully"}), 200
    except Exception as e:
        return jsonify({"message": f"Error recalculating leaderboard: {str(e)}"}), 500


# Add cleanup task for uploaded files
def cleanup_old_files():
    """Delete files older than 24 hours"""
    current_time = time.time()
    one_day = 24 * 60 * 60
    
    for filename in os.listdir(app.config['UPLOAD_FOLDER']):
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        # Get file creation time
        file_time = os.path.getctime(filepath)
        if current_time - file_time > one_day:
            try:
                os.remove(filepath)
                print(f"Deleted old file: {filename}")
            except Exception as e:
                print(f"Error deleting file {filename}: {e}")

# Run cleanup every hour
def start_cleanup_scheduler():
    while True:
        cleanup_old_files()
        time.sleep(3600)  # Sleep for 1 hour

# Start cleanup thread when app starts
cleanup_thread = threading.Thread(target=start_cleanup_scheduler, daemon=True)
cleanup_thread.start()


def process_images_job(job_id, image_paths):
    try:
        JOB_STATUS[job_id] = "processing"
        print(f"Processing {len(image_paths)} images...")
        
        try:
            questions = generate.analyze_images(image_paths)
            if questions:
                JOB_RESULTS[job_id] = questions
                JOB_STATUS[job_id] = "completed"
            else:
                JOB_STATUS[job_id] = "failed"
                JOB_RESULTS[job_id] = "No questions could be extracted from the images"
                
        except Exception as e:
            print(f"Error processing images: {str(e)}")
            JOB_STATUS[job_id] = "failed"
            JOB_RESULTS[job_id] = str(e)
            
    except Exception as e:
        print(f"Error in job {job_id}: {str(e)}")
        JOB_STATUS[job_id] = "failed"
        JOB_RESULTS[job_id] = str(e)

def job_processor():
    while True:
        try:
            job_id, image_paths = JOB_QUEUE.get()
            process_images_job(job_id, image_paths)
        except Exception as e:
            print(f"Error in job processor: {str(e)}")
        finally:
            JOB_QUEUE.task_done()

# Start the job processor thread
job_thread = threading.Thread(target=job_processor, daemon=True)
job_thread.start()

# Replace the generate_from_images route
@app.route("/api/generate_from_images", methods=["POST"])
@jwt_required()
def generate_from_images():
    current_user, _ = get_current_user_info()
    data = request.get_json()
    filenames = data.get('filenames', [])
    
    if not filenames:
        return jsonify({'message': 'No images provided'}), 400
        
    try:
        # Get full paths of the images
        image_paths = [os.path.join(app.config['UPLOAD_FOLDER'], filename) for filename in filenames]
        
        # Check if all files exist
        missing_files = []
        for path in image_paths:
            if not os.path.exists(path):
                missing_files.append(os.path.basename(path))
        
        if missing_files:
            return jsonify({
                'message': f'Some images were not found: {", ".join(missing_files)}'
            }), 404
            
        # Generate a unique job ID
        job_id = str(uuid.uuid4())
        
        # Add job to queue
        JOB_QUEUE.put((job_id, image_paths))
        
        return jsonify({
            'message': 'Image processing started',
            'job_id': job_id
        }), 202
            
    except Exception as e:
        print(f"Error in generate_from_images: {str(e)}")
        return jsonify({
            'message': f'Error processing images: {str(e)}'
        }), 500

@app.route("/api/check_job_status/<job_id>", methods=["GET"])
@jwt_required()
def check_job_status(job_id):
    status = JOB_STATUS.get(job_id)
    
    if status is None:
        return jsonify({
            'status': 'not_found',
            'message': 'Job not found'
        }), 404
        
    if status == "completed":
        questions = JOB_RESULTS.get(job_id)
        # Clean up after sending results
        del JOB_STATUS[job_id]
        del JOB_RESULTS[job_id]
        
        # Debug print
        print(f"Questions being returned: {questions}")
        
        # Ensure questions is an array
        if not isinstance(questions, list):
            print(f"Questions is not a list, type: {type(questions)}")
            return jsonify({
                'status': 'failed',
                'message': 'No questions could be extracted from the images'
            }), 400
            
        if not questions:  # Empty list
            print("Questions list is empty")
            return jsonify({
                'status': 'failed',
                'message': 'No questions could be extracted from the images'
            }), 400
            
        return jsonify({
            'status': status,
            'questions': questions
        }), 200
        
    if status == "failed":
        error = JOB_RESULTS.get(job_id)
        # Clean up after sending error
        del JOB_STATUS[job_id]
        del JOB_RESULTS[job_id]
        return jsonify({
            'status': status,
            'message': error or 'Failed to process images'
        }), 400
        
    return jsonify({
        'status': status,
        'message': 'Job is still processing'
    }), 200

# Add cleanup for old jobs
def cleanup_old_jobs():
    """Clean up jobs older than 1 hour"""
    while True:
        time.sleep(3600)  # Run every hour
        try:
            current_time = time.time()
            for job_id in list(JOB_STATUS.keys()):
                if current_time - JOB_STATUS[job_id].get('start_time', 0) > 3600:
                    JOB_STATUS.pop(job_id, None)
                    JOB_RESULTS.pop(job_id, None)
        except Exception as e:
            print(f"Error in job cleanup: {str(e)}")

# Start cleanup thread
cleanup_thread = threading.Thread(target=cleanup_old_jobs, daemon=True)
cleanup_thread.start()

if __name__ == "__main__":
    app.run(
        debug=os.getenv('FLASK_DEBUG', 'False').lower() == 'true',
        host=os.getenv('FLASK_HOST', '0.0.0.0'),
        port=int(os.getenv('FLASK_PORT', 9027))
    )


--------------------------------------------------------------------------------
File: backend\setup.py
--------------------------------------------------------------------------------

import os
import json
import subprocess
import sys

def install_requirements():
    """Install required packages from requirements.txt"""
    try:
        print("Installing required packages...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("✅ Packages installed successfully")
    except subprocess.CalledProcessError as e:
        print(f"❌ Error installing packages: {e}")
        sys.exit(1)

def create_json_files():
    """Create necessary JSON files with empty structures in data directory"""
    json_files = {
        'students.json': [],
        'active_tests.json': {'tests': []},
        'class10_students.json': [],
        'teachers.json': {}
    }
    
    data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')
    
    # Create data directory if it doesn't exist
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print("✅ Created data directory")
    
    print("\nCreating JSON files...")
    for filename, initial_data in json_files.items():
        file_path = os.path.join(data_dir, filename)
        try:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(initial_data, f, indent=4)
                print(f"✅ Created {filename}")
            else:
                print(f"ℹ️ {filename} already exists, skipping")
        except Exception as e:
            print(f"❌ Error creating {filename}: {e}")

def create_directories():
    """Create necessary directories"""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    directories = [
        os.path.join(base_dir, 'data', 'reports'),
        os.path.join(base_dir, 'pdfs'),
        os.path.join(base_dir, 'uploads')
    ]
    
    print("\nCreating directories...")
    for directory in directories:
        try:
            if not os.path.exists(directory):
                os.makedirs(directory)
                print(f"✅ Created directory: {directory}")
            else:
                print(f"ℹ️ Directory {directory} already exists, skipping")
        except Exception as e:
            print(f"❌ Error creating directory {directory}: {e}")

def main():
    # Get the script's directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Change to the script's directory
    os.chdir(script_dir)
    
    print("Starting setup process...\n")
    
    # Install requirements
    install_requirements()
    
    # Create necessary files and directories
    create_json_files()
    create_directories()
    
    print("\n✨ Setup completed successfully!")
    print("\n Now you can start backend server by running: `npm run start-backend`!")

if __name__ == "__main__":
    main() 

--------------------------------------------------------------------------------
File: backend\processing\convert_files.py
--------------------------------------------------------------------------------

import json
import os

def convert_file_to_utf8(file_path):
    try:
        # Try reading with different encodings
        encodings = ['utf-8', 'latin-1', 'cp1252']
        content = None
        
        for encoding in encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    content = json.load(f)
                break
            except UnicodeDecodeError:
                continue
            except json.JSONDecodeError:
                continue
                
        if content is None:
            print(f"Could not read file {file_path} with any encoding")
            return
            
        # Write back in UTF-8
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(content, f, ensure_ascii=False, indent=2)
            
        print(f"Successfully converted {file_path} to UTF-8")
        
    except Exception as e:
        print(f"Error converting {file_path}: {e}")

def convert_all_lesson_files():
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    data_dir = os.path.join(base_dir, "data")
    
    # Convert lessons.json and lessons10.json
    for file in ['lessons.json', 'lessons10.json']:
        file_path = os.path.join(data_dir, file)
        if os.path.exists(file_path):
            convert_file_to_utf8(file_path)
    
    # Convert individual lesson files
    for folder in ['lessons', 'lessons10']:
        lesson_dir = os.path.join(data_dir, folder)
        if os.path.exists(lesson_dir):
            for subject in os.listdir(lesson_dir):
                subject_dir = os.path.join(lesson_dir, subject)
                if os.path.isdir(subject_dir):
                    for file in os.listdir(subject_dir):
                        if file.endswith('.json'):
                            file_path = os.path.join(subject_dir, file)
                            convert_file_to_utf8(file_path)

if __name__ == '__main__':
    convert_all_lesson_files() 

--------------------------------------------------------------------------------
File: backend\processing\pdf_to_questions.py
--------------------------------------------------------------------------------

import os
import json
import base64
import google.generativeai as genai
from openai import OpenAI
import logging
import traceback
from dotenv import load_dotenv
import time
import random
import sys

# Get the script's directory
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Configure logging with detailed format including tracebacks
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # Console handler
        logging.FileHandler(os.path.join(SCRIPT_DIR, 'app.log'))  # File handler
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Configure API clients
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY is required")

# Configure Gemini
genai.configure(
    api_key=GOOGLE_API_KEY,
    transport="rest"  # Use REST transport for better stability with large requests
)

# Initialize model with default settings
DEFAULT_GENERATION_CONFIG = {
    "temperature": 0.7,
    "candidate_count": 1,
    "max_output_tokens": 8192
}

DEFAULT_REQUEST_OPTIONS = {
    "timeout": 300,  # 5 minutes timeout
    "retry_strategy": "adaptive"
}

CEREBRAS_API_KEY = os.getenv('CEREBRAS_API_KEY')
CEREBRAS_BASE_URL = os.getenv('CEREBRAS_BASE_URL')
if not CEREBRAS_API_KEY or not CEREBRAS_BASE_URL:
    raise ValueError("CEREBRAS_API_KEY and CEREBRAS_BASE_URL are required")

# Initialize Cerebras client
cerebras_client = OpenAI(
    base_url=CEREBRAS_BASE_URL,
    api_key=CEREBRAS_API_KEY,
)

# Initialize Groq client only if credentials are provided
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
GROQ_BASE_URL = os.getenv('GROQ_BASE_URL')
groq_client = None
if GROQ_API_KEY and GROQ_BASE_URL:
    groq_client = OpenAI(
        base_url=GROQ_BASE_URL,
        api_key=GROQ_API_KEY
    )
    logger.info("Groq client initialized successfully")
else:
    logger.info("Groq client not initialized (optional)")

# Special instructions for specific lessons
LESSON_SPECIAL_INSTRUCTIONS = {
    "ss/e.1": "Do not give any attention to Notes for the teacher page",
    "ss/e.2": "Do not give any attention to Notes for the teacher page",
    "ss/e.3": "Do not give any attention to Notes for the teacher page",
    "ss/e.4": "Do not give any attention to Notes for the teacher page. Only include questions to the topics: 'What is Globalization?', 'Factors that have enabled Globalisation'. Do not include questions from any other topic!"
    # Add more special messages for other lessons as needed
}

def load_lessons_data(class10=False):
    """Load lessons data from the appropriate JSON file"""
    try:
        filename = "lessons10.json" if class10 else "lessons.json"
        file_path = os.path.join(SCRIPT_DIR, "data", filename)
        with open(file_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading lessons data: {str(e)}\n{traceback.format_exc()}")
        return None

def lesson2filepath(subject, lesson, class10=False):
    subject_lower = subject.lower()
    # Add class10 folder prefix if needed
    base_folder = "lessons10" if class10 else "lessons"

    if subject == "SS":
        # For SS, lesson format is like "C: Lesson-1" or "E: Lesson-1"
        prefix, lesson_num = lesson.split(":")  # Split into prefix (C/E/G/H) and lesson number
        lesson_num = lesson_num.strip().split("-")[1]  # Get the number after "Lesson-"
        prefix_lower = prefix.lower().strip()
        return os.path.join(
            SCRIPT_DIR,
            base_folder,
            subject_lower,
            f"{prefix_lower}.{lesson_num}.json"
        )
    elif subject == "Science":
        lesson_number = lesson.split()[-1]
        return os.path.join(
            SCRIPT_DIR, base_folder, subject_lower, f"lesson-{lesson_number}.json"
        )
    elif subject == "Math":
        lesson_number = lesson.split()[-1]
        return os.path.join(
            SCRIPT_DIR, base_folder, subject_lower, f"lesson{lesson_number}.json"
        )
    else:
        lesson_number = lesson.split()[-1]
        return os.path.join(
            SCRIPT_DIR, base_folder, subject_lower, f"lesson{lesson_number}.json"
        )

def is_lesson_processed(subject, lesson_name, class_num):
    """Check if a lesson is already processed based on subject-specific formats"""
    lessons_data = load_lessons_data(class_num == 10)
    if not lessons_data or subject not in lessons_data:
        return False

    # Get lesson name without extension
    base_name = os.path.splitext(os.path.basename(lesson_name))[0]
    
    # Different formats for different subjects
    if subject.lower() == "ss":
        # Extract prefix (e/c/g/h) and number from filename (e.g., "e.1.pdf" -> "E: Lesson-1")
        try:
            prefix, number = base_name.split(".")
            formatted_name = f"{prefix.upper()}: Lesson-{number}"
            if formatted_name not in lessons_data[subject]:
                return False
        except ValueError:
            logger.error(f"Invalid SS lesson filename format: {lesson_name}")
            return False
    else:
        # Math and Science format: "Lesson X"
        formatted_name = f"Lesson {base_name}"
        if formatted_name not in lessons_data[subject]:
            return False
            
    # Check if the corresponding question file exists
    question_file = lesson2filepath(subject, formatted_name, class_num == 10)
    return os.path.exists(question_file)

def get_subject_prompt(subject, class_num):
    """Get the appropriate prompt based on subject and class"""
    if subject.lower() == "math":
        return f"""Generate challenging questions for CBSE NCERT Class {class_num} Math based on the given lesson. Create exactly 50 questions covering:
1. Knowledge-based direct questions (15 questions)
2. Problem-solving questions (15 questions)
3. Application-based questions (10 questions)
4. Critical thinking questions (10 questions)

Make options confusing and avoid using questions directly from the textbook.
Include such type of questions that are asked in board exams or have come recently in previous year board examinations.
After writing each question, write its answer too.

IMPORTANT RULES:
- NO diagrams or visual references allowed
- ALL questions MUST be MCQ type with EXACTLY 4 options
- NO sub-questions allowed
- Make options challenging and confusing
- Distribute answers evenly across A, B, C, and D
- Questions should be solvable without diagrams
- Include step-by-step solutions where appropriate

Start generating questions immediately without any introductory text."""

    elif subject.lower() == "science":
        return f"""Create challenging questions for CBSE NCERT Class {class_num} Science based on the given lesson. Generate exactly 50 questions including:
1. Knowledge-based MCQs (15 questions)
2. Problem-solving questions (15 questions)
3. Application-based questions (10 questions)
4. Critical thinking questions (10 questions)

IMPORTANT RULES:
- ALL questions MUST be MCQ type with EXACTLY 4 options
- NO diagrams or visual references allowed
- NO sub-questions allowed
- Make options challenging and confusing
- Distribute answers evenly across A, B, C, and D
- Questions should be solvable without diagrams
- Include step-by-step solutions where appropriate
- Focus on board exam style questions
- Include numerical problems for physics topics

Start generating questions immediately without any introductory text."""

    else:  # Social Studies
        return f"""Create challenging questions for CBSE NCERT Class {class_num} Social Studies based on the given lesson. Generate exactly 50 questions including:
1. Knowledge-based MCQs (15 questions)
2. Case-based questions with paragraphs (15 questions, one question per paragraph)
3. Application-based questions (10 questions)
4. Critical thinking questions (10 questions)

IMPORTANT RULES:
- ALL questions MUST be MCQ type with EXACTLY 4 options
- NO diagrams or visual references allowed
- NO sub-questions allowed
- Make options challenging and confusing
- Distribute answers evenly across A, B, C, and D
- For case-based questions, include a short paragraph followed by ONE question only
- Focus on board exam style questions
- Include analytical and interpretative questions
- You MUST include answer for each and every question.
Start generating questions immediately without any introductory text."""

def get_lesson_key(subject, lesson_name):
    """Generate the key for looking up special instructions"""
    subject_lower = subject.lower()
    # Remove file extension if present
    lesson_base = os.path.splitext(lesson_name)[0]
    return f"{subject_lower}/{lesson_base}"

def try_alternate_model(current_model, system_prompt, prompt, cerebras_client, groq_client):
    """Helper function to try alternate models in sequence"""
    # Build list of available models
    models = ['cerebras', 'gemini']
    if groq_client:
        models.append('groq')
        
    # Remove current model from list and shuffle the remaining
    models.remove(current_model)
    random.shuffle(models)
    
    for model in models:
        try:
            if model == 'cerebras':
                response = cerebras_client.chat.completions.create(
                    model="llama-3.3-70b",
                    messages=[
                        {"role": "system", "content": system_prompt} if system_prompt else {"role": "system", "content": "You are a precise JSON formatter."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.1,
                    response_format={"type": "json_object"}
                )
                return 'cerebras', response.choices[0].message.content
            elif model == 'groq' and groq_client:
                response = groq_client.chat.completions.create(
                    model="llama-3.3-70b-versatile",
                    messages=[
                        {"role": "system", "content": system_prompt} if system_prompt else {"role": "system", "content": "You are a precise JSON formatter."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.1,
                    response_format={"type": "json_object"}
                )
                return 'groq', response.choices[0].message.content
            else:  # gemini
                model = genai.GenerativeModel('gemini-exp-1206')
                response = model.generate_content(
                    [system_prompt, prompt] if system_prompt else prompt,
                    generation_config={"temperature": 0.1},
                    request_options={"timeout": 300}
                )
                return 'gemini', response.text
        except Exception as e:
            logger.error(f"{model} model failed: {str(e)}")
            continue
    return None, None

def validate_questions_format(questions_str, cerebras_client):
    """Validate questions format and distribution using available models"""
    system_prompt = """
    You are a format validator. Check both FORMAT and QUESTION TYPE DISTRIBUTION requirements:

    Format requirements:
    1. Each question must have exactly 4 options (a, b, c, d) ((A), (B), (C), (D) is also fine)
    2. Each question must have an answer field with value a, b, c, or d ((A), (B), (C), (D) is also fine) 
    3. Each question must be a single question (no sub-questions)
    4. No diagrams or visual references

    DO NOT:
    - Judge if answers are correct
    - Evaluate question quality
    - Suggest content improvements
    - Check if options make sense

    Here are examples of valid and invalid formats:

    Valid format example:
    Q1. What is the capital of France?
    a) London
    b) Berlin
    c) Paris
    d) Madrid
    Answer: c

    Q1. The rise of nationalism in India during the early 20th century was closely linked to economic policies of the British. The drain of wealth from India to Britain through heavy taxation, unfair trade practices, and exploitation of raw materials led to widespread poverty. This economic exploitation helped unite Indians across religious and regional differences as they realized the need to achieve independence. The swadeshi movement, which promoted the use of Indian-made goods, became a powerful expression of economic nationalism.
    a) The British taxation system helped India's economic growth
    b) Economic exploitation by the British strengthened the nationalist movement
    c) The swadeshi movement promoted the use of British goods
    d) Nationalism in India was unrelated to economic factors
    Answer: b


    Invalid format examples:

    Missing option:
    Q1. What is the capital of France?
    a) London
    b) Berlin
    c) Paris
    Answer: c

    Invalid answer format:
    Q1. What is the capital of France?
    a) London
    b) Berlin
    c) Paris
    d) Madrid
    Answer: Paris

    Contains sub-questions:
    Q1. Consider the following:
    i) What is the capital of France?
    ii) What is the capital of Germany?
    a) Paris, Berlin
    b) London, Paris
    c) Berlin, Madrid
    d) Madrid, London
    Answer: a

    Contains diagram reference:
    Q1. In the diagram above, what is the value of angle x?
    a) 30°
    b) 45°
    c) 60°
    d) 90°
    Answer: b

    Does not contain answer:
    Q1. What is the capital of France?
    a) London
    b) Berlin
    c) Paris
    d) Madrid

    Question distribution requirements:
    1. Knowledge-based direct questions: 15 questions
    2. Problem-solving questions (or case-based questions): 15 questions 
    3. Application-based questions: 10 questions
    4. Critical thinking questions : 10 questions
    Total required: 50 questions

    Identify both format issues and distribution issues in your response.
    """

    prompt = f"""Analyze these questions and provide a JSON response with format and distribution issues:
{{
    "total_questions": number,
    "format_issues": [
        {{
            "question_number": number,
            "issue": "format/structure issues like: missing options, invalid answer format, contains sub-questions, etc.",
            "needs_rewrite": boolean
        }}
    ],
    "distribution": {{
        "knowledge_based": number,
        "problem_solving": number,
        "application_based": number,
        "critical_thinking": number
    }},
    "distribution_issues": [
        {{
            "type": "question type (e.g., knowledge_based)",
            "current": number,
            "required": number,
            "missing": number
        }}
    ],
    "is_valid": boolean (true if no format or distribution issues found)
}}

Questions to analyze:
{questions_str}"""

    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            # Build list of available models for first attempt
            available_models = ['cerebras', 'gemini']
            if groq_client:
                available_models.append('groq')
                
            # Randomly choose from available models
            model_choice = random.choice(available_models)
            logger.info(f"First attempt using {model_choice} for validation")
            
            try:
                if model_choice == 'cerebras':
                    response = cerebras_client.chat.completions.create(
                        model="llama-3.3-70b",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        response_format={"type": "json_object"}
                    )
                    content = response.choices[0].message.content
                elif model_choice == 'groq' and groq_client:
                    response = groq_client.chat.completions.create(
                        model="llama-3.3-70b-versatile",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        response_format={"type": "json_object"}
                    )
                    content = response.choices[0].message.content
                else:  # gemini
                    model = genai.GenerativeModel('gemini-exp-1206')
                    response = model.generate_content(
                        [system_prompt, prompt],
                        generation_config={"temperature": 0.1},
                        request_options={"timeout": 300}
                    )
                    content = response.text
                
                # Clean up the response
                content = content.replace("```json", "").replace("```", "").strip()
                
                try:
                    return json.loads(content)
                except json.JSONDecodeError as je:
                    logger.error(f"JSON decode error with {model_choice}: {str(je)}")
                    logger.error(f"Raw response content that caused error:\n{content}")
                    raise  # Re-raise to trigger alternate model attempt
                    
            except Exception as e:
                logger.error(f"First model failed, trying alternate models after delay: {str(e)}")
                time.sleep(60)  # Wait 1 minute before trying alternate models
                
                # Try alternate models
                model_used, content = try_alternate_model(model_choice, system_prompt, prompt, cerebras_client, groq_client)
                if model_used and content:
                    # Clean up and parse the response
                    content = content.replace("```json", "").replace("```", "").strip()
                    return json.loads(content)
                else:
                    logger.error("All models failed for validation")
                    retry_count += 1
                    if retry_count == max_retries:
                        return None
                    logger.info(f"Retrying attempt {retry_count} of {max_retries}")
                    time.sleep(60)  # Wait another minute before next attempt
                    continue
                
        except Exception as e:
            logger.error(f"Error in validation loop: {str(e)}")
            retry_count += 1
            if retry_count == max_retries:
                return None
            logger.info(f"Retrying attempt {retry_count} of {max_retries}")
            time.sleep(60)
            continue

def format_questions_as_json(questions_str, cerebras_client):
    """Format questions into JSON using available models"""
    example_format = """[
    {
        "question": "What is the value of x in the equation 2x + 5 = 15?",
        "options": {
            "a": "5",
            "b": "10",
            "c": "15",
            "d": "20"
        },
        "answer": "a"
    }
]"""

    prompt = f"""Format these questions into JSON following this exact format:
{example_format}

Questions to format:
{questions_str}"""

    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            # Build list of available models for first attempt
            available_models = ['cerebras', 'gemini']
            if groq_client:
                available_models.append('groq')
                
            # Randomly choose from available models
            model_choice = random.choice(available_models)
            logger.info(f"First attempt using {model_choice} for formatting")
            
            try:
                if model_choice == 'cerebras':
                    response = cerebras_client.chat.completions.create(
                        model="llama-3.1-70b",
                        messages=[
                            {"role": "system", "content": "You are a precise JSON formatter."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        response_format={"type": "json_object"}
                    )
                    content = response.choices[0].message.content
                elif model_choice == 'groq' and groq_client:
                    response = groq_client.chat.completions.create(
                        model="llama-3.3-70b-versatile",
                        messages=[
                            {"role": "system", "content": "You are a precise JSON formatter."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        response_format={"type": "json_object"}
                    )
                    content = response.choices[0].message.content
                else:  # gemini
                    model = genai.GenerativeModel('gemini-exp-1206')
                    response = model.generate_content(
                        prompt,
                        generation_config={"temperature": 0.1},
                        request_options={"timeout": 300}
                    )
                    content = response.text
                
                # Clean up the response
                content = content.replace("```json", "").replace("```", "").strip()
                
                try:
                    return json.loads(content)
                except json.JSONDecodeError as je:
                    logger.error(f"JSON decode error with {model_choice}: {str(je)}")
                    logger.error(f"Raw response content that caused error:\n{content}")
                    raise  # Re-raise to trigger alternate model attempt
                    
            except Exception as e:
                logger.error(f"First model failed, trying alternate models after delay: {str(e)}")
                time.sleep(60)  # Wait 1 minute before trying alternate models
                
                # Try alternate models
                model_used, content = try_alternate_model(model_choice, None, prompt, cerebras_client, groq_client)
                if model_used and content:
                    # Clean up and parse the response
                    content = content.replace("```json", "").replace("```", "").strip()
                    return json.loads(content)
                else:
                    logger.error("All models failed for formatting")
                    retry_count += 1
                    if retry_count == max_retries:
                        return None
                    logger.info(f"Retrying attempt {retry_count} of {max_retries}")
                    time.sleep(60)  # Wait another minute before next attempt
                    continue
                
        except Exception as e:
            logger.error(f"Error in formatting loop: {str(e)}")
            retry_count += 1
            if retry_count == max_retries:
                return None
            logger.info(f"Retrying attempt {retry_count} of {max_retries}")
            time.sleep(60)
            continue

def verify_with_cerebras(question, options, answer):
    """Verify a question using Cerebras LLaMA model"""
    prompt = f"""Solve this question and verify if the given answer is correct:

Question: {question}
Options:
A) {options['a']}
B) {options['b']}
C) {options['c']}
D) {options['d']}

Respond in this exact JSON format:
{{
    "solution": "detailed step-by-step solution",
    "answer": "correct answer letter (a/b/c/d)",
}}"""

    response = cerebras_client.chat.completions.create(
        model="llama-3.3-70b",
        messages=[
            {"role": "system", "content": "You are a precise question solver and verifier."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.2,
        response_format={"type": "json_object"}
    )
    
    response_content = response.choices[0].message.content
    response_content = response_content.replace("```json", "").replace("```", "").strip()
    logger.info(f"Cerebras verification response:\n{response_content}")
    
    return json.loads(response_content)

def verify_with_gemini(question, options, answer):
    """Verify a question using Google's Gemini model"""
    # Randomly choose between Gemini 1.5 Flash and 2.0 Flash
    model_name = random.choice(['gemini-1.5-flash', 'gemini-2.0-flash-exp'])
    model = genai.GenerativeModel(model_name)
    
    prompt = f"""Solve this question and verify if the given answer is correct:

Question: {question}
Options:
A) {options['a']}
B) {options['b']}
C) {options['c']}
D) {options['d']}

Respond in this exact JSON format:
{{
    "solution": "detailed step-by-step solution",
    "answer": "correct answer letter (a/b/c/d)",
}}"""

    response = model.generate_content(
        prompt,
        generation_config={"temperature": 0.2, "response_mime_type": "application/json"}
    )
    
    logger.info(f"Gemini ({model_name}) verification response:\n{response.text}")
    return json.loads(response.text)

def verify_with_groq(question, options, answer):
    """Verify a question using Groq's LLaMA model"""
    if not groq_client:
        raise ValueError("Groq client not initialized")
        
    prompt = f"""Solve this question and verify if the given answer is correct:

Question: {question}
Options:
A) {options['a']}
B) {options['b']}
C) {options['c']}
D) {options['d']}

Respond in this exact JSON format:
{{
    "solution": "detailed step-by-step solution",
    "answer": "correct answer letter (a/b/c/d)",
}}"""

    response = groq_client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=[
            {"role": "system", "content": "You are a precise question solver and verifier."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.2,
        response_format={"type": "json_object"}
    )
    
    response_content = response.choices[0].message.content
    response_content = response_content.replace("```json", "").replace("```", "").strip()
    logger.info(f"Groq verification response:\n{response_content}")
    
    return json.loads(response_content)

def request_additional_questions(pdf_data, missing_types, subject, class_num, previous_questions):
    """Request additional questions for missing types"""
    model = genai.GenerativeModel('gemini-exp-1206')
    
    # Create prompt for specific missing question types
    prompt = f"""Based on the PDF content and existing questions, generate additional questions.

Current questions for reference:
{previous_questions}

Required additional questions:
"""
    for qtype, count in missing_types.items():
        if count > 0:
            prompt += f"- {count} more {qtype.replace('_', ' ')} questions\n"
    
    prompt += """
Important:
1. Do not duplicate or rephrase existing questions
2. Maintain same level of difficulty and style as existing questions
3. Follow the same format as existing questions
4. Questions should be unique and test different concepts
5. Ensure new questions complement existing ones"""
    
    try:
        response = model.generate_content(
            [
                {'mime_type': 'application/pdf', 'data': pdf_data},
                prompt
            ],
            generation_config=DEFAULT_GENERATION_CONFIG,
            request_options={"timeout": 900}
        )
        
        additional_questions = ""
        for chunk in response:
            if chunk.text:
                additional_questions += chunk.text
        
        return additional_questions
    except Exception as e:
        logger.error(f"Error generating additional questions: {str(e)}")
        return None

def update_lessons_json(subject, lesson_name, class_num):
    """
    Update the appropriate lessons.json file with a new lesson.
    
    Args:
        subject (str): Subject name (Math, Science, or SS)
        lesson_name (str): Name of the lesson
        class_num (int): Class number (9 or 10)
    """
    try:
        # Determine which lessons file to update
        filename = "lessons10.json" if class_num == 10 else "lessons.json"
        file_path = os.path.join(SCRIPT_DIR, "data", filename)
        
        # Load current lessons data
        with open(file_path, 'r') as f:
            lessons_data = json.load(f)
            
        # Format lesson name based on subject
        if subject == "Science":
            lesson_number = lesson_name.split('-')[-1]
            formatted_name = f"Lesson {lesson_number}"
        elif subject == "Math":
            lesson_number = lesson_name.split('lesson')[-1]
            formatted_name = f"Lesson {lesson_number}"
        elif subject == "SS":
            # For SS files, lesson_name should be in format "prefix.number"
            prefix, number = lesson_name.split('.')
            formatted_name = f"{prefix.upper()}: Lesson-{number}"
        else:
            lesson_number = lesson_name.split('lesson')[-1]
            formatted_name = f"Lesson {lesson_number}"
            
        # Add lesson if not already present
        if subject not in lessons_data:
            lessons_data[subject] = []
            
        if formatted_name not in lessons_data[subject]:
            lessons_data[subject].append(formatted_name)
            # Sort lessons
            if subject == "SS":
                # Sort SS lessons by prefix and then number
                lessons_data[subject].sort(key=lambda x: (x.split(':')[0], int(x.split('-')[1])))
            else:
                # Sort other subjects by lesson number
                lessons_data[subject].sort(key=lambda x: int(x.split()[-1]))
            
            # Save updated data
            with open(file_path, 'w') as f:
                json.dump(lessons_data, f, indent=2)
                
            logger.info(f"Added {formatted_name} to {subject} in {filename}")
            
    except Exception as e:
        logger.error(f"Error updating lessons JSON: {str(e)}\n{traceback.format_exc()}")

def process_pdf(pdf_path, subject, class_num):
    """Process a PDF file and generate questions"""
    # Check if lesson is already processed
    lesson_name = os.path.splitext(os.path.basename(pdf_path))[0]
    if is_lesson_processed(subject, lesson_name, class_num):
        logger.info(f"Lesson {lesson_name} already processed for {subject} Class {class_num}")
        return None

    try:
        # Read and encode the PDF file
        with open(pdf_path, "rb") as pdf_file:
            pdf_data = base64.standard_b64encode(pdf_file.read()).decode("utf-8")
        
        logger.info(f"Successfully encoded file {lesson_name}")

        # Initialize Gemini model
        retry_count = 0
        max_retries = 3
        while retry_count < max_retries:
            try:
                model = genai.GenerativeModel('gemini-exp-1206')
                base_prompt = get_subject_prompt(subject, class_num)
                
                # Create content list with PDF and base prompt
                content_list = [
                    {'mime_type': 'application/pdf', 'data': pdf_data},
                    base_prompt
                ]
                
                # Add special instructions if they exist
                lesson_key = get_lesson_key(subject, lesson_name)
                if lesson_key in LESSON_SPECIAL_INSTRUCTIONS:
                    logger.info(f"Adding special instructions for {lesson_key}")
                    content_list.append(LESSON_SPECIAL_INSTRUCTIONS[lesson_key])

                # Generate questions with streaming
                response = model.generate_content(
                    content_list,
                    generation_config=DEFAULT_GENERATION_CONFIG,
                    request_options={"timeout": 900}
                )
                break
            except Exception as e:
                logger.error(f"Error generating questions: {e}")
                retry_count += 1
                if retry_count == max_retries:
                    return None
                logger.info(f"Retrying attempt {retry_count} of {max_retries}")
                time.sleep(60)
                continue

        # Collect streamed response
        questions_str = ""
        try:
            for chunk in response:
                if chunk.text:
                    questions_str += chunk.text
            
            # Validate questions format and distribution
            validation = validate_questions_format(questions_str, cerebras_client)
            if validation is None:
                logger.error("Question validation failed. Check previous logs for details.")
                return None
            
            logger.info(f"Initial validation result:\n{json.dumps(validation, indent=2)}")
            
            # Request additional questions if needed based on distribution issues
            if not validation['is_valid']:
                distribution_fixes_needed = validation.get('distribution_issues', [])
                if distribution_fixes_needed:
                    logger.info("Requesting additional questions for missing types")
                    missing_types = {
                        issue['type']: issue['missing']
                        for issue in distribution_fixes_needed
                    }
                    additional_questions = request_additional_questions(
                        pdf_data,
                        missing_types,
                        subject,
                        class_num,
                        questions_str
                    )
                    
                    if additional_questions:
                        questions_str += "\n" + additional_questions
                        # Revalidate after adding questions
                        validation = validate_questions_format(questions_str, cerebras_client)
                        logger.info(f"Validation after adding questions:\n{json.dumps(validation, indent=2)}")
            
            # Log the complete generated questions for debugging
            logger.info(f"Generated questions from PDF:\n{questions_str}")
            
        except Exception as e:
            logger.error(f"Error during streaming: {e}")
            if questions_str:
                logger.info(f"Partial results before error:\n{questions_str}")
                logger.info("Proceeding with partial results")
            else:
                raise  # Re-raise if we got no content at all

        # Handle any remaining format issues
        if not validation['is_valid']:
            format_fixes_needed = [issue for issue in validation['format_issues'] if issue['needs_rewrite']]
            if format_fixes_needed:
                fix_prompt = "Please fix the following format issues in these questions:\n"
                for fix in format_fixes_needed:
                    fix_prompt += f"- Question {fix['question_number']}: {fix['issue']}\n"
                
                # Generate fixes with streaming
                max_retries = 3
                retry_count = 0
                while retry_count < max_retries:
                    try:
                        response = model.generate_content(
                            [
                                {'mime_type': 'application/pdf', 'data': pdf_data},
                                fix_prompt
                            ],
                            generation_config=DEFAULT_GENERATION_CONFIG,
                            request_options={"timeout": 900}
                        )
                        break
                    except Exception as e:
                        logger.error(f"Error generating fixes: {e}")
                        retry_count += 1
                        if retry_count == max_retries:
                            return None
                        logger.info(f"Retrying attempt {retry_count} of {max_retries}")
                        time.sleep(60)
                        continue
                
                fixed_questions = ""
                for chunk in response:
                    if chunk.text:
                        fixed_questions += chunk.text
                
                # Use fixed questions
                questions_str = fixed_questions
                
                # Final validation
                validation = validate_questions_format(questions_str, cerebras_client)
                if validation is None or not validation['is_valid']:
                    logger.error("Questions still invalid after fixes. Check logs for details.")
                    if validation:
                        logger.error(f"Final validation result:\n{json.dumps(validation, indent=2)}")
                    return None
                
                logger.info(f"Fixed questions:\n{questions_str}")
                logger.info(f"Final distribution:\n{json.dumps(validation['distribution'], indent=2)}")

        # Format questions as JSON
        questions_json = format_questions_as_json(questions_str, cerebras_client)
        if questions_json is None:
            logger.error("Question formatting failed. Check previous logs for details.")
            return None

        # Verify answers using randomly selected model
        incorrect_questions = []
        for i, question in enumerate(questions_json):
            max_retries = 3
            retry_delay = 60  # 1 minute in seconds
            
            for attempt in range(max_retries):
                try:
                    # Randomly choose between all three models
                    model_choice = random.choice(['cerebras', 'gemini', 'groq'])
                    logger.info(f"First attempt using {model_choice} for question {i+1}")
                    
                    try:
                        if model_choice == 'cerebras':
                            result = verify_with_cerebras(
                                question['question'],
                                question['options'],
                                question['answer']
                            )
                        elif model_choice == 'groq' and groq_client:
                            result = verify_with_groq(
                                question['question'],
                                question['options'],
                                question['answer']
                            )
                        else:  # gemini
                            result = verify_with_gemini(
                                question['question'],
                                question['options'],
                                question['answer']
                            )
                            
                        if result['answer'].lower() != question['answer'].lower():
                            incorrect_questions.append({
                                "question_index": i,
                                "question": question,
                                "correct_answer": result['answer'],
                                "solution": result['solution'],
                                "model_used": model_choice
                            })
                        break  # Success - exit retry loop
                        
                    except Exception as e:
                        logger.error(f"First model failed, trying alternate models after delay: {str(e)}")
                        time.sleep(60)  # Wait 1 minute before trying alternate models
                        
                        # Try alternate models in random order
                        models = ['cerebras', 'gemini', 'groq']
                        models.remove(model_choice)
                        random.shuffle(models)
                        
                        success = False
                        for alt_model in models:
                            try:
                                if alt_model == 'cerebras':
                                    result = verify_with_cerebras(
                                        question['question'],
                                        question['options'],
                                        question['answer']
                                    )
                                elif alt_model == 'groq' and groq_client:
                                    result = verify_with_groq(
                                        question['question'],
                                        question['options'],
                                        question['answer']
                                    )
                                else:  # gemini
                                    result = verify_with_gemini(
                                        question['question'],
                                        question['options'],
                                        question['answer']
                                    )
                                    
                                if result['answer'].lower() != question['answer'].lower():
                                    incorrect_questions.append({
                                        "question_index": i,
                                        "question": question,
                                        "correct_answer": result['answer'],
                                        "solution": result['solution'],
                                        "model_used": alt_model
                                    })
                                success = True
                                break  # Found a working model
                                
                            except Exception as e2:
                                logger.error(f"{alt_model} model failed: {str(e2)}")
                                continue
                                
                        if success:
                            break  # Exit retry loop if any model succeeded
                        else:
                            logger.error("All models failed for this question")
                            if attempt < max_retries - 1:
                                time.sleep(retry_delay)
                            else:
                                continue  # Skip this question after all retries fail
                    
                except Exception as e:
                    logger.error(f"Error verifying question {i} (attempt {attempt + 1}/{max_retries}): {e}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                    else:
                        continue  # Skip this question after all retries fail
        
        # Save incorrect questions if any
        if incorrect_questions:
            lesson_name = os.path.splitext(os.path.basename(pdf_path))[0]
            base_folder = "lessons10" if class_num == 10 else "lessons"
            subject_lower = subject.lower()
            
            incorrect_file = os.path.join(
                SCRIPT_DIR, 
                "data", 
                "incorrect_questions",
                base_folder,
                subject_lower,
                f"incorrect_{lesson_name}.json"
            )
            os.makedirs(os.path.dirname(incorrect_file), exist_ok=True)
            
            with open(incorrect_file, 'w') as f:
                json.dump(incorrect_questions, f, indent=2)
            
            # Remove incorrect questions from main list
            correct_questions = [q for i, q in enumerate(questions_json) 
                               if i not in [ic['question_index'] for ic in incorrect_questions]]
            questions_json = correct_questions

        # Save final questions with proper directory structure
        lesson_name = os.path.splitext(os.path.basename(pdf_path))[0]
        base_folder = "lessons10" if class_num == 10 else "lessons"
        subject_lower = subject.lower()
        
        # Format filename based on subject
        if subject == "Science":
            filename = f"lesson-{lesson_name}.json"
        elif subject == "Math":
            filename = f"lesson{lesson_name}.json"
        elif subject == "SS":
            # For SS files, lesson_name should already be in format "prefix.number"
            filename = f"{lesson_name}.json"
        else:
            filename = f"lesson{lesson_name}.json"
            
        output_file = os.path.join(
            SCRIPT_DIR,
            "data",
            base_folder,
            subject_lower,
            filename
        )
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        with open(output_file, 'w') as f:
            json.dump(questions_json, f, indent=2)

        # After successfully saving questions, update lessons.json
        if questions_json:  # Only update if questions were successfully generated
            update_lessons_json(subject, lesson_name, class_num)
            
        return output_file

    except Exception as e:
        logger.error(f"Error processing PDF {pdf_path}: {str(e)}\n{traceback.format_exc()}")
        return None

def process_directory(directory_path):
    """Process all PDFs in a directory structure"""
    try:
        # Dictionary to store question counts for each PDF
        question_counts = {}
        
        for root, _, files in os.walk(directory_path):
            for file in files:
                if file.endswith('.pdf'):
                    pdf_path = os.path.join(root, file)
                    
                    # Extract class and subject from path
                    path_parts = root.split(os.sep)
                    try:
                        class_num = int(path_parts[-2])
                        subject = path_parts[-1]
                    except (IndexError, ValueError) as e:
                        logger.error(f"Invalid directory structure for {pdf_path}: {str(e)}\n{traceback.format_exc()}")
                        continue

                    # Check if corresponding JSON file already exists
                    lesson_name = os.path.splitext(os.path.basename(pdf_path))[0]
                    base_folder = "lessons10" if class_num == 10 else "lessons"
                    subject_lower = subject.lower()
                    
                    # Format filename based on subject
                    if subject == "Science":
                        filename = f"lesson-{lesson_name}.json"
                    elif subject == "Math":
                        filename = f"lesson{lesson_name}.json"
                    elif subject == "SS":
                        # For SS files, lesson_name should already be in format "prefix.number"
                        filename = f"{lesson_name}.json"
                    else:
                        filename = f"lesson{lesson_name}.json"
                        
                    json_file = os.path.join(
                        SCRIPT_DIR,
                        "data",
                        base_folder,
                        subject_lower,
                        filename
                    )

                    if os.path.exists(json_file):
                        logger.info(f"{lesson_name} is skipped")
                        # Add the count from existing JSON file
                        try:
                            with open(json_file, 'r') as f:
                                questions = json.load(f)
                                question_counts[pdf_path] = len(questions)
                        except Exception as e:
                            logger.error(f"Error counting questions in existing {json_file}: {str(e)}")
                            question_counts[pdf_path] = 0
                        continue
                    
                    logger.info(f"Processing {pdf_path}")
                    output_file = process_pdf(pdf_path, subject, class_num)
                    if output_file:
                        logger.info(f"Generated questions saved to {output_file}")
                        # Read the output file to count questions
                        try:
                            with open(output_file, 'r') as f:
                                questions = json.load(f)
                                question_counts[pdf_path] = len(questions)
                        except Exception as e:
                            logger.error(f"Error counting questions in {output_file}: {str(e)}")
                            question_counts[pdf_path] = 0
                    else:
                        logger.error(f"Failed to process {pdf_path}")
                        question_counts[pdf_path] = 0
        
        # Save question counts to numbers.json
        numbers_file = os.path.join(SCRIPT_DIR, 'numbers.json')
        try:
            with open(numbers_file, 'w') as f:
                json.dump(question_counts, f, indent=2)
            logger.info(f"Question counts saved to {numbers_file}")
        except Exception as e:
            logger.error(f"Error saving question counts: {str(e)}\n{traceback.format_exc()}")
            
    except Exception as e:
        logger.error(f"Error processing directory {directory_path}: {str(e)}\n{traceback.format_exc()}")

def validate_pdf_structure(base_dir):
    """
    Validate the PDF directory structure and return any issues found.
    Expected structure:
    pdfs/
    ├── 9/
    │   ├── Math/
    │   ├── Science/
    │   └── SS/
    └── 10/
        ├── Math/
        ├── Science/
        └── SS/
    """
    issues = []
    valid_structure = False
    
    # Check if pdfs directory exists
    pdfs_dir = os.path.join(base_dir, 'pdfs')
    if not os.path.exists(pdfs_dir):
        issues.append("❌ 'pdfs' directory not found in the workspace")
        issues.append("ℹ️ Create a 'pdfs' directory in your workspace")
        return False, issues

    # Expected structure
    expected_classes = ['9', '10']
    expected_subjects = ['Math', 'Science', 'SS']
    
    # Check class directories
    class_dirs = [d for d in os.listdir(pdfs_dir) if os.path.isdir(os.path.join(pdfs_dir, d))]
    if not class_dirs:
        issues.append("❌ No class directories found in 'pdfs' directory")
        issues.append("ℹ️ Create directories '9' and '10' inside 'pdfs' directory")
    else:
        for expected_class in expected_classes:
            if expected_class not in class_dirs:
                issues.append(f"❌ Class directory '{expected_class}' not found")
                issues.append(f"ℹ️ Create directory '{expected_class}' inside 'pdfs' directory")
            else:
                # Check subject directories
                class_path = os.path.join(pdfs_dir, expected_class)
                subject_dirs = [d for d in os.listdir(class_path) if os.path.isdir(os.path.join(class_path, d))]
                
                if not subject_dirs:
                    issues.append(f"❌ No subject directories found in 'pdfs/{expected_class}'")
                    issues.append(f"ℹ️ Create subject directories (Math, Science, SS) inside 'pdfs/{expected_class}'")
                else:
                    for expected_subject in expected_subjects:
                        if expected_subject not in subject_dirs:
                            issues.append(f"❌ Subject directory '{expected_subject}' not found in 'pdfs/{expected_class}'")
                            issues.append(f"ℹ️ Create directory '{expected_subject}' inside 'pdfs/{expected_class}'")
                        else:
                            # Check if there are any PDFs in the subject directory
                            subject_path = os.path.join(class_path, expected_subject)
                            pdfs = [f for f in os.listdir(subject_path) if f.endswith('.pdf')]
                            if not pdfs:
                                issues.append(f"⚠️ No PDF files found in 'pdfs/{expected_class}/{expected_subject}'")
                                issues.append(f"ℹ️ Add PDF files to 'pdfs/{expected_class}/{expected_subject}'")

    # Structure is valid if there are no issues
    valid_structure = len(issues) == 0
    
    # Add setup instructions if there are issues
    if not valid_structure:
        issues.append("\nTo set up the correct directory structure:")
        issues.append("1. Create a 'pdfs' directory in your workspace")
        issues.append("2. Inside 'pdfs', create directories '9' and '10'")
        issues.append("3. Inside each class directory, create subject directories:")
        issues.append("   - Math")
        issues.append("   - Science")
        issues.append("   - SS")
        issues.append("4. Add your PDF files to the appropriate subject directories")
        issues.append("\nExample valid path: pdfs/9/Math/1.pdf")
    
    return valid_structure, issues

if __name__ == "__main__":
    try:
        # Get the script's directory
        script_dir = os.path.dirname(os.path.abspath(__file__))
        base_dir = os.path.dirname(os.path.dirname(script_dir))  # Go up two levels to workspace root
        
        # Validate PDF directory structure
        valid_structure, issues = validate_pdf_structure(base_dir)
        
        if not valid_structure:
            print("""
❌ Invalid PDF Structure Found!

📚 PDF Placement Guide 📚
========================

Place your PDF files in the following structure:

workspace/
└── pdfs/
    ├── 9/
    │   ├── Math/         <- Put class 9 Math PDFs here
    │   ├── Science/      <- Put class 9 Science PDFs here
    │   └── SS/           <- Put class 9 Social Studies PDFs here
    └── 10/
        ├── Math/         <- Put class 10 Math PDFs here
        ├── Science/      <- Put class 10 Science PDFs here
        └── SS/           <- Put class 10 Social Studies PDFs here

Example valid paths:
- pdfs/9/Math/chapter1.pdf
- pdfs/10/Science/lesson2.pdf
- pdfs/9/SS/e.1.pdf

Note: For SS (Social Studies) PDFs:
- Use format: e.1.pdf, e.2.pdf for Economics
- Use format: c.1.pdf, c.2.pdf for Civics
- Use format: g.1.pdf, g.2.pdf for Geography
- Use format: h.1.pdf, h.2.pdf for History

Issues Found:
""")
            for issue in issues:
                print(issue)
            sys.exit(1)
            
        print("✅ PDF directory structure is valid")
        print("Processing PDFs...")
        
        # Process the pdfs directory
        pdfs_dir = os.path.join(base_dir, 'pdfs')
        process_directory(pdfs_dir)
        
    except Exception as e:
        logger.error(f"Main execution error: {str(e)}\n{traceback.format_exc()}")
        sys.exit(1) 

================================================================================
Files with extension: .jsx
================================================================================


--------------------------------------------------------------------------------
File: src\App.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";
import {
  Route,
  Routes,
  Navigate,
  useLocation,
} from "react-router-dom";
import Sidebar from "./components/sidebar";
import Content from "./components/body-content";
import BottomNav from "./components/mobile-bottomnav";
import Exam from "./components/Exam";
import Login from "./components/Login";
import ProtectedRoute from "./components/ProtectedRoute";
import NotFound from "./components/NotFound";
import Analysis from "./components/Analyse";
import SubjectDetails from "./components/SubjectDetails";
import ExamTaking from "./components/ExamTaking";
import ExamResults from "./components/ExamResults";
import History from "./components/History";
import TestSeries from "./components/TestSeries";
import Header from "./components/Header";
import CreateTest from "./components/CreateTest";
import LandingPage from "./components/LandingPage";

import "./App.css";

const ScrollToTop = () => {
  const { pathname } = useLocation();
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [pathname]);
  return null;
};

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isHeaderVisible, setIsHeaderVisible] = useState(true);
  const location = useLocation();

  useEffect(() => {
    const token = localStorage.getItem("token");
    setIsAuthenticated(!!token);
  }, []);

  const showHeader = location.pathname !== '/';

  return (
    <div className={`App ${isHeaderVisible ? "" : "header-hidden"}`}>
      {showHeader && <Header onVisibilityChange={setIsHeaderVisible} />}
      {isAuthenticated && <Sidebar isHeaderHidden={!isHeaderVisible} />}
      
      <Routes>
        <Route
          path="/"
          element={isAuthenticated ? <Navigate to="/home" /> : <LandingPage />}
        />
        <Route
          path="/home"
          element={
            <ProtectedRoute>
              <Content />
              <ScrollToTop />
            </ProtectedRoute>
          }
        />
        <Route
          path="/login"
          element={isAuthenticated ? <Navigate to="/home" /> : <Login />}
        />
        <Route
          path="/create"
          element={
            <ProtectedRoute>
              <Exam />
            </ProtectedRoute>
          }
        />
        <Route
          path="/analyse"
          element={
            <ProtectedRoute>
              <Analysis />
            </ProtectedRoute>
          }
        />
        <Route
          path="/analyse/:subject"
          element={
            <ProtectedRoute>
              <SubjectDetails />
            </ProtectedRoute>
          }
        />
        <Route
          path="/history"
          element={
            <ProtectedRoute>
              <History />
            </ProtectedRoute>
          }
        />
        <Route
          path="/exam/g/:id"
          element={
            <ProtectedRoute>
              <ExamTaking />
            </ProtectedRoute>
          }
        />
        <Route
          path="/exam/results/:id"
          element={
            <ProtectedRoute>
              <ExamResults />
            </ProtectedRoute>
          }
        />
        <Route
          path="/test-series"
          element={
            <ProtectedRoute>
              <TestSeries />
            </ProtectedRoute>
          }
        />
        <Route
          path="/create-test"
          element={
            <ProtectedRoute>
              <CreateTest />
            </ProtectedRoute>
          }
        />
        {/* Catch-all route */}
        <Route
          path="*"
          element={isAuthenticated ? <NotFound /> : <Navigate to="/login" />}
        />
      </Routes>

      {isAuthenticated && window.innerWidth <= 768 && <BottomNav />}
    </div>
  );
}

export default App;

--------------------------------------------------------------------------------
File: src\components\Analyse.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import styled from 'styled-components';
import SubjectDetails from './SubjectDetails';
import { api } from '../utils/api';

// Styled Components
const TypewriterContainer = styled(motion.span)`
  .letter {
    display: inline-block;
  }

  .typing-cursor {
    user-select: none;
    animation: blink 0.5s step-end infinite;
  }

  @keyframes blink {
    from, to { opacity: 1; }
    50% { opacity: 0; }
  }
`;

const SkeletonPulse = styled.div`
  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.4; }
    100% { opacity: 1; }
  }
  animation: pulse 1.5s ease-in-out infinite;
`;

const PageHeader = styled(motion.div)`
  margin: 0 0 2rem;
  padding-top: 1rem;
  position: relative;
  text-align: center;

  h1 {
    font-size: 1.6rem;
    font-weight: 700;
    letter-spacing: -0.5px;
    text-transform: uppercase;
  }

  @media (min-width: 768px) {
    h1 {
      font-size: 2rem;
    }
  }

  @media (min-width: 1024px) {
    h1 {
      font-size: 2.2rem;
    }
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -0.8rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 3px;
    border-radius: 2px;
    opacity: 0.8;
  }
`;

// Animation Variants
const fadeTransition = {
  hidden: {
    opacity: 0,
    scale: 0.95,
    filter: 'blur(10px)',
    willChange: 'opacity, transform, filter'
  },
  visible: {
    opacity: 1,
    scale: 1,
    filter: 'blur(0px)',
    transition: {
      duration: 0.5,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 1.05,
    filter: 'blur(10px)',
    transition: {
      duration: 0.3,
      ease: [0.4, 0, 1, 1]
    }
  }
};

const cardVariants = {
  hidden: { 
    opacity: 0, 
    scale: 0.8, 
    y: 50,
    willChange: 'opacity, transform'
  },
  visible: (index) => ({ 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: {
      duration: 0.5,
      delay: index * 0.1,
      type: "spring",
      stiffness: 100,
      damping: 20,
      mass: 0.5
    }
  })
};

// Custom Hook for Typewriter Effect
const useTypewriterFade = (text, speed = 40, delay = 200) => {
  const [displayText, setDisplayText] = useState('');
  const [isFinished, setIsFinished] = useState(false);

  useEffect(() => {
    let typingTimer;
    
    const startTyping = () => {
      typingTimer = setInterval(() => {
        setDisplayText(prev => {
          if (prev.length < text.length) {
            return text.slice(0, prev.length + 1);
          } else {
            clearInterval(typingTimer);
            setIsFinished(true);
            return prev;
          }
        });
      }, speed);
    };

    const delayTimer = setTimeout(() => {
      setDisplayText('');
      startTyping();
    }, delay);

    return () => {
      clearTimeout(delayTimer);
      clearInterval(typingTimer);
    };
  }, [text, speed, delay]);

  return { displayText, isFinished };
};

// TypewriterFadeText Component
const TypewriterFadeText = ({ text, delay = 0, onFinish }) => {
  const { displayText, isFinished } = useTypewriterFade(text, 40, delay);

  useEffect(() => {
    if (isFinished && onFinish) {
      onFinish();
    }
  }, [isFinished, onFinish]);

  return (
    <TypewriterContainer>
      {displayText.split('').map((char, index) => (
        <motion.span
          key={index}
          className="letter"
          initial={{ opacity: 0, y: -5 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            duration: 0.15,
            ease: "easeOut"
          }}
        >
          {char === ' ' ? '\u00A0' : char}
        </motion.span>
      ))}
      {!isFinished && (
        <motion.span
          className="typing-cursor"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{
            duration: 0.5,
            repeat: Infinity,
            repeatType: "reverse"
          }}
        >
          |
        </motion.span>
      )}
    </TypewriterContainer>
  );
};

// Skeleton Card Component
const SkeletonCard = () => (
  <SkeletonPulse>
    <div className="analysis-card skeleton">
      <div className="card-icon skeleton-icon"></div>
      <div className="card-content">
        <p className="skeleton-text"></p>
        <p className="skeleton-text"></p>
        <p className="skeleton-text"></p>
      </div>
      <div className="card-button skeleton-button"></div>
    </div>
  </SkeletonPulse>
);

// Main Analysis Component
const Analysis = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [subjects, setSubjects] = useState([]);
  const [showButtons, setShowButtons] = useState({});
  const navigate = useNavigate();
  const [selectedSubject, setSelectedSubject] = useState(null);
  const [isSidebarExpanded, setIsSidebarExpanded] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await api.getOverviewStats();
        const overviewStats = data.subjects;
        const subjectData = Object.keys(overviewStats)
          .sort((a, b) => {
            if (a === 'English') return 1;
            if (b === 'English') return -1;
            return 0;
          })
          .map(subject => ({
            name: subject,
            icon: getSubjectIcon(subject),
            color: getSubjectColor(subject),
            stats: overviewStats[subject]
          }));
        setSubjects(subjectData);
      } catch (error) {
        console.error('Error fetching subjects:', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  const getSubjectIcon = (subject) => {
    const icons = { Math: '📐', Science: '🧪', English: '📚', SS: '🌍' };
    return icons[subject] || '📚';
  };

  const getSubjectColor = (subject) => {
    const colors = { Math: '#4CAF50', Science: '#2196F3', English: '#FFC107', SS: '#9C27B0' };
    return colors[subject] || '#607D8B';
  };

  const handleViewDetails = (subject, event) => {
    // Get the clicked card's position and size
    const card = event.currentTarget;
    const rect = card.getBoundingClientRect();
    
    setSelectedSubject({
      ...subject,
      initialPosition: {
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height
      }
    });
  };

  const handleTypewriterFinish = (subjectName) => {
    setShowButtons(prev => ({ ...prev, [subjectName]: true }));
  };

  const handleClose = () => {
    setSelectedSubject(null);
  };

  // Add effect to listen for sidebar hover
  useEffect(() => {
    const sidebar = document.querySelector('.sidebar');
    
    const handleMouseEnter = () => setIsSidebarExpanded(true);
    const handleMouseLeave = () => setIsSidebarExpanded(false);

    if (sidebar) {
      sidebar.addEventListener('mouseenter', handleMouseEnter);
      sidebar.addEventListener('mouseleave', handleMouseLeave);
    }

    return () => {
      if (sidebar) {
        sidebar.removeEventListener('mouseenter', handleMouseEnter);
        sidebar.removeEventListener('mouseleave', handleMouseLeave);
      }
    };
  }, []);

  return (
    <motion.div 
      className="analysis-container"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      style={{ willChange: 'opacity' }}
    >
      <PageHeader
        initial={{ y: -20 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1>Subject Analysis</h1>
      </PageHeader>
      <div className="card-grid">
        {(isLoading ? Array(4).fill(null) : subjects).map((subject, index) => (
          <motion.div
            key={index}
            className={`card-wrapper ${isLoading ? 'loading' : 'loaded'}`}
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            custom={index}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <AnimatePresence mode="wait">
              {isLoading ? (
                <motion.div
                  key="skeleton"
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  variants={fadeTransition}
                >
                  <SkeletonCard />
                </motion.div>
              ) : (
                <motion.div
                  key="content"
                  initial="hidden"
                  animate="visible"
                  variants={fadeTransition}
                  className="analysis-card"
                  style={{ '--card-color': subject.color }}
                >
                  <motion.div 
                    className="card-icon"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: index * 0.2 + 0.3, type: "spring", stiffness: 200 }}
                  >
                    {subject.icon}
                  </motion.div>
                  <h2 className="card-title">
                    <TypewriterFadeText 
                      text={subject.name} 
                      delay={500} 
                      onFinish={() => handleTypewriterFinish(subject.name)} 
                    />
                  </h2>
                  <div className="card-content">
                    <motion.p
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2 }}
                    >
                      <TypewriterFadeText 
                        text={`Exams: ${subject.stats.exams_given}`} 
                        delay={1500} 
                        onFinish={() => handleTypewriterFinish(subject.name)} 
                      />
                    </motion.p>
                    <motion.p
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.4 }}
                    >
                      <TypewriterFadeText 
                        text={`Average Score: ${subject.stats.average_percentage.toFixed(2)}%`}
                        delay={2500}
                        onFinish={() => handleTypewriterFinish(subject.name)}
                      />
                    </motion.p>
                    <motion.p
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.6 }}
                    >
                      <TypewriterFadeText 
                        text={`Highest Score: ${subject.stats.highest_marks}`}
                        delay={3500}
                        onFinish={() => handleTypewriterFinish(subject.name)}
                      />
                    </motion.p>
                  </div>
                  <motion.button 
                    className="card-button" 
                    onClick={(e) => handleViewDetails(subject, e)}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ 
                      opacity: showButtons[subject.name] ? 1 : 0,
                      y: showButtons[subject.name] ? 0 : 20
                    }}
                    transition={{ 
                      duration: 0.3,
                      type: "spring",
                      stiffness: 200,
                      damping: 20,
                      mass: 0.5
                    }}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    style={{ 
                      willChange: 'transform, opacity',
                      backfaceVisibility: 'hidden',
                      WebkitBackfaceVisibility: 'hidden'
                    }}
                  >
                    View Details
                  </motion.button>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>
      <AnimatePresence>
        {selectedSubject && (
          <motion.div 
            className={`subject-popup-overlay ${isSidebarExpanded ? 'sidebar-expanded' : ''}`}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleClose}
          >
            <motion.div
              className="subject-popup"
              initial={{
                position: 'fixed',
                top: selectedSubject.initialPosition.top,
                left: selectedSubject.initialPosition.left,
                width: selectedSubject.initialPosition.width,
                height: selectedSubject.initialPosition.height,
                borderRadius: '15px',
                willChange: 'transform'
              }}
              animate={{
                top: '50%',
                left: '50%',
                width: '80vw',
                height: '80vh',
                y: '-50%',
                x: '-50%',
              }}
              exit={{
                top: selectedSubject.initialPosition.top,
                left: selectedSubject.initialPosition.left,
                width: selectedSubject.initialPosition.width,
                height: selectedSubject.initialPosition.height,
                borderRadius: '15px'
              }}
              transition={{ 
                type: "spring",
                damping: 30,
                stiffness: 200,
                mass: 0.8,
                restDelta: 0.001
              }}
              style={{
                backfaceVisibility: 'hidden',
                WebkitBackfaceVisibility: 'hidden',
                perspective: 1000,
                WebkitPerspective: 1000
              }}
              onClick={e => e.stopPropagation()}
            >
              <motion.button
                className="close-button"
                onClick={handleClose}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                ��
              </motion.button>
              <div className="popup-content">
                <SubjectDetails subject={selectedSubject.name.toLowerCase()} />
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default Analysis;

--------------------------------------------------------------------------------
File: src\components\body-content.jsx
--------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';

import Notification from './Notification';
import { Navigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import styled from 'styled-components';
import UpdatePopup from './UpdatePopup';
import LeaderboardPopup from './LeaderboardPopup';
import { api } from '../utils/api';

// Styled Components for skeleton loading
const SkeletonPulse = styled.div`
  .skeleton {
    background: transparent;
  }
  `;

// Animation variants
const cardVariants = {
  hidden: { 
    opacity: 0, 
    scale: 0.8, 
    y: 50 
  },
  visible: (index) => ({ 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: {
      duration: 0.8,
      delay: index * 0.2,
      type: "spring",
      stiffness: 100,
      damping: 15
    }
  })
};

const fadeTransition = {
  hidden: {
    opacity: 0,
    scale: 0.95,
    filter: 'blur(10px)',
  },
  visible: {
    opacity: 1,
    scale: 1,
    filter: 'blur(0px)',
    transition: {
      duration: 0.5,
      ease: "easeOut"
    }
  },
  exit: {
    opacity: 0,
    scale: 1.05,
    filter: 'blur(10px)',
    transition: {
      duration: 0.3,
      ease: "easeIn"
    }
  }
};

// Skeleton Card Component
const SkeletonCard = () => (
  <SkeletonPulse>
    <div className="card skeleton">
      <div className="skeleton-title"></div>
      <div className="skeleton-value"></div>
    </div>
  </SkeletonPulse>
);

function Content() {
  const initialCardData = [
    { title: "Total Exams Attempted", value: "NA" },
    { title: "Total Marks Attempted", value: "NA" },
    { title: "Total Marks Gained", value: "NA" },
    { title: "Average Percentage", value: "NA" },
  ];

  const [cardData, setCardData] = useState(initialCardData);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showUpdatePopup, setShowUpdatePopup] = useState(false);
  const [updates, setUpdates] = useState([]);
  const [showLeaderboardPopup, setShowLeaderboardPopup] = useState(false);
  const [leaderboardData, setLeaderboardData] = useState(null);
  const [animateNumbers, setAnimateNumbers] = useState(false);

  useEffect(() => {
    const handleAnimateCards = () => {
      setTimeout(() => {
        setAnimateNumbers(true);
      }, 1500);
    };

    window.addEventListener('animateCards', handleAnimateCards);
    return () => window.removeEventListener('animateCards', handleAnimateCards);
  }, []);

  const checkForUpdates = async () => {
    try {
      const data = await api.getUpdates();
      if (data && data.version) {
        const lastSeenUpdate = localStorage.getItem('lastSeenUpdate');
        if (!lastSeenUpdate || lastSeenUpdate !== data.version) {
          setUpdates([data]);
          setShowUpdatePopup(true);
        }
      }
    } catch (error) {
      console.error('Failed to fetch updates:', error);
    }
  };

  const handleClosePopup = () => {
    if (updates.length > 0) {
      localStorage.setItem('lastSeenUpdate', updates[0].version);
    }
    setShowUpdatePopup(false);
  };

  const fetchLeaderboard = async () => {
    try {
      const data = await api.getLeaderboard();
      const storedLeaderboard = localStorage.getItem('leaderboardData');
      
      if (!storedLeaderboard || JSON.stringify(data) !== storedLeaderboard) {
        setLeaderboardData(data);
        setShowLeaderboardPopup(true);
        localStorage.setItem('leaderboardData', JSON.stringify(data));
      }
    } catch (error) {
      console.error('Failed to fetch leaderboard:', error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (!localStorage.getItem('token')) {
          throw new Error('Unauthorized');
        }

        const data = await api.getOverviewStats();
        let formattedData;
        
        if (data && data.subjects) {
          const subjects = Object.values(data.subjects);
          const totalExams = subjects.reduce((acc, curr) => acc + (curr.exams_given || 0), 0);
          const totalMarks = subjects.reduce((acc, curr) => acc + ((curr.exams_given || 0) * 100), 0);
          const totalGained = subjects.reduce((acc, curr) => acc + ((curr.average_percentage || 0) * (curr.exams_given || 0)), 0);
          const avgPercentage = subjects.length > 0 ? 
            subjects.reduce((acc, curr) => acc + (curr.average_percentage || 0), 0) / subjects.length : 0;

          formattedData = [
            { title: "Total Exams Attempted", value: totalExams },
            { title: "Total Marks Attempted", value: totalMarks },
            { title: "Total Marks Gained", value: totalGained.toFixed(0) },
            { title: "Average Percentage", value: avgPercentage.toFixed(2) + "%" },
          ];
        } else {
          formattedData = [
            { title: "Total Exams Attempted", value: 0 },
            { title: "Total Marks Attempted", value: 0 },
            { title: "Total Marks Gained", value: 0 },
            { title: "Average Percentage", value: "0.00%" },
          ];
        }
        
        setCardData(formattedData);
        await checkForUpdates();
        await fetchLeaderboard();
      } catch (error) {
        setError(error.message);
        if (error.message === 'Unauthorized access') {
          Navigate('/login');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleCloseLeaderboard = () => {
    setShowLeaderboardPopup(false);
    window.dispatchEvent(new Event('animateCards'));
  };

  return (
    <>
      <UpdatePopup
        isOpen={showUpdatePopup}
        onClose={() => {
          handleClosePopup();
          if (leaderboardData) {
            setShowLeaderboardPopup(true);
          }
        }}
        updates={updates}
      />
      {leaderboardData && (
        <LeaderboardPopup
          isOpen={showLeaderboardPopup}
          onClose={handleCloseLeaderboard}
          leaderboardData={leaderboardData}
          updatePopupOpen={showUpdatePopup}
        />
      )}
      <motion.div 
        className="content"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        {error && <Notification message={error} type="error" />}
        <div className="container">
          {cardData.map((card, index) => (
            <motion.div
              key={index}
              className="card"
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              custom={index}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <AnimatePresence mode="wait">
                {loading ? (
                  <motion.div
                    key="skeleton"
                    initial="hidden"
                    animate="hidden"
                    exit="exit"
                    variants={fadeTransition}
                  >
                    <SkeletonCard />
                  </motion.div>
                ) : (
                  <motion.div
                    key="content"
                    initial="hidden"
                    animate="visible"
                    variants={fadeTransition}
                  >
                    <div className="info-text">{card.title}</div>
                    <motion.div 
                      className="number"
                      initial={{ scale: animateNumbers ? 0 : 1, opacity: animateNumbers ? 0 : 1 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{
                        type: "spring",
                        stiffness: 200,
                        damping: 12,
                        delay: index * 0.1
                      }}
                    >
                      {card.value}
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </>
  );
}

export default Content;

--------------------------------------------------------------------------------
File: src\components\cards.jsx
--------------------------------------------------------------------------------

function Card({ title, value }) {
  return (
    <div className="card">
      <div className="info-text">{title}</div>
      <div className="number">{value}</div>
    </div>
  );
}

export default Card;


--------------------------------------------------------------------------------
File: src\components\CopyableExamId.jsx
--------------------------------------------------------------------------------

import React from 'react';
import { motion } from 'framer-motion';
import { FaCopy } from 'react-icons/fa';

const CopyableExamId = ({ examId }) => {
  const handleCopy = () => {
    navigator.clipboard.writeText(examId);
    const notification = document.createElement('div');
    notification.textContent = 'Exam ID copied!';
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.left = '50%';
    notification.style.transform = 'translateX(-50%)';
    notification.style.backgroundColor = '#4CAF50';
    notification.style.color = 'white';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '5px';
    notification.style.zIndex = '1000';
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 2000);
  };

  return (
    <motion.div 
      style={{ 
        display: 'flex',
        alignItems: 'center',
        gap: '8px'
      }}
    >
      <motion.div 
        style={{
          cursor: 'pointer',
          padding: '8px 12px',
          backgroundColor: 'rgba(255, 255, 255, 0.05)',
          color: '#ffffff',
          borderRadius: '8px',
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          userSelect: 'all',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          fontSize: '1rem',
          fontFamily: 'monospace'
        }}
        whileHover={{ 
          scale: 1.02,
          backgroundColor: 'rgba(255, 255, 255, 0.08)',
          border: '1px solid rgba(255, 255, 255, 0.2)'
        }}
        whileTap={{ scale: 0.98 }}
        onClick={handleCopy}
        title="Click to copy exam ID"
      >
        <span>{examId}</span>
        <FaCopy style={{ fontSize: '0.9rem', opacity: 0.7 }} />
      </motion.div>
    </motion.div>
  );
};

export default CopyableExamId;


--------------------------------------------------------------------------------
File: src\components\CreateTest.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { FaEdit, FaTrash } from 'react-icons/fa';
import { IoMdAdd } from 'react-icons/io';
import styled from 'styled-components';
import { ExamSkeletonLoading } from './Exam';
import { questionCardVariants, buttonVariants } from './animations';
import { api, API_BASE_URL } from '../utils/api';
import { Dialog } from '@mui/material';
import { Skeleton } from "@mui/material";
import { keyframes } from 'styled-components';
import { toast } from 'react-toastify';
import 'katex/dist/katex.min.css';
import { InlineMath, BlockMath } from 'react-katex';

// Animation keyframes
const shimmerKeyframes = keyframes`
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
`;

const rainbowGradient = `
  linear-gradient(
    45deg,
    #FF0000,
    #FF7F00,
    #FFFF00,
    #00FF00,
    #0000FF,
    #4B0082,
    #8B00FF
  )
`;

const glowKeyframes = keyframes`
  0% {
    box-shadow: 0 0 50px rgba(255, 0, 0, 0.5),
                0 0 100px rgba(255, 127, 0, 0.3),
                0 0 150px rgba(255, 255, 0, 0.2);
  }
  33% {
    box-shadow: 0 0 50px rgba(0, 255, 0, 0.5),
                0 0 100px rgba(0, 0, 255, 0.3),
                0 0 150px rgba(75, 0, 130, 0.2);
  }
  66% {
    box-shadow: 0 0 50px rgba(148, 0, 211, 0.5),
                0 0 100px rgba(255, 0, 0, 0.3),
                0 0 150px rgba(255, 127, 0, 0.2);
  }
  100% {
    box-shadow: 0 0 50px rgba(255, 0, 0, 0.5),
                0 0 100px rgba(255, 127, 0, 0.3),
                0 0 150px rgba(255, 255, 0, 0.2);
  }
`;

const gradientKeyframes = keyframes`
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
`;

const borderAnimation = keyframes`
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
`;

const borderGlow = keyframes`
  0% {
    background-position: 0% 0%;
  }
  25% {
    background-position: 100% 0%;
  }
  50% {
    background-position: 100% 100%;
  }
  75% {
    background-position: 0% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
`;

// Skeleton components
const SkeletonLine = styled(motion.div)`
  height: ${props => props.height || '20px'};
  background: #444;
  border-radius: 6px;
  width: ${props => props.width || '100%'};
  position: relative;
  overflow: hidden;
  z-index: 1;
`;

const LoadingSkeleton = styled(motion.div)`
  margin: 2rem 0;
  position: relative;
  border-radius: 15px;
  background: #2a2a2a;
  padding: 3px;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 15px;
    background: linear-gradient(
      90deg,
      #FF0000, #FF8000, #FFFF00, #00FF00, 
      #00FFFF, #0000FF, #8000FF, #FF0080,
      #FF0000
    );
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    background-size: 200% 100%;
    animation: ${borderGlow} 2s linear infinite;
  }
`;

const LoadingContent = styled.div`
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  position: relative;
  z-index: 1;
  background: #2a2a2a;
  border-radius: 12px;
  height: 100%;
`;

const QuestionSkeleton = styled(motion.div)`
  position: relative;
  background: #333;
  border-radius: 12px;
  padding: 3px;
  margin-bottom: 1rem;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 12px;
    background: linear-gradient(
      90deg,
      #FF0000, #FF8000, #FFFF00, #00FF00, 
      #00FFFF, #0000FF, #8000FF, #FF0080,
      #FF0000
    );
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    background-size: 200% 100%;
    animation: ${borderGlow} 2s linear infinite;
    animation-delay: ${props => props.index * -0.5}s;
  }

  &::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      90deg,
      rgba(255, 0, 0, 0.5),
      rgba(255, 128, 0, 0.5),
      rgba(255, 255, 0, 0.5),
      rgba(0, 255, 0, 0.5),
      rgba(0, 255, 255, 0.5),
      rgba(0, 0, 255, 0.5),
      rgba(128, 0, 255, 0.5),
      rgba(255, 0, 0, 0.5)
    );
    filter: blur(8px);
    opacity: 0.15;
    border-radius: 12px;
    z-index: -1;
    background-size: 200% 100%;
    animation: ${borderGlow} 2s linear infinite;
    animation-delay: ${props => props.index * -0.5}s;
  }
`;

const QuestionSkeletonContent = styled.div`
  padding: 1.5rem;
  background: #333;
  border-radius: 10px;
  position: relative;
  height: 100%;
`;

// Enhanced skeleton components
const EnhancedSkeletonLine = styled(motion.div)`
  height: ${props => props.height || '20px'};
  background: #444;
  border-radius: 6px;
  width: ${props => props.width || '100%'};
  position: relative;
  overflow: hidden;
  will-change: transform, opacity;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(33, 150, 243, 0.15),
      transparent
    );
    animation: ${shimmerKeyframes} 2s infinite linear;
    transform: translate3d(0, 0, 0);
  }
`;

const QuestionGenerationSkeleton = styled(motion.div)`
  margin: 2rem 0;
  position: relative;
  overflow: hidden;
  border-radius: 15px;
  background: #2a2a2a;
  width: 100%;
  will-change: transform, opacity;
  
  &::before {
    content: '';
    position: absolute;
    top: -100%;
    left: -100%;
    right: -100%;
    bottom: -100%;
    background: linear-gradient(
      45deg,
      rgba(33, 150, 243, 0.15),
      rgba(33, 150, 243, 0.05),
      rgba(3, 169, 244, 0.15),
      rgba(0, 188, 212, 0.05),
      rgba(33, 150, 243, 0.15)
    );
    background-size: 200% 200%;
    animation: ${gradientKeyframes} 10s ease infinite;
    filter: blur(30px);
    z-index: 0;
    transform: translate3d(0, 0, 0);
  }
`;

const SkeletonQuestion = styled(motion.div)`
  background: #333;
  border-radius: 12px;
  padding: 1.5rem;
  position: relative;
  overflow: hidden;
  will-change: transform, opacity;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(33, 150, 243, 0.1),
      transparent
    );
    animation: ${shimmerKeyframes} 2s infinite linear;
    transform: translate3d(0, 0, 0);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    right: -50%;
    bottom: -50%;
    background: radial-gradient(
      circle,
      rgba(33, 150, 243, 0.1) 0%,
      transparent 70%
    );
    animation: ${glowKeyframes} 3s ease-in-out infinite;
    z-index: 0;
    filter: blur(20px);
    transform: translate3d(0, 0, 0);
  }
`;

const PageHeader = styled(motion.div)`
  margin-bottom: 2rem;
  padding-top: 1.5rem;
  text-align: center;
  
  h1 {
    font-weight: 700;
    font-size: 2.2rem;
    letter-spacing: -0.5px;
    color: #ffffff;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    background: linear-gradient(135deg, #ffffff 0%, #b3b3b3 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
`;

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  padding-bottom: 4rem;
  font-family: 'Roboto', sans-serif;
`;

const TestInfo = styled.div`
  background: #2a2a2a;
  border-radius: 15px;
  padding: 2rem;
  margin-bottom: 2rem;
  color: white;
  text-align: center;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);

  h2 {
    margin: 0 0 1.5rem 0;
    font-size: 1.8rem;
    color: #2196f3;
    font-weight: 500;
  }

  .details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    justify-content: center;
  }

  .detail-item {
    background: #333;
    padding: 1rem;
    border-radius: 10px;
    transition: transform 0.2s ease;

    &:hover {
      transform: translateY(-2px);
    }
  }

  p {
    margin: 0.5rem 0;
    color: #ccc;
    font-size: 1.1rem;
    
    span {
      display: block;
      color: white;
      font-weight: 500;
      margin-top: 0.3rem;
      font-size: 1.2rem;
    }
  }
`;

const ImageUploadSection = styled.div`
  background: #2a2a2a;
  border-radius: 15px;
  padding: 2rem;
  margin-bottom: 2rem;
  color: white;
  text-align: center;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: height 0.3s ease;
  
  h2 {
    margin: 0 0 1.5rem 0;
    font-size: 1.8rem;
    color: #2196f3;
    font-weight: 500;
  }

  .upload-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }

  .content-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .button-container {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
`;

const ImageUploadButton = styled(motion.label)`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.8rem;
  background: linear-gradient(135deg, #2196f3 0%, #1976D2 100%);
  color: white;
  border: none;
  border-radius: 12px;
  padding: 1rem 2rem;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  input {
    display: none;
  }

  svg {
    font-size: 1.4rem;
  }
`;

const ConfirmDialog = styled(Dialog)`
  .MuiDialog-paper {
    background: #2a2a2a;
    color: white;
    padding: 2rem;
    border-radius: 15px;
    min-width: 300px;
    font-family: 'Roboto', sans-serif;
  }

  h3 {
    margin: 0 0 1.5rem 0;
    color: #2196f3;
    font-size: 1.5rem;
    text-align: center;
  }

  .dialog-buttons {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    justify-content: center;
  }
`;

const DialogButton = styled(motion.button)`
  padding: 0.8rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  font-weight: 500;
  min-width: 100px;

  &.confirm {
    background: #4CAF50;
    color: white;
    &:hover {
      background: #45a049;
    }
  }

  &.cancel {
    background: #f44336;
    color: white;
    &:hover {
      background: #d32f2f;
    }
  }
`;

const QuestionCard = styled(motion.div)`
  background: ${props => {
    if (props.isNew) {
      return props.hasAnswer ? '#423c1c' : '#422222';  // Yellow tint for answered, red tint for unanswered
    }
    return '#2a2a2a';  // Default dark background
  }};
  border-radius: 15px;
  padding: 2rem;
  margin-bottom: 1.5rem;
  position: relative;
  color: white;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.3s ease, background-color 0.3s ease;
  border: 2px solid ${props => {
    if (props.isNew) {
      return props.hasAnswer ? 'rgba(255, 255, 0, 0.2)' : 'rgba(255, 0, 0, 0.2)';
    }
    return 'transparent';
  }};

  &:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  h3 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: ${props => props.isNew ? (props.hasAnswer ? '#ffd700' : '#ff4444') : '#2196f3'};
  }

  .question-number {
    position: absolute;
    top: -12px;
    left: -12px;
    background: #2196f3;
    color: white;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .options-container {
    display: grid;
    gap: 1rem;
    margin-top: 1rem;
  }

  .option {
    background: #333;
    padding: 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;

    &:hover {
      background: #444;
      transform: translateX(5px);
    }

    &.selected {
      background: #4CAF50;
      color: white;
      transform: translateX(10px);
    }
  }
`;

const EditButton = styled(motion.button)`
  position: absolute;
  top: 1rem;
  right: 4rem;
  background: transparent;
  border: none;
  color: #4CAF50;
  cursor: pointer;
  font-size: 1.2rem;
  
  &:hover {
    color: #45a049;
  }
`;

const DeleteButton = styled(motion.button)`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: transparent;
  border: none;
  color: #f44336;
  cursor: pointer;
  font-size: 1.2rem;
  
  &:hover {
    color: #d32f2f;
  }
`;

const AddQuestionButton = styled(motion.button)`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  background: #2196f3;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  font-size: 1rem;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  
  &:hover {
    background: #1976D2;
  }

  svg {
    flex-shrink: 0;
  }
`;

const CreateTestButton = styled(motion.button)`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  background: #2196f3;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  font-size: 1rem;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  
  &:hover {
    background: #1976D2;
  }
`;

const QuestionInput = styled.textarea`
  width: 100%;
  padding: 1rem;
  margin-bottom: 1rem;
  background: #333;
  border: 1px solid #444;
  border-radius: 8px;
  color: white;
  font-size: 1rem;
  min-height: 100px;
  resize: vertical;
  transition: border-color 0.3s ease;

  &:focus {
    border-color: #2196f3;
    outline: none;
  }
`;

const OptionInput = styled.input`
  width: 100%;
  padding: 0.75rem;
  background: #333;
  border: 1px solid #444;
  border-radius: 8px;
  color: white;
  font-size: 0.95rem;
  transition: all 0.3s ease;

  &:focus {
    border-color: #2196f3;
    outline: none;
    background: #3a3a3a;
  }
`;

const OptionContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
  
  label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 30px;
    color: #ccc;
  }
`;

const ButtonsContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin: 2rem auto 2rem;
  max-width: 600px;
  width: 100%;
  
  > * {
    flex: 1;
    height: 48px;
    min-width: 0;
  }
`;

const LoadingContainer = styled(motion.div)`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  padding-bottom: 4rem;
`;

const LoadingHeader = styled(motion.div)`
  text-align: center;
  margin-bottom: 2rem;
`;

const LoadingCard = styled(motion.div)`
  background: #2a2a2a;
  border-radius: 15px;
  padding: 2rem;
  margin-bottom: 1.5rem;
  position: relative;
`;

const ImageLoadingSkeleton = styled(motion.div)`
  margin: 1rem 0;
  position: relative;
  overflow: hidden;
  border-radius: 15px;
  background: #2a2a2a;
  width: 100%;
  
  &::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    right: -50%;
    bottom: -50%;
    background: linear-gradient(
      45deg,
      rgba(33, 150, 243, 0.15),
      rgba(33, 150, 243, 0.05),
      rgba(3, 169, 244, 0.15),
      rgba(0, 188, 212, 0.05),
      rgba(33, 150, 243, 0.15)
    );
    background-size: 200% 200%;
    animation: ${gradientKeyframes} 10s ease infinite;
    z-index: 0;
    filter: blur(20px);
    opacity: 0.15;
  }
`;

const SkeletonContent = styled.div`
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  position: relative;
  z-index: 1;
`;

const ImagePreviewContainer = styled(motion.div)`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
  justify-items: center;

  @media (min-width: 768px) {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
`;

const ImagePreview = styled(motion.div)`
  position: relative;
  aspect-ratio: 16/9;
  background: #333;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
  transform-origin: center;
  will-change: transform, opacity;
  
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .delete-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: rgba(244, 67, 54, 0.9);
    color: white;
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    opacity: 0.8;
    transform: scale(1);
    will-change: transform;

    &:hover {
      background: #f44336;
      transform: scale(1.1);
      opacity: 1;
    }

    @media (min-width: 768px) {
      opacity: 0;
      transform: scale(0.8);
    }
  }

  @media (min-width: 768px) {
    &:hover .delete-button {
      opacity: 1;
      transform: scale(1);
    }
  }
`;

const ImageAnalysis = styled(motion.div)`
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 0.5rem;
  font-size: 0.8rem;
  transform: translateY(100%);
  transition: transform 0.3s ease;

  .analysis-content {
    max-height: 100px;
    overflow-y: auto;
    padding: 0.5rem;
  }

  ${ImagePreview}:hover & {
    transform: translateY(0);
  }
`;

const GenerateButton = styled(motion.button)`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.8rem;
  background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
  color: white;
  border: none;
  border-radius: 12px;
  padding: 1rem 2rem;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-top: 1rem;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  &:disabled {
    background: #666;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
`;

const ImagePopup = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.9);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  padding: 2rem;

  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 1.5rem;

    &:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: scale(1.1);
    }
  }

  .image-container {
    max-width: 90%;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
    
    img {
      max-width: 100%;
      max-height: 90vh;
      object-fit: contain;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    }
  }
`;

const NoQuestionsDialog = styled(Dialog)`
  .MuiDialog-paper {
    background: #2a2a2a;
    color: white;
    padding: 2rem;
    border-radius: 15px;
    min-width: 350px;
    max-width: 500px;
    font-family: 'Roboto', sans-serif;
  }

  .dialog-content {
    text-align: center;
  }

  .dialog-icon {
    font-size: 4rem;
    color: #2196f3;
    margin-bottom: 1rem;
  }

  h3 {
    margin: 0 0 1rem 0;
    color: #2196f3;
    font-size: 1.5rem;
  }

  p {
    color: #ccc;
    margin-bottom: 1.5rem;
    line-height: 1.5;
  }

  .possible-reasons {
    text-align: left;
    background: #333;
    padding: 1rem;
    border-radius: 8px;
    margin: 1rem 0;

    h4 {
      color: #2196f3;
      margin: 0 0 0.5rem 0;
      font-size: 1.1rem;
    }

    ul {
      margin: 0;
      padding-left: 1.5rem;
      color: #ccc;

      li {
        margin: 0.5rem 0;
      }
    }
  }

  .dialog-buttons {
    display: flex;
    justify-content: center;
    margin-top: 1.5rem;
  }
`;

const UnderstandButton = styled(motion.button)`
  background: #2196f3;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 0.8rem 2rem;
  font-size: 1rem;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s ease;

  &:hover {
    background: #1976D2;
  }
`;

const PrivacyNoticeDialog = styled(Dialog)`
  .MuiDialog-paper {
    background: #2a2a2a;
    color: white;
    padding: 2rem;
    border-radius: 15px;
    min-width: 400px;
    max-width: 600px;
    font-family: 'Roboto', sans-serif;
  }

  .dialog-content {
    text-align: center;
  }

  .privacy-icon {
    font-size: 4rem;
    color: #ff4444;
    margin-bottom: 1rem;
  }

  h3 {
    margin: 0 0 1rem 0;
    color: #ff4444;
    font-size: 1.8rem;
    font-weight: 600;
  }

  .privacy-text {
    color: #eee;
    margin: 1.5rem 0;
    line-height: 1.6;
    text-align: left;
    background: rgba(255, 68, 68, 0.1);
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid rgba(255, 68, 68, 0.2);

    p {
      margin: 0.8rem 0;
      &:first-child {
        margin-top: 0;
      }
      &:last-child {
        margin-bottom: 0;
      }
    }
  }

  .dialog-buttons {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }
`;

const AgreeButton = styled(motion.button)`
  background: #ff4444;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 1rem 3rem;
  font-size: 1.1rem;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s ease;
  box-shadow: 0 4px 6px rgba(255, 68, 68, 0.2);

  &:hover {
    background: #ff3333;
  }
`;

// Table styled components
const TableContainer = styled.div`
  margin: 1rem 0;
  overflow-x: auto;
  background: rgba(255, 255, 255, 0.03);
  border-radius: 8px;
  padding: 1rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  color: #ffffff;
  font-size: 1rem;
`;

const TableHeader = styled.th`
  background: rgba(79, 172, 254, 0.1);
  padding: 0.75rem 1rem;
  text-align: left;
  border: 1px solid rgba(255, 255, 255, 0.1);
  font-weight: 600;
`;

const TableCell = styled.td`
  padding: 0.75rem 1rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const TableRow = styled.tr`
  &:nth-child(even) {
    background: rgba(255, 255, 255, 0.02);
  }
  &:hover {
    background: rgba(79, 172, 254, 0.05);
  }
`;

// Function to parse markdown tables
const parseMarkdownTable = (text) => {
  const hasTable = text.includes('|') && text.includes('\n');
  if (!hasTable) return { text, tables: [] };

  const tables = [];
  const parts = text.split('\n');
  let currentTable = [];
  let isInTable = false;
  let textParts = [];

  parts.forEach((line, index) => {
    if (line.trim().startsWith('|')) {
      isInTable = true;
      currentTable.push(line);
    } else {
      if (isInTable && currentTable.length > 0) {
        tables.push(currentTable);
        currentTable = [];
        isInTable = false;
      }
      if (line.trim()) {
        textParts.push(line);
      }
    }
  });

  if (currentTable.length > 0) {
    tables.push(currentTable);
  }

  return {
    text: textParts.join('\n'),
    tables: tables.map(tableLines => {
      // Filter out separator rows (rows containing only dashes and pipes)
      const contentRows = tableLines.filter(line => !line.replace(/\|/g, '').trim().match(/^[-\s]+$/));
      
      const rows = contentRows.map(line => {
        // Split by | and remove first and last empty elements
        const cells = line.split('|');
        return cells.slice(1, -1).map(cell => cell.trim());
      });
      
      // First row is always headers
      const headerRow = rows[0];
      const dataRows = rows.slice(1);
      
      return {
        headers: headerRow,
        rows: dataRows
      };
    })
  };
};

// Function to process text and render LaTeX
const renderLatexText = (text) => {
  if (!text) return null;
  
  // Split text by LaTeX delimiters ($)
  const parts = text.split(/(\$[^\$]+\$)/g);
  
  return parts.map((part, index) => {
    if (part.startsWith('$') && part.endsWith('$')) {
      // Remove $ delimiters and render as LaTeX
      const latex = part.slice(1, -1);
      try {
        return <InlineMath key={index} math={latex} />;
      } catch (error) {
        console.error('LaTeX parsing error:', error);
        return part;
      }
    }
    return part;
  });
};

// Function to render a table cell with LaTeX support
const renderTableCell = (content) => {
  return <TableCell>{renderLatexText(content)}</TableCell>;
};

// Update the renderTable function to support LaTeX
const renderTable = (tableData) => {
  return (
    <TableContainer>
      <Table>
        <thead>
          <tr>
            {tableData.headers.map((header, index) => (
              <TableHeader key={index}>{renderLatexText(header)}</TableHeader>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.rows.map((row, rowIndex) => (
            <TableRow key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <TableCell key={cellIndex}>{renderLatexText(cell)}</TableCell>
              ))}
            </TableRow>
          ))}
        </tbody>
      </Table>
    </TableContainer>
  );
};

const CreateTestSkeleton = () => (
  <LoadingContainer
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
  >
    <LoadingHeader>
      <Skeleton 
        variant="text" 
        width={200} 
        height={50} 
        style={{ 
          margin: '0 auto',
          background: 'rgba(255, 255, 255, 0.1)' 
        }} 
      />
    </LoadingHeader>

    <LoadingCard>
      <Skeleton 
        variant="text" 
        width={150} 
        height={40} 
        style={{ background: 'rgba(255, 255, 255, 0.1)', marginBottom: '1.5rem' }} 
      />
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '1.5rem' }}>
        {[1, 2, 3].map((n) => (
          <div key={n} style={{ background: '#333', padding: '1rem', borderRadius: '10px' }}>
            <Skeleton 
              variant="text" 
              width={80} 
              height={24} 
              style={{ background: 'rgba(255, 255, 255, 0.1)' }} 
            />
            <Skeleton 
              variant="text" 
              width={120} 
              height={30} 
              style={{ background: 'rgba(255, 255, 255, 0.1)', marginTop: '0.5rem' }} 
            />
          </div>
        ))}
      </div>
    </LoadingCard>

    {[1, 2, 3].map((n) => (
      <LoadingCard key={n}>
        <Skeleton 
          variant="text" 
          width="100%" 
          height={60} 
          style={{ background: 'rgba(255, 255, 255, 0.1)', marginBottom: '1.5rem' }} 
        />
        {[1, 2, 3, 4].map((o) => (
          <Skeleton 
            key={o}
            variant="rectangular" 
            width="100%" 
            height={50} 
            style={{ 
              background: 'rgba(255, 255, 255, 0.1)', 
              marginBottom: '1rem',
              borderRadius: '8px'
            }} 
          />
        ))}
      </LoadingCard>
    ))}

    <ButtonsContainer>
      <Skeleton 
        variant="rectangular" 
        width="100%" 
        height={48} 
        style={{ 
          background: 'rgba(255, 255, 255, 0.1)', 
          borderRadius: '8px'
        }} 
      />
      <Skeleton 
        variant="rectangular" 
        width="100%" 
        height={48} 
        style={{ 
          background: 'rgba(255, 255, 255, 0.1)', 
          borderRadius: '8px'
        }} 
      />
    </ButtonsContainer>
  </LoadingContainer>
);

const CreateTest = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [questions, setQuestions] = useState([]);
  const [isLoading, setIsLoading] = useState(!location.state?.generatedTest);
  const [openConfirm, setOpenConfirm] = useState(false);
  const [showPrivacyNotice, setShowPrivacyNotice] = useState(false);
  const [hasAgreedToPrivacy, setHasAgreedToPrivacy] = useState(false);
  const [pendingUploadEvent, setPendingUploadEvent] = useState(null);
  const [progress, setProgress] = useState(0);
  const progressInterval = useRef(null);
  const startTimeRef = useRef(null);
  const lastProgressRef = useRef(0);
  const [uploadedImages, setUploadedImages] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);
  const [showNoQuestionsDialog, setShowNoQuestionsDialog] = useState(false);
  const [newQuestionIds, setNewQuestionIds] = useState(new Set());

  useEffect(() => {
    if (location.state?.generatedTest) {
      setQuestions(location.state.generatedTest.questions.map(q => ({
        ...q,
        isEditing: false
      })));
      setIsLoading(false);
    }
  }, [location]);

  useEffect(() => {
    if (!location.state?.generatedTest) {
      startTimeRef.current = Date.now();
      lastProgressRef.current = 0;

      const updateProgress = () => {
        const elapsedTime = Date.now() - startTimeRef.current;
        const newProgress = Math.min((elapsedTime / 1000) * 100, 100);

        if (newProgress > lastProgressRef.current) {
          setProgress(newProgress);
          lastProgressRef.current = newProgress;
        }
      };

      progressInterval.current = setInterval(updateProgress, 5);

      return () => {
        if (progressInterval.current) {
          clearInterval(progressInterval.current);
        }
      };
    }
  }, []);

  const handleEdit = (index) => {
    setQuestions(prev => prev.map((q, i) => 
      i === index ? { ...q, isEditing: !q.isEditing } : q
    ));
  };

  const handleDelete = (index) => {
    setQuestions(prev => prev.filter((_, i) => i !== index));
  };

  const handleQuestionChange = (index, field, value, optionKey) => {
    setQuestions(prev => prev.map((q, i) => {
      if (i !== index) return q;
      
      if (field === 'options') {
        return {
          ...q,
          options: { ...q.options, [optionKey]: value }
        };
      }
      
      return { ...q, [field]: value };
    }));
  };

  const handleAnswerChange = (index, selectedOption) => {
    setQuestions(prev => prev.map((q, i) => 
      i === index ? { ...q, answer: selectedOption } : q
    ));
  };

  const handleAddQuestion = () => {
    const newQuestion = {
      question: '',
      options: { a: '', b: '', c: '', d: '' },
      answer: '',
      isEditing: true,
      id: Date.now()  // Add unique id for new questions
    };
    setQuestions(prev => [...prev, newQuestion]);
    setNewQuestionIds(prev => new Set(prev).add(newQuestion.id));
  };

  const handleCreateTest = async () => {
    setIsLoading(true);
    setProgress(0);
    startTimeRef.current = Date.now();
    lastProgressRef.current = 0;

    const updateProgress = () => {
      const elapsedTime = Date.now() - startTimeRef.current;
      const newProgress = Math.min((elapsedTime / 2000) * 25, 25);

      if (newProgress > lastProgressRef.current) {
        setProgress(newProgress);
        lastProgressRef.current = newProgress;
      }
    };

    progressInterval.current = setInterval(updateProgress, 5);
    
    setOpenConfirm(true);
  };

  const handleConfirmCreate = async () => {
    const updateProgress = () => {
      const elapsedTime = Date.now() - startTimeRef.current;
      const newProgress = Math.min(25 + ((elapsedTime / 1000) * 75), 100);

      if (newProgress > lastProgressRef.current) {
        setProgress(newProgress);
        lastProgressRef.current = newProgress;
      }
    };

    try {
      await api.createTest({
        subject: location.state.generatedTest.subject,
        lessons: location.state.generatedTest.lessons,
        questions: questions.map(({ isEditing, ...q }) => q),
        class10: location.state.generatedTest.class10
      });
      
      clearInterval(progressInterval.current);
      setProgress(100);
      
      setTimeout(() => {
        navigate('/test-series');
      }, 100);
    } catch (error) {
      console.error('Error:', error);
      clearInterval(progressInterval.current);
      setIsLoading(false);
      setOpenConfirm(false);
    }
  };

  const handleCancelCreate = () => {
    clearInterval(progressInterval.current);
    setIsLoading(false);
    setOpenConfirm(false);
    setProgress(0);
  };

  const handleImageUpload = async (event) => {
    const files = event?.target?.files || pendingUploadEvent;
    
    if (!hasAgreedToPrivacy) {
      setPendingUploadEvent(files);
      setShowPrivacyNotice(true);
      if (event?.target) {
        event.target.value = '';  // Reset file input
      }
      return;
    }

    if (files && files.length > 0) {
      setIsUploading(true);
      const formData = new FormData();
      
      // Validate file sizes and types before upload
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        if (file.size > 16 * 1024 * 1024) { // 16MB limit
          toast.error(`File ${file.name} is too large. Maximum size is 16MB.`);
          setIsUploading(false);
          return;
        }
        if (!file.type.startsWith('image/')) {
          toast.error(`File ${file.name} is not an image.`);
          setIsUploading(false);
          return;
        }
        formData.append(`image_${i}`, file);
      }

      try {
        const response = await api.uploadImages(formData);
        
        if (response?.files?.length > 0) {
          const newImages = await Promise.all(response.files.map(async filename => {
            const imageResponse = await api.getUploadedImage(filename);
            const imageBlob = await imageResponse.blob();
            return {
              url: URL.createObjectURL(imageBlob),
              filename
            };
          }));

          setUploadedImages(prev => [...prev, ...newImages]);
          toast.success('Images uploaded successfully!');
        } else {
          throw new Error('No files were uploaded');
        }
      } catch (error) {
        console.error('Error uploading images:', error);
        toast.error(error.message || 'Failed to upload images. Please try again.');
      } finally {
        setIsUploading(false);
        setPendingUploadEvent(null);
      }
    }
  };

  const handleDeleteImage = (index) => {
    setUploadedImages(prev => prev.filter((_, i) => i !== index));
  };

  const handleGenerateQuestions = async () => {
    if (uploadedImages.length === 0) {
      toast.error('Please upload at least one image first');
      return;
    }

    setIsGenerating(true);
    
    // Show skeleton loader immediately
    const skeletonContainer = document.querySelector('.image-upload-section');
    if (skeletonContainer) {
      skeletonContainer.scrollIntoView({ behavior: 'smooth' });
    }

    try {
      // Get filenames from uploaded images
      const filenames = uploadedImages.map(img => img.filename);
      console.log('Sending filenames:', filenames);
      
      // Call the API to generate questions
      const questions = await api.generateFromImages(filenames);
      console.log('Received questions:', questions);
      
      if (!questions) {
        console.error('No questions received from API');
        setShowNoQuestionsDialog(true);
        return;
      }
      
      if (!Array.isArray(questions)) {
        console.error('Questions is not an array:', questions);
        setShowNoQuestionsDialog(true);
        return;
      }
      
      if (questions.length === 0) {
        console.error('Questions array is empty');
        setShowNoQuestionsDialog(true);
        return;
      }
      
      const formattedQuestions = questions.map(q => ({
        ...q,
        isEditing: false,
        id: Date.now() + Math.random()  // Add unique id for new questions
      }));
      
      console.log('Formatted questions:', formattedQuestions);
      setQuestions(formattedQuestions);
      // Add all generated questions to newQuestionIds
      setNewQuestionIds(new Set(formattedQuestions.map(q => q.id)));
      toast.success('Questions generated successfully!');
    } catch (error) {
      console.error('Error generating questions:', error);
      // Check if this is the "no questions" error
      if (error.message === 'No questions could be extracted from the images') {
        setShowNoQuestionsDialog(true);
      } else {
        toast.error(error.message || 'Failed to generate questions. Please try again.');
      }
    } finally {
      setIsGenerating(false);
    }
  };

  const handleImageClick = (image) => {
    setSelectedImage(image);
  };

  const handleClosePopup = () => {
    setSelectedImage(null);
  };

  const handleCloseNoQuestionsDialog = () => {
    setShowNoQuestionsDialog(false);
  };

  const handleAgreeToPrivacy = () => {
    setHasAgreedToPrivacy(true);
    setShowPrivacyNotice(false);
    if (pendingUploadEvent) {
      handleImageUpload();  // No need to create artificial event
    }
  };

  return (
    <>
      {isLoading ? (
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          style={{ 
            height: '100vh', 
            width: '100%',
            position: 'fixed',
            top: 0,
            left: 0,
            background: '#1a1a1a'
          }}
        >
          <ExamSkeletonLoading progress={progress} />
        </motion.div>
      ) : (
        <Container>
          <PageHeader
            initial={{ y: -20 }}
            animate={{ y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h1>Create Test</h1>
          </PageHeader>
          
          <TestInfo>
            <h2>Test Details</h2>
            <div className="details-grid">
              <div className="detail-item">
                <p>Subject<span>{location.state?.generatedTest?.subject}</span></p>
              </div>
              <div className="detail-item">
                <p>Total Questions<span>{questions.length}</span></p>
              </div>
              <div className="detail-item">
                <p>Lessons<span>{location.state?.generatedTest?.lessons.join(', ')}</span></p>
              </div>
            </div>
          </TestInfo>

          <ImageUploadSection className="image-upload-section">
            <h2>Upload Images</h2>
            <div className="content-container">
              <div className="upload-container">
                <ImageUploadButton
                  as={motion.label}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <IoMdAdd />
                  Add Images
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleImageUpload}
                  />
                </ImageUploadButton>
              </div>

              {(uploadedImages.length > 0 || isUploading) && (
                <>
                  <ImagePreviewContainer>
                    <AnimatePresence mode="popLayout">
                      {uploadedImages.map((image, index) => (
                        <ImagePreview
                          key={image.filename}
                          initial={{ opacity: 0, scale: 0.9, height: 0 }}
                          animate={{ 
                            opacity: 1, 
                            scale: 1,
                            height: 'auto',
                            transition: {
                              height: {
                                type: "spring",
                                stiffness: 500,
                                damping: 30,
                                mass: 1
                              },
                              opacity: {
                                duration: 0.2
                              },
                              scale: {
                                type: "spring",
                                stiffness: 150,
                                damping: 15,
                                mass: 0.1
                              }
                            }
                          }}
                          exit={{ 
                            opacity: 0, 
                            scale: 0.9,
                            height: 0,
                            transition: {
                              height: {
                                duration: 0.2,
                                ease: "easeInOut"
                              },
                              opacity: {
                                duration: 0.15
                              },
                              scale: {
                                duration: 0.15
                              }
                            }
                          }}
                          onClick={() => handleImageClick(image)}
                          style={{ cursor: 'pointer' }}
                        >
                          <img src={image.url} alt={`Uploaded ${index + 1}`} />
                          <button
                            className="delete-button"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteImage(index);
                            }}
                          >
                            <FaTrash />
                          </button>
                        </ImagePreview>
                      ))}
                    </AnimatePresence>
                  </ImagePreviewContainer>

                  <AnimatePresence>
                    {isUploading && (
                      <ImageLoadingSkeleton
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ 
                          opacity: 1, 
                          height: 200,
                          transition: {
                            duration: 0.3,
                            ease: "easeOut"
                          }
                        }}
                        exit={{ 
                          opacity: 0, 
                          height: 0,
                          transition: {
                            duration: 0.2,
                            ease: "easeIn"
                          }
                        }}
                      >
                        <SkeletonContent>
                          <SkeletonLine height="40px" width="60%" />
                          <SkeletonLine height="20px" width="80%" />
                          <SkeletonLine height="20px" width="70%" />
                          <SkeletonLine height="20px" width="75%" />
                        </SkeletonContent>
                      </ImageLoadingSkeleton>
                    )}
                  </AnimatePresence>

                  {uploadedImages.length > 0 && (
                    <motion.div 
                      className="button-container"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                    >
                      <GenerateButton
                        onClick={handleGenerateQuestions}
                        disabled={isGenerating}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        {isGenerating ? 'Generating...' : 'Generate Questions'}
                      </GenerateButton>
                    </motion.div>
                  )}
                </>
              )}
            </div>
          </ImageUploadSection>

          <AnimatePresence>
            {isGenerating && (
              <LoadingSkeleton
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.5 }}
              >
                <LoadingContent>
                  {[1, 2, 3].map((_, index) => (
                    <QuestionSkeleton
                      key={index}
                      index={index}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{
                        duration: 0.5,
                        delay: index * 0.2,
                        ease: [0.4, 0, 0.2, 1]
                      }}
                    >
                      <QuestionSkeletonContent>
                        <SkeletonLine 
                          height="24px" 
                          width="80%" 
                          initial={{ opacity: 0, scaleX: 0.8 }}
                          animate={{ opacity: 1, scaleX: 1 }}
                          transition={{ duration: 0.3, delay: index * 0.2 + 0.2 }}
                        />
                        <div style={{ marginTop: '1.5rem', display: 'grid', gap: '1rem' }}>
                          {[1, 2, 3, 4].map((_, optionIndex) => (
                            <SkeletonLine
                              key={optionIndex}
                              height="20px"
                              width={`${85 - optionIndex * 5}%`}
                              initial={{ opacity: 0, scaleX: 0.8 }}
                              animate={{ opacity: 1, scaleX: 1 }}
                              transition={{
                                duration: 0.3,
                                delay: index * 0.2 + optionIndex * 0.1 + 0.3
                              }}
                            />
                          ))}
                        </div>
                      </QuestionSkeletonContent>
                    </QuestionSkeleton>
                  ))}
                </LoadingContent>
              </LoadingSkeleton>
            )}
          </AnimatePresence>

          <AnimatePresence>
            {questions.map((question, index) => (
              <QuestionCard
                key={question.id || index}
                variants={questionCardVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
                custom={index}
                isNew={newQuestionIds.has(question.id)}
                hasAnswer={!!question.answer}
              >
                <div className="question-number">{index + 1}</div>
                <EditButton
                  onClick={() => handleEdit(index)}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <FaEdit />
                </EditButton>
                <DeleteButton
                  onClick={() => handleDelete(index)}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <FaTrash />
                </DeleteButton>

                {question.isEditing ? (
                  <>
                    <QuestionInput
                      value={question.question}
                      onChange={(e) => handleQuestionChange(index, 'question', e.target.value)}
                      placeholder="Enter your question here... (Use markdown tables with | for columns)"
                    />
                    {Object.entries(question.options).map(([key, value]) => (
                      <OptionContainer key={key}>
                        <label>
                          <input
                            type="radio"
                            name={`answer-${index}`}
                            value={key}
                            checked={question.answer === key}
                            onChange={() => handleAnswerChange(index, key)}
                          />
                          {key.toUpperCase()}
                        </label>
                        <OptionInput
                          value={value}
                          onChange={(e) => handleQuestionChange(index, 'options', e.target.value, key)}
                          placeholder={`Option ${key.toUpperCase()}`}
                        />
                      </OptionContainer>
                    ))}
                  </>
                ) : (
                  <>
                    {(() => {
                      const { text, tables } = parseMarkdownTable(question.question);
                      return (
                        <>
                          <h3>{renderLatexText(text)}</h3>
                          {tables.map((table, tableIndex) => renderTable(table))}
                        </>
                      );
                    })()}
                    <div className="options-container">
                      {Object.entries(question.options).map(([key, value]) => (
                        <motion.div
                          key={key}
                          className={`option ${question.answer === key ? 'selected' : ''}`}
                          onClick={() => handleAnswerChange(index, key)}
                          whileHover={{ x: 5 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <strong>{key.toUpperCase()}.</strong> {renderLatexText(value)}
                        </motion.div>
                      ))}
                    </div>
                  </>
                )}
              </QuestionCard>
            ))}
          </AnimatePresence>

          <ButtonsContainer>
            <AddQuestionButton
              onClick={handleAddQuestion}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <IoMdAdd />
              Add Question
            </AddQuestionButton>

            <CreateTestButton
              onClick={handleCreateTest}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              disabled={questions.length === 0}
            >
              Create Test
            </CreateTestButton>
          </ButtonsContainer>
        </Container>
      )}

      <ConfirmDialog
        open={openConfirm}
        onClose={handleCancelCreate}
        style={{ zIndex: 9999 }}
      >
        <h3>Create Test?</h3>
        <p>Are you sure you want to create this test? This action <strong>cannot</strong> be undone.</p>
        <div className="dialog-buttons">
          <DialogButton
            className="cancel"
            onClick={handleCancelCreate}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Cancel
          </DialogButton>
          <DialogButton
            className="confirm"
            onClick={() => {
              setOpenConfirm(false);
              handleConfirmCreate();
            }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Create
          </DialogButton>
        </div>
      </ConfirmDialog>

      <NoQuestionsDialog
        open={showNoQuestionsDialog}
        onClose={handleCloseNoQuestionsDialog}
      >
        <div className="dialog-content">
          <div className="dialog-icon">⚠️</div>
          <h3>No Questions Detected</h3>
          <p>We couldn't detect any questions from the uploaded images.</p>
          
          <div className="possible-reasons">
            <h4>This might be because:</h4>
            <ul>
              <li>The image doesn't contain any questions</li>
              <li>The image quality is too low or unclear</li>
              <li>The text in the image is not properly visible</li>
              <li>The questions are not in a recognizable format</li>
            </ul>
          </div>

          <p>Please check your images and try again with clear, well-lit photos of questions.</p>
          
          <div className="dialog-buttons">
            <UnderstandButton
              onClick={handleCloseNoQuestionsDialog}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              I Understand
            </UnderstandButton>
          </div>
        </div>
      </NoQuestionsDialog>

      <AnimatePresence>
        {selectedImage && (
          <ImagePopup
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleClosePopup}
          >
            <div className="image-container" onClick={(e) => e.stopPropagation()}>
              <img src={selectedImage.url} alt="Selected" />
              <button className="close-button" onClick={handleClosePopup}>×</button>
            </div>
          </ImagePopup>
        )}
      </AnimatePresence>

      <PrivacyNoticeDialog
        open={showPrivacyNotice}
        onClose={() => {}}
      >
        <div className="dialog-content">
          <div className="privacy-icon">🔒</div>
          <h3>Privacy Notice</h3>
          <div className="privacy-text">
            <p>Before proceeding with image uploads, please carefully read and acknowledge the following privacy terms:</p>
            <p>1. Any images you upload will be stored on AcePlus servers located in Romania.</p>
            <p>2. Do not upload any images containing sensitive, private, or confidential information that you wish to keep private.</p>
            <p>3. The creator, Ayush Pandey, maintains complete rights and authority to access, test, check, and verify any uploaded images for the purpose of product improvement and quality assurance.</p>
            <p>4. By clicking "I Agree", you acknowledge that you understand and accept these terms regarding the handling and storage of your uploaded images.</p>
          </div>
          <div className="dialog-buttons">
            <AgreeButton
              onClick={handleAgreeToPrivacy}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              I Agree
            </AgreeButton>
          </div>
        </div>
      </PrivacyNoticeDialog>
    </>
  );
};

export default CreateTest; 

--------------------------------------------------------------------------------
File: src\components\Exam.jsx
--------------------------------------------------------------------------------

import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styled from "styled-components";
import { motion, AnimatePresence } from "framer-motion";
import { FaBook, FaSearch, FaTimes } from "react-icons/fa";
import './exam.css';
import { api } from '../utils/api';

export const ProgressBar = styled.div`
  position: fixed;
  top: 50px;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(to right, #4facfe 0%, #00f2fe 100%);
  transform-origin: 0 50%;
  transform: scaleX(${(props) => props.progress / 100});
  transition:
    transform 0.1s ease,
    top 0.3s ease;
  z-index: 1000;
  .header-hidden & {
    top: 0;
  }
`;

const SkeletonOption = styled.div`
  height: 20px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: 2px;
  margin: 5px 0;

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
`;

export const ExamSkeletonLoading = ({ progress }) => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <ProgressBar progress={progress} />
      <div className="exam-skeleton-container">
        {[1, 2, 3, 4].map((item) => (
          <motion.div
            key={item}
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: item * 0.1 }}
            className="exam-skeleton-card"
          >
            <div className="exam-skeleton-question"></div>
            <div className="exam-skeleton-options">
              <div className="exam-skeleton-option"></div>
              <div className="exam-skeleton-option"></div>
              <div className="exam-skeleton-option"></div>
              <div className="exam-skeleton-option"></div>
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

const ExamContainer = styled.div`
  -webkit-tap-highlight-color: transparent;
  * {
    -webkit-tap-highlight-color: transparent;
  }
`;

const ErrorPopup = styled(motion.div)`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 1100;
  max-width: 400px;
  width: 90%;
  text-align: center;

  h3 {
    margin: 0 0 15px;
    color: #e74c3c;
  }

  p {
    margin: 0 0 20px;
    color: #666;
  }

  button {
    background: #3498db;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.2s;

    &:hover {
      background: #2980b9;
    }
  }
`;

const Exam = () => {
  const [subject, setSubject] = useState("");
  const [lessons, setLessons] = useState([]);
  const [availableLessons, setAvailableLessons] = useState([]);
  const [subjects] = useState(["Math", "Science", "SS"]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLessonsLoading, setIsLessonsLoading] = useState(false);
  const [notification, setNotification] = useState("");
  const [showSkeletonLoading, setShowSkeletonLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [showLessonsPopup, setShowLessonsPopup] = useState(false);
  const [showErrorPopup, setShowErrorPopup] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLessons, setSelectedLessons] = useState([]);
  const navigate = useNavigate();
  const progressInterval = useRef(null);
  const startTimeRef = useRef(null);
  const lastProgressRef = useRef(0);

  useEffect(() => {
    if (subject && !availableLessons.length) {
      setIsLessonsLoading(true);
      fetchLessons();
    }
  }, [subject]);

  useEffect(() => {
    // Initialize selected lessons when popup opens
    if (showLessonsPopup) {
      setSelectedLessons(lessons.map(l => l.value));
    }
  }, [showLessonsPopup]);

  const fetchLessons = async () => {
    try {
      // Set skeleton options
      setAvailableLessons(
        Array(5).fill().map((_, index) => `skeleton-${index}`)
      );
      
      const data = await api.getLessons(subject);
      
      // Delay to show skeleton for a moment
      setTimeout(() => {
        setAvailableLessons(data);
        setIsLessonsLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error fetching lessons:", error);
      setNotification("Failed to fetch lessons. Please try again.");
      setIsLessonsLoading(false);
    }
  };

  const handleSubjectChange = (e) => {
    const selectedSubject = e.target.value;
    setSubject(selectedSubject);
    setAvailableLessons([]);
    setLessons([]);
    setSelectedLessons([]);
  };

  const toggleLesson = (lesson) => {
    setSelectedLessons(prev => 
      prev.includes(lesson) 
        ? prev.filter(l => l !== lesson)
        : [...prev, lesson]
    );
  };

  const handleDone = () => {
    setLessons(selectedLessons.map(value => ({ value, label: value })));
    setShowLessonsPopup(false);
  };

  const filteredLessons = availableLessons.filter(lesson => 
    lesson.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setNotification("");
    setShowSkeletonLoading(true);
    setProgress(0);
    startTimeRef.current = Date.now();
    lastProgressRef.current = 0;

    const updateProgress = () => {
      const elapsedTime = Date.now() - startTimeRef.current;
      const newProgress = Math.min((elapsedTime / 1000) * 100, 100);

      if (newProgress > lastProgressRef.current) {
        setProgress(newProgress);
        lastProgressRef.current = newProgress;
      }
    };

    progressInterval.current = setInterval(updateProgress, 5);

    try {
      const examData = await api.createExam({
        userId: localStorage.getItem("user_id"),
        subject: subject,
        lessons: lessons.map((l) => l.value),
      });

      clearInterval(progressInterval.current);
      setProgress(100);
      navigate(`/exam/g/${examData["exam-id"]}`);
    } catch (error) {
      setNotification("Failed to create an exam. Please try again.");
      setShowErrorPopup(true);
      setTimeout(() => {
        setNotification("");
        setShowErrorPopup(false);
      }, 5000);
    } finally {
      clearInterval(progressInterval.current);
      setIsLoading(false);
      setShowSkeletonLoading(false);
    }
  };

  return (
    <AnimatePresence mode="wait">
      {showSkeletonLoading ? (
        <ExamSkeletonLoading progress={progress} />
      ) : (
        <ExamContainer className="exam-page">
          <motion.div className="exam-card">
            {notification && (
              <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="notification"
              >
                {notification}
              </motion.div>
            )}
            
            {/* Error Popup */}
            <AnimatePresence>
              {showErrorPopup && (
                <ErrorPopup
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                >
                  <h3>Exam Creation Failed</h3>
                  <p>Economics section will be fixed in 5 minutes. Please try again later.</p>
                  <button onClick={() => setShowErrorPopup(false)}>Close</button>
                </ErrorPopup>
              )}
            </AnimatePresence>

            <motion.h2
              className="exam-title"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
            >
              Create New Exam
            </motion.h2>
            <motion.form
              onSubmit={handleSubmit}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
            >
              <div className="form-group">
                <label htmlFor="subject">
                  Subject
                  <span className="required-field">*</span>
                </label>
                <select
                  id="subject"
                  value={subject}
                  onChange={handleSubjectChange}
                  required
                >
                  <option value="">Select a subject</option>
                  {subjects.map((sub) => (
                    <option key={sub} value={sub}>
                      {sub}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="lessons">
                  <span>Lessons</span>
                  <span className="required-field">*</span>
                  <span className="tip-badge">
                    You can select multiple lessons
                  </span>
                </label>
                <div 
                  className="lessons-display"
                  onClick={() => subject && setShowLessonsPopup(true)}
                >
                  {lessons.length > 0 ? (
                    lessons.map(lesson => (
                      <span
                        key={lesson.value}
                        className="lesson-tag"
                      >
                        {lesson.value}
                      </span>
                    ))
                  ) : (
                    <span className="lessons-placeholder">
                      {subject ? "Click to select lessons" : "Select a subject first"}
                    </span>
                  )}
                </div>
              </div>

              <motion.button
                type="submit"
                className="submit-button"
                disabled={isLoading || !subject || lessons.length === 0}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                {isLoading ? (
                  <motion.span
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                  >
                    Creating Exam...
                  </motion.span>
                ) : (
                  "Create Exam"
                )}
              </motion.button>
            </motion.form>
          </motion.div>

          {/* Lessons Selection Popup */}
          <AnimatePresence>
            {showLessonsPopup && (
              <motion.div 
                className="lessons-popup-overlay"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={() => setShowLessonsPopup(false)}
              >
                <motion.div 
                  className="lessons-popup"
                  initial={{ scale: 0.95 }}
                  animate={{ scale: 1 }}
                  exit={{ scale: 0.95 }}
                  onClick={e => e.stopPropagation()}
                >
                  <div className="lessons-popup-header">
                    <h3 className="lessons-popup-title">
                      <span className="lessons-popup-title-icon">
                        <FaBook />
                      </span>
                      Select Lessons
                    </h3>
                    <button 
                      className="lessons-popup-close"
                      onClick={() => setShowLessonsPopup(false)}
                    >
                      <FaTimes />
                    </button>
                  </div>

                  <div className="lessons-popup-content">
                    <div className="lessons-popup-search">
                      <FaSearch className="lessons-popup-search-icon" />
                      <input
                        type="text"
                        placeholder="Search lessons..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                    </div>

                    <div className="lessons-grid">
                      {filteredLessons.map((lesson) => (
                        <div
                          key={lesson}
                          className={`lesson-item ${
                            lesson.startsWith('skeleton-') 
                              ? 'skeleton'
                              : selectedLessons.includes(lesson) ? 'selected' : ''
                          }`}
                          onClick={() => !lesson.startsWith('skeleton-') && toggleLesson(lesson)}
                        >
                          {lesson.startsWith('skeleton-') ? (
                            <div className="lesson-skeleton-content">
                              <div className="lesson-skeleton-text"></div>
                              <div className="lesson-skeleton-checkbox"></div>
                            </div>
                          ) : (
                            <>
                              <span className="lesson-item-text">{lesson}</span>
                              <div className="lesson-item-checkbox" />
                            </>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="lessons-popup-footer">
                    <span className="selected-count">
                      {selectedLessons.length} lesson{selectedLessons.length !== 1 ? 's' : ''} selected
                    </span>
                    <button 
                      className="lessons-popup-btn lessons-popup-btn-secondary"
                      onClick={() => setShowLessonsPopup(false)}
                    >
                      Cancel
                    </button>
                    <button 
                      className="lessons-popup-btn lessons-popup-btn-primary"
                      onClick={handleDone}
                    >
                      Done
                    </button>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </ExamContainer>
      )}
    </AnimatePresence>
  );
};

export default Exam;


--------------------------------------------------------------------------------
File: src\components\ExamResults.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import { FaChartLine, FaLightbulb, FaExclamationTriangle, FaCheckCircle } from 'react-icons/fa';
import { motion } from 'framer-motion';
import styled from 'styled-components';
import CopyableExamId from './CopyableExamId';
import { api } from '../utils/api';

const ResultSkeleton = () => (
  <div className="question-result skeleton">
    <div className="skeleton-text" style={{ width: '60%', height: '24px', marginBottom: '10px' }}></div>
    <div className="skeleton-text" style={{ width: '40%', height: '18px', marginBottom: '10px' }}></div>
    <div className="skeleton-text" style={{ width: '80%', height: '18px', marginBottom: '10px' }}></div>
    <div className="skeleton-text" style={{ width: '70%', height: '18px' }}></div>
  </div>
);

const PerformanceAnalysisContainer = styled(motion.div)`
  background: #1a1a1a;
  border-radius: 15px;
  padding: 2rem;
  margin: 2rem 0;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
  
  /* Ensure smooth transitions for width changes */
  transition: width 0.3s ease-in-out;
  
  /* Create a stable layout that prevents scroll jumps */
  contain: layout paint;
  min-height: fit-content;
  transform-origin: bottom center;
`;

const AnalysisSection = styled(motion.div)`
  background: rgba(255, 255, 255, 0.03);
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1rem;
  
  /* Ensure smooth text wrapping */
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;

  .section-header {
    h3 {
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
  }
`;

const PerformanceAnalysis = ({ analysis }) => {
  if (!analysis) return null;

  const sections = analysis.split('###').filter(s => s.trim());

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.3
      }
    }
  };

  const sectionVariants = {
    hidden: { 
      opacity: 0,
      x: -20
    },
    visible: {
      opacity: 1,
      x: 0,
      transition: {
        duration: 0.5,
        ease: "easeOut"
      }
    }
  };

  const processBoldText = (text) => {
    return text.split(/(\*\*.*?\*\*)/).map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return <strong key={index}>{part.slice(2, -2)}</strong>;
      }
      return part;
    });
  };

  return (
    <PerformanceAnalysisContainer
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <motion.div 
        className="performance-header"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <FaChartLine className="analysis-icon" />
        <h2>PERFORMANCE ANALYSIS</h2>
      </motion.div>
      
      <div className="analysis-content">
        {sections.map((section, index) => {
          const [title, ...content] = section.trim().split('\n');
          const contentText = content.join('\n').trim();
          const upperCaseTitle = title.trim().toUpperCase();
          
          let Icon;
          switch (upperCaseTitle) {
            case 'PERFORMANCE OVERVIEW':
              Icon = FaChartLine;
              break;
            case 'TOPIC ANALYSIS':
              Icon = FaExclamationTriangle;
              break;
            case 'FOCUS AREAS':
              Icon = FaLightbulb;
              break;
            case 'NEXT STEPS': 
              Icon = FaCheckCircle;
              break;
            default:
              Icon = FaChartLine;
          }

          return (
            <AnalysisSection 
              key={index} 
              variants={sectionVariants}
              whileHover={{ 
                scale: 1.02,
                transition: { duration: 0.2 }
              }}
            >
              <div className="section-header">
                <motion.div
                  initial={{ rotate: 0 }}
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, delay: index * 0.3 }}
                >
                  <Icon className="section-icon" />
                </motion.div>
                <h3>{upperCaseTitle}</h3>
              </div>
              <div className="section-content">
                {contentText.split('\n').map((line, lineIndex) => {
                  const indentLevel = line.match(/^\s*/)[0].length;
                  const cleanLine = line.trim();
                  if (!cleanLine) return null;
                  
                  return (
                    <p 
                      key={lineIndex} 
                      className={`content-line indent-${indentLevel}`}
                      style={{ 
                        overflowWrap: 'break-word',
                        wordWrap: 'break-word',
                        hyphens: 'auto'
                      }}
                    >
                      {processBoldText(cleanLine)}
                    </p>
                  );
                })}
              </div>
            </AnalysisSection>
          );
        })}
      </div>
    </PerformanceAnalysisContainer>
  );
};

const AnalyticsContainer = styled(motion.div)`
  margin: 20px auto;
  padding: 20px;
  background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  max-width: 1200px;
  width: 100%;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
`;

const AnalyticsTitle = styled.h3`
  font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #ffffff;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  text-align: center;

  svg {
    color: #4a90e2;
  }
`;

const LessonGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  width: 100%;
  justify-content: center;
`;

const LessonCard = styled(motion.div)`
  background: linear-gradient(145deg, #1f1f1f, #242424);
  padding: 1.2rem;
  border-radius: 12px;
  border: 1px solid #383838;
  transition: all 0.3s ease;
  flex: 0 1 300px;  
  min-width: 250px; 
  max-width: 350px; 

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    border-color: ${props => props.percentage >= 70 
      ? '#4caf50' 
      : props.percentage >= 40 
      ? '#ff9800' 
      : '#f44336'};
  }
`;

const LessonHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
`;

const LessonName = styled.h4`
  font-weight: 500;
  margin: 0;
  color: #ffffff;
  font-size: 1.1rem;
`;

const LessonScore = styled.span`
  font-size: 0.9rem;
  font-weight: 600;
  color: ${props => props.percentage >= 70 
    ? '#4caf50' 
    : props.percentage >= 40 
    ? '#ff9800' 
    : '#f44336'};
  background-color: ${props => props.percentage >= 70 
    ? 'rgba(76, 175, 80, 0.1)' 
    : props.percentage >= 40 
    ? 'rgba(255, 152, 0, 0.1)' 
    : 'rgba(244, 67, 54, 0.1)'};
  padding: 4px 8px;
  border-radius: 6px;
`;

const ProgressBarBg = styled.div`
  width: 100%;
  height: 8px;
  background-color: #2a2a2a;
  border-radius: 999px;
  overflow: hidden;
`;

const ProgressBarFill = styled.div`
  height: 100%;
  background: ${props => props.percentage >= 70 
    ? 'linear-gradient(90deg, #4caf50, #81c784)'
    : props.percentage >= 40 
    ? 'linear-gradient(90deg, #ff9800, #ffb74d)'
    : 'linear-gradient(90deg, #f44336, #e57373)'};
  border-radius: 999px;
  transition: width 0.5s ease, background-color 0.3s ease;
`;

const LessonAnalytics = ({ lessonAnalytics }) => {
  if (!lessonAnalytics) return null;

  return (
    <AnalyticsContainer
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <AnalyticsTitle>
        <FaChartLine />
        LESSON-WISE ANALYSIS
      </AnalyticsTitle>
      <LessonGrid>
        {Object.entries(lessonAnalytics).map(([lessonId, data]) => (
          <LessonCard 
            key={lessonId}
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          >
            <LessonHeader>
              <LessonName>{data.lesson_name}</LessonName>
              <LessonScore percentage={data.percentage}>
                {data.questions_correct}/{data.questions_total} ({Math.round(data.percentage)}%)
              </LessonScore>
            </LessonHeader>
            <ProgressBarBg>
              <ProgressBarFill
                percentage={data.percentage}
                style={{ width: `${data.percentage}%` }}
              />
            </ProgressBarBg>
          </LessonCard>
        ))}
      </LessonGrid>
    </AnalyticsContainer>
  );
};

const OptionsList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  margin: 1rem 0;
`;

const Option = styled.div`
  padding: 1.2rem 1.5rem;
  border-radius: 8px;
  background: ${props => {
    if (props.$isCorrect) return 'rgba(76, 175, 80, 0.12)';
    if (props.$isWrong) return 'rgba(244, 67, 54, 0.12)';
    return 'rgba(255, 255, 255, 0.02)';
  }};
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  border: 1px solid ${props => {
    if (props.$isCorrect) return '#4caf50';
    if (props.$isWrong) return '#f44336';
    return 'rgba(255, 255, 255, 0.1)';
  }};
  color: ${props => {
    if (props.$isCorrect) return '#4caf50';
    if (props.$isWrong) return '#f44336';
    return '#ffffff';
  }};
  position: relative;
  padding-right: ${props => (props.$isSelected || props.$isCorrect || props.$isWrong) ? '3.5rem' : '1.5rem'};
  font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
  font-size: 1.1rem;
  line-height: 1.5;
  letter-spacing: 0.2px;
  font-weight: 500;
  
  ${props => props.$isWrong && `
    &::after {
      content: '✗';
      position: absolute;
      right: 1.5rem;
      top: 50%;
      transform: translateY(-50%);
      color: #f44336;
      font-weight: bold;
      font-size: 1.4rem;
    }
  `}
  
  ${props => props.$isCorrect && `
    &::after {
      content: '✓';
      position: absolute;
      right: 1.5rem;
      top: 50%;
      transform: translateY(-50%);
      color: #4caf50;
      font-weight: bold;
      font-size: 1.4rem;
    }
  `}

  transition: all 0.2s ease;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  
  &:hover {
    background: ${props => {
      if (props.$isCorrect) return 'rgba(76, 175, 80, 0.18)';
      if (props.$isWrong) return 'rgba(244, 67, 54, 0.18)';
      return 'rgba(255, 255, 255, 0.08)';
    }};
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const ExamResultsWrapper = styled.div`
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding-top: 40px;
  transition: margin-left 0.3s ease-in-out;
  margin-left: 80px;
  font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
  letter-spacing: 0.2px;
  * {
    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
  }

  h1 {
    font-weight: 700;
    font-size: 2.2rem;
    letter-spacing: -0.5px;
    color: #ffffff;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    background: linear-gradient(135deg, #ffffff 0%, #b3b3b3 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .sidebar:hover ~ & {
    margin-left: 220px;
  }

  @media (max-width: 768px) {
    margin-left: 0;
    padding-top: 20px;
  }
`;

const ExamResultsContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  transition: all 0.3s ease-in-out;
  transform-origin: bottom center;
  width: 100%;

  .question-result {
    margin-bottom: 3rem;
    background: rgba(255, 255, 255, 0.03);
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    
    h3 {
      font-size: 1.4rem;
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 1.5rem;
      line-height: 1.4;
      letter-spacing: 0.2px;
    }

    .solution-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      margin-top: 1.5rem;
      border: 1px solid rgba(255, 255, 255, 0.08);

      h4 {
        font-size: 1.2rem;
        font-weight: 600;
        color: #e0e0e0;
        margin-bottom: 1rem;
        letter-spacing: 0.2px;
        text-transform: uppercase;
      }

      p {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #ffffff;
        letter-spacing: 0.2px;
        font-weight: 400;
      }
    }
  }

  @media (max-width: 768px) {
    padding: 1rem;
    margin-bottom: 60px;
  }
`;

const ExamIdSection = styled.div`
  background: #1a1a1a;
  border-radius: 12px;
  padding: 1.5rem;
  margin: 1.5rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const ExamIdTitle = styled.h3`
  margin: 0;
  color: #667eea;
  font-size: 1.5rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.8rem;
  letter-spacing: -0.3px;
  text-transform: uppercase;

  svg {
    font-size: 1.6rem;
  }
`;

const ExamIdContent = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
  justify-content: center;
`;

const ExamIdLabel = styled.div`
  color: #b0b0b0;
  font-size: 0.9rem;
`;

const ResultsSummaryCard = styled(motion.div)`
  background: linear-gradient(135deg, #1E1E1E 0%, #2D2D2D 100%);
  border-radius: 24px;
  padding: 3rem;
  margin: 1rem auto;
  max-width: 900px;
  position: relative;
  overflow: hidden;
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.5),
    0 0 0 1px rgba(255, 255, 255, 0.1);
  transform-style: preserve-3d;
  perspective: 1000px;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 
      0 30px 60px -15px rgba(0, 0, 0, 0.6),
      0 0 0 1px rgba(255, 255, 255, 0.15);
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: ${props => props.percentage >= 70 
      ? 'linear-gradient(90deg, #4CAF50, #81C784)'
      : props.percentage >= 40 
      ? 'linear-gradient(90deg, #FF9800, #FFB74D)'
      : 'linear-gradient(90deg, #F44336, #E57373)'};
  }
`;

const ResultsContent = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 4rem;
  
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 2rem;
  }
`;

const CircularProgress = styled(motion.div)`
  position: relative;
  width: 280px;
  height: 280px;
  background: linear-gradient(145deg, #1f1f1f, #242424);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 
    inset 0 0 50px rgba(0,0,0,0.3),
    0 0 30px rgba(0,0,0,0.2);
  transform-style: preserve-3d;
  transition: all 0.3s ease;
  cursor: pointer;

  &:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 
      inset 0 0 60px rgba(0,0,0,0.4),
      0 20px 40px rgba(0,0,0,0.3);
  }

  &::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: conic-gradient(
      ${props => props.percentage >= 70 
        ? '#4CAF50'
        : props.percentage >= 40 
        ? '#FF9800'
        : '#F44336'} 
      ${props => props.percentage}%, 
      #333 0
    );
    mask: radial-gradient(transparent 65%, black 66%);
    -webkit-mask: radial-gradient(transparent 65%, black 66%);
    transition: filter 0.3s ease;
  }

  &:hover::before {
    filter: brightness(1.1);
  }

  &::after {
    content: '';
    position: absolute;
    top: 10px;
    left: 10px;
    right: 10px;
    bottom: 10px;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
    filter: blur(2px);
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }

  &:hover::after {
    opacity: 0.7;
  }

  @media (max-width: 768px) {
    width: 220px;
    height: 220px;
  }
`;

const ScoreDisplay = styled.div`
  text-align: center;
  position: relative;
  z-index: 1;
  background: linear-gradient(145deg, #1a1a1a, #222);
  padding: 2rem;
  border-radius: 50%;
  width: 75%;
  height: 75%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-shadow: inset 0 2px 4px rgba(255,255,255,0.1);
  transform-style: preserve-3d;
  transition: all 0.3s ease;

  ${CircularProgress}:hover & {
    transform: translateZ(20px);
    box-shadow: 
      inset 0 2px 4px rgba(255,255,255,0.15),
      0 10px 20px rgba(0,0,0,0.2);
  }

  .percentage {
    font-size: 4.5rem;
    font-weight: 800;
    background: ${props => props.percentage >= 70 
      ? 'linear-gradient(to bottom right, #fff, #4CAF50)'
      : props.percentage >= 40 
      ? 'linear-gradient(to bottom right, #fff, #FF9800)'
      : 'linear-gradient(to bottom right, #fff, #F44336)'};
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    line-height: 1;
    margin-bottom: 0.5rem;
    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
    position: relative;
    display: flex;
    align-items: center;
    transition: transform 0.3s ease;
    
    ${CircularProgress}:hover & {
      transform: scale(1.05);
    }
    
    &::after {
      content: '%';
      font-size: 2rem;
      margin-left: 0.3rem;
      opacity: 0.8;
      background: inherit;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
  }

  .score {
    font-size: 1.4rem;
    color: #666;
    font-weight: 600;
    margin-top: 0.5rem;
    letter-spacing: 1px;
    transition: color 0.3s ease;

    ${CircularProgress}:hover & {
      color: #888;
    }
  }

  @media (max-width: 768px) {
    padding: 1.5rem;
    
    .percentage {
      font-size: 3.5rem;
      
      &::after {
        font-size: 1.6rem;
      }
    }
    
    .score {
      font-size: 1.2rem;
    }
  }
`;

const StatsContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 2rem;
  padding-left: 2rem;
  border-left: 2px solid rgba(255, 255, 255, 0.1);

  @media (max-width: 768px) {
    padding-left: 0;
    border-left: none;
    border-top: 2px solid rgba(255, 255, 255, 0.1);
    padding-top: 2rem;
  }
`;

const StatBox = styled.div`
  background: rgba(255, 255, 255, 0.03);
  padding: 1.5rem;
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.06);
  transform-style: preserve-3d;
  transition: all 0.3s ease;
  cursor: pointer;
  text-align: center;

  &:hover {
    transform: translateY(-5px) rotateX(2deg) rotateY(-2deg);
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 15px 30px -10px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  .label {
    font-size: 1rem;
    color: #888;
    text-transform: uppercase;
    letter-spacing: 1.5px;
    margin-bottom: 0.5rem;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .value {
    font-size: 2.2rem;
    font-weight: 700;
    color: #FFF;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: transform 0.3s ease;
  }

  .subtitle {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
    transition: color 0.3s ease;
  }

  &:hover .label {
    color: #aaa;
  }

  &:hover .value {
    transform: translateZ(10px);
  }

  &:hover .subtitle {
    color: #888;
  }
`;

const GradeIndicator = styled.div`
  font-size: 3.5rem;
  font-weight: 800;
  color: ${props => props.percentage >= 70 
    ? '#4CAF50'
    : props.percentage >= 40 
    ? '#FF9800'
    : '#F44336'};
  text-shadow: 0 0 20px ${props => props.percentage >= 70 
    ? 'rgba(76, 175, 80, 0.3)'
    : props.percentage >= 40 
    ? 'rgba(255, 152, 0, 0.3)'
    : 'rgba(244, 67, 54, 0.3)'};
  transition: all 0.3s ease;

  ${StatBox}:hover & {
    transform: translateZ(15px);
    text-shadow: 0 0 30px ${props => props.percentage >= 70 
      ? 'rgba(76, 175, 80, 0.5)'
      : props.percentage >= 40 
      ? 'rgba(255, 152, 0, 0.5)'
      : 'rgba(244, 67, 54, 0.5)'};
  }
`;

const ExamResults = () => {
  const { id } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const [results, setResults] = useState(null);
  const [examData, setExamData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchResults = async () => {
      setIsLoading(true);
      try {
        if (location.state && location.state.results) {
          setResults(location.state.results);
          setExamData(location.state);
        } else {
          const examData = await api.getExam(id);

          if (!examData.is_submitted) {
            navigate(`/exam/g/${id}`);
            return;
          }

          setExamData(examData);
          setResults(examData.results);
        }
      } catch (error) {
        console.error('Error fetching results:', error);
        if (error.message === 'Unauthorized access') {
          navigate('/login');
        }
        setResults(null);
        setExamData(null);
      } finally {
        setIsLoading(false);
      }
    };

    fetchResults();
  }, [id, navigate, location.state]);

  if (isLoading) {
    return (
      <ExamResultsWrapper>
        <ExamResultsContainer>
          <h1 style={{ textAlign: 'center' }}>Exam Results</h1>
          <div className="results-summary skeleton">
            <div className="skeleton-text" style={{ width: '40%', height: '24px', marginBottom: '10px' }}></div>
            <div className="skeleton-text" style={{ width: '60%', height: '24px' }}></div>
          </div>
          {[...Array(5)].map((_, index) => (
            <ResultSkeleton key={index} />
          ))}
        </ExamResultsContainer>
      </ExamResultsWrapper>
    );
  }

  if (!results) {
    return (
      <ExamResultsWrapper>
        <ExamResultsContainer className="no-results">
          No results found.
        </ExamResultsContainer>
      </ExamResultsWrapper>
    );
  }

  return (
    <ExamResultsWrapper>
      <ExamResultsContainer>
        <h1 style={{ textAlign: 'center' }}>Exam Results</h1>
        
        <ResultsSummaryCard
          percentage={results.filter(r => r.is_correct).length / results.length * 100}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <ResultsContent>
            <CircularProgress
              percentage={results.filter(r => r.is_correct).length / results.length * 100}
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.8, delay: 0.2 }}
            >
              <ScoreDisplay percentage={results.filter(r => r.is_correct).length / results.length * 100}>
                <div className="percentage">
                  {Math.round(results.filter(r => r.is_correct).length / results.length * 100)}
                </div>
                <div className="score">
                  {results.filter(r => r.is_correct).length} / {results.length}
                </div>
              </ScoreDisplay>
            </CircularProgress>

            <StatsContainer>
              <StatBox>
                <div className="label">Performance Grade</div>
                <div className="value" style={{ flexDirection: 'column', gap: '0.3rem' }}>
                  <GradeIndicator percentage={results.filter(r => r.is_correct).length / results.length * 100}>
                    {results.filter(r => r.is_correct).length / results.length * 100 >= 70 
                      ? 'A' 
                      : results.filter(r => r.is_correct).length / results.length * 100 >= 40 
                      ? 'B' 
                      : 'C'}
                  </GradeIndicator>
                  <span style={{ fontSize: '1.2rem', color: '#666' }}>
                    {results.filter(r => r.is_correct).length / results.length * 100 >= 70 
                      ? 'Excellent' 
                      : results.filter(r => r.is_correct).length / results.length * 100 >= 40 
                      ? 'Good' 
                      : 'Needs Improvement'}
                  </span>
                </div>
              </StatBox>

              <StatBox>
                <div className="label">Lessons Attempted</div>
                <div className="value" style={{ justifyContent: 'center', fontSize: '2.5rem' }}>
                  {examData?.lesson_analytics ? Object.keys(examData.lesson_analytics).length : 0}
                </div>
                <div className="subtitle" style={{ fontSize: '1.1rem', color: '#888', marginTop: '0.8rem' }}>
                  Topics Covered in Exam
                </div>
              </StatBox>
            </StatsContainer>
          </ResultsContent>
        </ResultsSummaryCard>

        {examData && examData['exam-id'] && (
          <ExamIdSection>
            <ExamIdTitle>
              <FaChartLine />
              Exam Details
            </ExamIdTitle>
            <ExamIdContent>
              <ExamIdLabel>Exam ID:</ExamIdLabel>
              <CopyableExamId examId={examData['exam-id']} />
            </ExamIdContent>
          </ExamIdSection>
        )}

        {examData?.lesson_analytics && (
          <LessonAnalytics lessonAnalytics={examData.lesson_analytics} />
        )}

        {examData?.performance_analysis && (
          <PerformanceAnalysis analysis={examData.performance_analysis} />
        )}

        {results.map((result) => {
          const questionData = examData.questions.find(q => q.question === result.question);
          
          console.log('Result:', {
            question: result.question,
            selected_answer: result.selected_answer,
            is_correct: result.is_correct,
            correct_answer: result.correct_answer
          });
          
          console.log('QuestionData:', {
            question: questionData.question,
            answer: questionData.answer,
            options: questionData.options
          });

          return (
            <div key={result['question-no']} className={`question-result ${result.is_correct ? 'correct' : 'incorrect'}`}>
              <h3>{result['question-no']}. {result.question}</h3>
              
              <OptionsList>
                {['a', 'b', 'c', 'd'].map((optionKey) => {
                  const optionText = questionData.options[optionKey];
                  const fullOptionText = `${optionKey.toUpperCase()}) ${optionText}`;
                  
                  // Check if this option was selected by the user (case-insensitive comparison)
                  const isSelectedOption = result.selected_answer.toLowerCase() === `${optionKey}) ${optionText}`.toLowerCase();
                  
                  // Check if this is the correct option
                  const isCorrectOption = questionData.answer.toLowerCase() === optionKey;
                  
                  // Mark an option as wrong if it was selected AND it's not the correct option
                  const isWrongOption = isSelectedOption && !isCorrectOption;

                  return (
                    <Option
                      key={optionKey}
                      $isSelected={isSelectedOption}
                      $isCorrect={isCorrectOption}
                      $isWrong={isWrongOption}
                    >
                      {fullOptionText}
                    </Option>
                  );
                })}
              </OptionsList>

              {!result.is_correct && (
                <div className="solution-card">
                  <h4>Solution:</h4>
                  <p>{result.solution}</p>
                </div>
              )}
            </div>
          );
        })}
      </ExamResultsContainer>
    </ExamResultsWrapper>
  );
};

export default ExamResults;

--------------------------------------------------------------------------------
File: src\components\ExamSkeletonLoading.jsx
--------------------------------------------------------------------------------

// components/ExamSkeletonLoading.jsx
import React from 'react';

const ExamSkeletonLoading = () => {
  return (
    <div className="exam-skeleton-container">
      {[1, 2, 3, 4].map((item) => (
        <div key={item} className="exam-skeleton-card">
          <div className="exam-skeleton-question"></div>
          <div className="exam-skeleton-options">
            <div className="exam-skeleton-option"></div>
            <div className="exam-skeleton-option"></div>
            <div className="exam-skeleton-option"></div>
            <div className="exam-skeleton-option"></div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default ExamSkeletonLoading;

--------------------------------------------------------------------------------
File: src\components\ExamTaking.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FaExclamationCircle, FaChartLine } from 'react-icons/fa';
import { AiOutlineLoading3Quarters } from 'react-icons/ai';
import { BsCheckCircleFill } from 'react-icons/bs';
import { motion, AnimatePresence } from 'framer-motion';
import styled from 'styled-components';
import CopyableExamId from './CopyableExamId';
import { api } from '../utils/api';
import 'katex/dist/katex.min.css';
import { InlineMath, BlockMath } from 'react-katex';

const ExamWrapper = styled.div`
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  padding-top: 60px; /* Account for header */
  transition: margin-left 0.3s ease-in-out;
  margin-left: 70px;

  .sidebar:hover ~ & {
    margin-left: 220px;
  }

  @media (max-width: 768px) {
    margin-left: 0;
  }
`;

const ExamContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  width: 100%;
  transition: all 0.3s ease-in-out;

  @media (max-width: 768px) {
    padding: 1rem;
    margin-bottom: 60px;
  }

  -webkit-tap-highlight-color: transparent;
  * {
    -webkit-tap-highlight-color: transparent;
  }
`;

const OptionContainer = styled(motion.div)`
  -webkit-tap-highlight-color: transparent;
  user-select: none;
`;

const ReportButton = styled(motion.button)`
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-touch-callout: none;
  height: 32px;
  
  &:disabled {
    cursor: default;
  }
`;

const iconStyles = {
  fontSize: '1.2rem',
};

const questionCardVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.3 },
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: { duration: 0.2 },
  },
};

const buttonVariants = {
  hidden: { opacity: 0, scale: 0.8, y: 50 },
  visible: (index) => ({
    opacity: 1,
    scale: 1,
    y: 0,
    transition: {
      duration: 0.8,
      delay: index * 0.2,
      type: 'spring',
      stiffness: 100,
      damping: 15,
    },
  }),
};

const fadeTransition = {
  hidden: {
    opacity: 0,
    scale: 0.95,
    filter: 'blur(10px)',
  },
  visible: {
    opacity: 1,
    scale: 1,
    filter: 'blur(0px)',
    transition: {
      duration: 0.5,
      ease: 'easeOut',
    },
  },
  exit: {
    opacity: 0,
    scale: 1.05,
    filter: 'blur(10px)',
    transition: {
      duration: 0.3,
      ease: 'easeIn',
    },
  },
};

const notificationVariants = {
  hidden: { opacity: 0, y: -50 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { type: 'spring', stiffness: 300, damping: 25 },
  },
  exit: {
    opacity: 0,
    y: -50,
    transition: { duration: 0.2 },
  },
};

const particleVariants = {
  animate: (i) => ({
    y: [0, -15, 0],
    x: [0, Math.sin(i * Math.PI) * 10, 0],
    opacity: [0.8, 1, 0.8],
    scale: [1, 1.2, 1],
    transition: {
      duration: 2,
      repeat: Infinity,
      delay: i * 0.2,
    }
  })
};

const IconContainer = ({ status, index }) => {
  return (
    <motion.div
      initial={{ scale: 0.8 }}
      animate={{ scale: 1 }}
      exit={{ scale: 0.8 }}
      transition={{ duration: 0.2 }}
    >
      {status === index ? (
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
        >
          <AiOutlineLoading3Quarters
            style={{ ...iconStyles, color: '#666' }}
          />
        </motion.div>
      ) : status === `${index}-done` ? (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', stiffness: 300, damping: 25 }}
        >
          <BsCheckCircleFill
            style={{ ...iconStyles, color: '#22c55e' }}
          />
        </motion.div>
      ) : (
        <motion.div
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <FaExclamationCircle
            style={{ ...iconStyles, color: '#dc2626' }}
          />
        </motion.div>
      )}
    </motion.div>
  );
};

const ExamIdSection = styled.div`
  background: #1a1a1a;
  border-radius: 12px;
  padding: 1.5rem;
  margin: 1.5rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const ExamIdTitle = styled.h3`
  margin: 0;
  color: #667eea;
  font-size: 1.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  svg {
    font-size: 1.4rem;
  }
`;

const ExamIdContent = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
  justify-content: center;
`;

const ExamIdLabel = styled.div`
  color: #b0b0b0;
  font-size: 0.9rem;
`;

const ExamHeader = styled.div`
  background: #1a1a1a;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
  text-align: center;
`;

const ExamTitle = styled.h1`
  margin: 0 0 1rem 0;
  color: #ffffff;
  font-size: 2rem;
  font-weight: 600;
`;

const LessonsContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center;
  margin-top: 1rem;
`;

const LessonTag = styled.span`
  background-color: rgba(102, 126, 234, 0.1);
  color: #667eea;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  font-size: 0.9rem;
  border: 1px solid rgba(102, 126, 234, 0.2);
  transition: all 0.2s ease;

  &:hover {
    background-color: rgba(102, 126, 234, 0.15);
    border-color: rgba(102, 126, 234, 0.3);
    transform: translateY(-1px);
  }
`;

const QuestionCard = styled(motion.div)`
  background: #1a1a1a;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  position: relative;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const QuestionHeader = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1.5rem;
  padding-right: 3rem;
`;

const QuestionTextContainer = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 1rem;
`;

const QuestionNumber = styled.div`
  position: absolute;
  top: -12px;
  left: -12px;
  background: #2196f3;
  color: white;
  width: 35px;
  height: 35px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  z-index: 1;
`;

const QuestionText = styled.h3`
  color: #ffffff;
  font-size: 1.2rem;
  font-weight: 500;
  margin: 0;
  line-height: 1.5;
  padding-top: 4px;
  flex: 1;

  .katex {
    font-size: 1.1em;
    line-height: 1.2;
  }
`;

// Table styled components
const TableContainer = styled.div`
  margin: 1rem 0;
  overflow-x: auto;
  background: rgba(255, 255, 255, 0.03);
  border-radius: 8px;
  padding: 1rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  color: #ffffff;
  font-size: 1rem;
`;

const TableHeader = styled.th`
  background: rgba(79, 172, 254, 0.1);
  padding: 0.75rem 1rem;
  text-align: left;
  border: 1px solid rgba(255, 255, 255, 0.1);
  font-weight: 600;
`;

const TableCell = styled.td`
  padding: 0.75rem 1rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const TableRow = styled.tr`
  &:nth-child(even) {
    background: rgba(255, 255, 255, 0.02);
  }
  &:hover {
    background: rgba(79, 172, 254, 0.05);
  }
`;

const OptionsContainer = styled(motion.div)`
  display: grid;
  gap: 1rem;
  margin-top: 1rem;
`;

const RippleContainer = styled(motion.div)`
  position: relative;
  overflow: hidden;
  border-radius: 8px;
`;

const Ripple = styled(motion.span)`
  position: absolute;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  transform: translate(-50%, -50%);
  pointer-events: none;
`;

const Option = styled(motion.div)`
  background: rgba(255, 255, 255, 0.05);
  padding: 1rem 1.2rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.2s ease, border-color 0.2s ease;
  transform: scale(1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #ffffff;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-touch-callout: none;
  position: relative;
  overflow: hidden;

  &:hover {
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }

  &.selected {
    background: rgba(102, 126, 234, 0.1);
    border-color: rgba(102, 126, 234, 0.3);
    color: #667eea;
  }

  .ripple {
    position: absolute;
    border-radius: 50%;
    transform: scale(0);
    animation: ripple 0.6s linear;
    background-color: rgba(255, 255, 255, 0.2);
  }

  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
`;

// Function to parse markdown tables
const parseMarkdownTable = (text) => {
  const hasTable = text.includes('|') && text.includes('\n');
  if (!hasTable) return { text, tables: [] };

  const tables = [];
  const parts = text.split('\n');
  let currentTable = [];
  let isInTable = false;
  let textParts = [];

  parts.forEach((line, index) => {
    if (line.trim().startsWith('|')) {
      isInTable = true;
      currentTable.push(line);
    } else {
      if (isInTable && currentTable.length > 0) {
        tables.push(currentTable);
        currentTable = [];
        isInTable = false;
      }
      if (line.trim()) {
        textParts.push(line);
      }
    }
  });

  if (currentTable.length > 0) {
    tables.push(currentTable);
  }

  return {
    text: textParts.join('\n'),
    tables: tables.map(tableLines => {
      // Filter out separator rows (rows containing only dashes and pipes)
      const contentRows = tableLines.filter(line => !line.replace(/\|/g, '').trim().match(/^[-\s]+$/));
      
      const rows = contentRows.map(line => {
        // Split by | and remove first and last empty elements
        const cells = line.split('|');
        return cells.slice(1, -1).map(cell => cell.trim());
      });
      
      // First row is always headers
      const headerRow = rows[0];
      const dataRows = rows.slice(1);
      
      return {
        headers: headerRow,
        rows: dataRows
      };
    })
  };
};

// Function to process text and render LaTeX
const renderLatexText = (text) => {
  if (!text) return null;
  
  // Split text by LaTeX delimiters ($)
  const parts = text.split(/(\$[^\$]+\$)/g);
  
  return parts.map((part, index) => {
    if (part.startsWith('$') && part.endsWith('$')) {
      // Remove $ delimiters and render as LaTeX
      const latex = part.slice(1, -1);
      try {
        return <InlineMath key={index} math={latex} />;
      } catch (error) {
        console.error('LaTeX parsing error:', error);
        return part;
      }
    }
    return part;
  });
};

// Function to render a table cell with LaTeX support
const renderTableCell = (content) => {
  return <TableCell>{renderLatexText(content)}</TableCell>;
};

// Update the renderTable function to support LaTeX
const renderTable = (tableData) => {
  return (
    <TableContainer>
      <Table>
        <thead>
          <tr>
            {tableData.headers.map((header, index) => (
              <TableHeader key={index}>{renderLatexText(header)}</TableHeader>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.rows.map((row, rowIndex) => (
            <TableRow key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <TableCell key={cellIndex}>{renderLatexText(cell)}</TableCell>
              ))}
            </TableRow>
          ))}
        </tbody>
      </Table>
    </TableContainer>
  );
};

const ExamTaking = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [examData, setExamData] = useState(null);
  const [answers, setAnswers] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [reportedQuestions, setReportedQuestions] = useState(new Set());
  const [reportingQuestion, setReportingQuestion] = useState(null);

  useEffect(() => {
    const fetchExamData = async () => {
      setIsLoading(true);
      try {
        const data = await api.getExam(id);

        if (data.is_submitted) {
          navigate(`/exam/results/${id}`);
          return;
        }

        const questionsWithIds = data.questions.map((question, index) => ({
          ...question,
          uniqueId: `q${index + 1}`,
        }));
        setExamData({ ...data, questions: questionsWithIds });

        const storedAnswers = localStorage.getItem(`answers_${id}`);
        if (storedAnswers) {
          setAnswers(JSON.parse(storedAnswers));
        }
      } catch (error) {
        console.error('Error fetching exam data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchExamData();
  }, [id, navigate]);

  const handleAnswerChange = (questionId, selectedOption) => {
    setAnswers((prevAnswers) => {
      const newAnswers = { ...prevAnswers, [questionId]: selectedOption };
      console.log('Updated answers:', newAnswers); // Debug log
      localStorage.setItem(`answers_${id}`, JSON.stringify(newAnswers));
      return newAnswers;
    });
  };

  const handleSubmit = async () => {
    const unansweredQuestions = examData.questions.filter(
      (question) => !answers[question.uniqueId]
    );

    if (unansweredQuestions.length > 0) {
      setShowNotification(true);
      setTimeout(() => {
        setShowNotification(false);
      }, 2000);
      return;
    }

    setIsSubmitting(true);
    try {
      const formattedAnswers = examData.questions.map((question) => ({
        'question-no': question['question-no'],
        option: answers[question.uniqueId],
      }));

      await api.submitExam(id, { answers: formattedAnswers });
      navigate(`/exam/results/${id}`);
    } catch (error) {
      console.error('Error submitting exam:', error);
      setShowNotification(true);
      setTimeout(() => {
        setShowNotification(false);
      }, 2000);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleReportQuestion = async (questionId, questionIndex) => {
    if (reportedQuestions.has(questionId) || reportingQuestion === questionId) {
      return;
    }

    setReportingQuestion(questionId);

    try {
      await api.reportQuestion({
        examId: id,
        questionId: questionId,
        questionIndex: questionIndex + 1,
      });

      setReportedQuestions(prev => new Set([...prev, questionId]));
      setTimeout(() => {
        setReportingQuestion(`${questionId}-done`);
      }, 500);
    } catch (error) {
      console.error('Error reporting question:', error);
      setReportingQuestion(null);
    }
  };

  if (isLoading) {
    return (
      <div className="exam-skeleton-container">
        {[...Array(5)].map((_, index) => (
          <div key={index} className="exam-skeleton-card">
            <div className="exam-skeleton-question" />
            <div className="exam-skeleton-options">
              {[...Array(4)].map((_, optionIndex) => (
                <div key={optionIndex} className="exam-skeleton-option" />
              ))}
            </div>
          </div>
        ))}
        <div className="submit-btn" style={{ width: '100%', marginTop: '2rem' }}>
          <span className="spinner" aria-hidden="true"></span>
          Loading...
        </div>
      </div>
    );
  }

  if (!examData) {
    return <div>Exam not found</div>;
  }

  const lessonStyle = {
    display: 'inline-block',
    backgroundColor: '#2a2a2a',
    padding: '4px 8px',
    margin: '0 4px 4px 0',
    borderRadius: '3px',
    fontSize: '0.9em',
  };

  return (
    <ExamWrapper>
      <ExamContainer className="exam-taking-container">
        <ExamHeader>
          <ExamTitle>{examData.subject} Exam</ExamTitle>
          <LessonsContainer>
            {examData.lessons.map((lesson, index) => (
              <LessonTag key={index}>
                {lesson}
              </LessonTag>
            ))}
          </LessonsContainer>
        </ExamHeader>

        <ExamIdSection>
          <ExamIdTitle>
            <FaChartLine />
            Exam Details
          </ExamIdTitle>
          <ExamIdContent>
            <ExamIdLabel>Exam ID:</ExamIdLabel>
            <CopyableExamId examId={examData['exam-id']} />
          </ExamIdContent>
        </ExamIdSection>

        {showNotification && (
          <motion.div
            className="notification"
            variants={notificationVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            Please answer all questions before submitting.
          </motion.div>
        )}
        {examData.questions.map((question, index) => {
          const questionId = question.id || question['l-id'];
          return (
            <QuestionCard
              key={question.uniqueId}
              variants={questionCardVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              custom={index}
              transition={{ delay: index * 0.1 }}
            >
              <ReportButton
                onClick={() => handleReportQuestion(questionId, index)}
                disabled={reportedQuestions.has(questionId) || reportingQuestion === questionId}
                title={reportedQuestions.has(questionId) ? "Question reported" : "Report issue with question"}
                variants={buttonVariants}
                initial="hidden"
                animate="visible"
                custom={index}
                whileHover={!reportedQuestions.has(questionId) ? { scale: 1.1 } : {}}
                whileTap={!reportedQuestions.has(questionId) ? { scale: 0.9 } : {}}
              >
                <AnimatePresence mode="wait">
                  <motion.div
                    key={
                      reportingQuestion === questionId
                        ? 'loading'
                        : reportedQuestions.has(questionId)
                        ? 'done'
                        : 'initial'
                    }
                    variants={fadeTransition}
                    initial="hidden"
                    animate="visible"
                    exit="exit"
                  >
                    <IconContainer
                      status={reportingQuestion === questionId ? questionId : reportedQuestions.has(questionId) ? `${questionId}-done` : null}
                      index={questionId}
                    />
                  </motion.div>
                </AnimatePresence>
              </ReportButton>
              <QuestionHeader>
                <QuestionNumber>{index + 1}</QuestionNumber>
                {(() => {
                  const { text, tables } = parseMarkdownTable(question.question);
                  return (
                    <>
                      <QuestionText>{renderLatexText(text)}</QuestionText>
                      {tables.map((table, tableIndex) => renderTable(table))}
                    </>
                  );
                })()}
              </QuestionHeader>
              <OptionsContainer
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: index * 0.1 + 0.3 }}
              >
                {question.options ? (
                  Object.entries(question.options).map(([key, value], optionIndex) => {
                    const isSelected = answers[question.uniqueId] === key;
                    return (
                      <RippleContainer
                        key={key}
                        onClick={(e) => {
                          const rect = e.currentTarget.getBoundingClientRect();
                          const rippleSize = Math.max(rect.width, rect.height);
                          const x = e.clientX - rect.left;
                          const y = e.clientY - rect.top;
                          
                          const ripple = document.createElement('span');
                          ripple.style.width = ripple.style.height = `${rippleSize}px`;
                          ripple.style.left = `${x}px`;
                          ripple.style.top = `${y}px`;
                          ripple.className = 'ripple';
                          
                          e.currentTarget.appendChild(ripple);
                          
                          setTimeout(() => ripple.remove(), 1000);
                          handleAnswerChange(question.uniqueId, key);
                        }}
                      >
                        <Option
                          className={isSelected ? 'selected' : ''}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0 }}
                          transition={{
                            duration: 0.1,
                            ease: "easeOut"
                          }}
                          whileTap={{
                            scale: 0.98,
                          }}
                        >
                          {`${key.toUpperCase()}. `}{renderLatexText(value)}
                        </Option>
                      </RippleContainer>
                    );
                  })
                ) : (
                  <div>No options available for this question.</div>
                )}
              </OptionsContainer>
            </QuestionCard>
          );
        })}
        <motion.button
          className="submit-btn"
          onClick={handleSubmit}
          disabled={isSubmitting}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          style={{
            border: 'none',
            borderRadius: '8px',
            color: 'white',
            padding: '12px 24px',
            position: 'relative',
            overflow: 'hidden',
            background: '#2196f3',
            minWidth: '150px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '10px'
          }}
        >
          {isSubmitting ? (
            <>
              <motion.svg
                width="40"
                height="40"
                viewBox="0 0 50 50"
                style={{ position: 'relative' }}
              >
                {/* Background circle with wave effect */}
                <motion.circle
                  cx="25"
                  cy="25"
                  r="20"
                  fill="#2196f3"
                  animate={{
                    r: [20, 22, 20],
                    filter: [
                      'drop-shadow(0 0 2px #2196f3)',
                      'drop-shadow(0 0 8px #2196f3)',
                      'drop-shadow(0 0 2px #2196f3)'
                    ]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />

                {/* Liquid blob */}
                <motion.path
                  fill="#ffffff"
                  animate={{
                    d: [
                      "M25,15 C28,15 31,17 31,20 C31,23 28,25 25,25 C22,25 19,23 19,20 C19,17 22,15 25,15",
                      "M25,15 C29,15 33,17 33,21 C31,24 29,25 25,25 C21,25 19,24 17,21 C17,17 21,15 25,15",
                      "M25,15 C28,15 31,17 31,20 C31,23 28,25 25,25 C22,25 19,23 19,20 C19,17 22,15 25,15"
                    ],
                    opacity: [0.7, 0.9, 0.7]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />

                {/* Floating particles */}
                {[...Array(8)].map((_, i) => (
                  <motion.circle
                    key={i}
                    r={1.5}
                    fill="#ffffff"
                    custom={i}
                    variants={particleVariants}
                    animate="animate"
                    style={{
                      originX: 0.5,
                      originY: 0.5,
                    }}
                    cx={25 + Math.cos(i * Math.PI / 4) * 10}
                    cy={25 + Math.sin(i * Math.PI / 4) * 10}
                  />
                ))}

                {/* Central spinning ring */}
                <motion.circle
                  cx="25"
                  cy="25"
                  r="15"
                  fill="none"
                  stroke="rgba(255,255,255,0.5)"
                  strokeWidth="1"
                  strokeDasharray="20 20"
                  animate={{
                    rotate: [0, 360],
                  }}
                  transition={{
                    duration: 8,
                    repeat: Infinity,
                    ease: "linear"
                  }}
                />

                {/* Pulsing core */}
                <motion.circle
                  cx="25"
                  cy="25"
                  r="5"
                  fill="#ffffff"
                  animate={{
                    r: [5, 7, 5],
                    opacity: [0.5, 1, 0.5],
                  }}
                  transition={{
                    duration: 1.5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
              </motion.svg>
              <motion.span
                style={{ marginLeft: '8px' }}
                animate={{
                  opacity: [1, 0.7, 1],
                }}
                transition={{
                  duration: 1.5,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                Submitting...
              </motion.span>
            </>
          ) : (
            'Submit Exam'
          )}
        </motion.button>
      </ExamContainer>
    </ExamWrapper>
  );
};

export default ExamTaking;

--------------------------------------------------------------------------------
File: src\components\Header.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import logo from './logo512.png'; // Update this path to your logo

const Header = ({ onVisibilityChange }) => {
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  useEffect(() => {
    const controlHeader = () => {
      if (typeof window !== 'undefined') {
        if (window.scrollY > lastScrollY) {
          setIsVisible(false);
        } else {
          setIsVisible(true);
        }
        setLastScrollY(window.scrollY);
      }
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('scroll', controlHeader);

      return () => {
        window.removeEventListener('scroll', controlHeader);
      };
    }
  }, [lastScrollY]);

  useEffect(() => {
    onVisibilityChange(isVisible);
  }, [isVisible, onVisibilityChange]);
  
  return (
    <div className={`header ${isVisible ? '' : 'header--hidden'}`}>
      <img src={logo} alt="AcePlus Logo" className="header-logo" />
      <h1 className="header-text">AcePlus</h1>
    </div>
  );
};

export default Header;

--------------------------------------------------------------------------------
File: src\components\History.jsx
--------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import Notification from "./Notification";
import "./History.css";
import { api } from '../utils/api';

const SubjectIcon = ({ subject }) => {
  const icons = {
    Math: "calculator",
    Science: "flask", 
    English: "book",
    SS: "globe-americas",
    Physics: "atom",
    Chemistry: "vial",
    Biology: "dna",
    History: "landmark",
    Geography: "mountain",
    Computer: "laptop-code"
  };
  
  // No need to lowercase since we're matching exact API values
  const iconName = icons[subject] || 'graduation-cap';
  
  return (
    <div className="subject-icon">
      <i className={`fas fa-${iconName}`} aria-label={subject}></i>
    </div>
  );
};

const ProgressRing = ({ percentage }) => {
  const radius = 15;
  const circumference = 2 * Math.PI * radius;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;
  
  // Get color based on percentage
  const getColor = (percentage) => {
    if (percentage >= 80) return "#4CAF50";      // Green for excellent
    if (percentage >= 60) return "#FFC107";      // Yellow for good
    if (percentage >= 40) return "#FF9800";      // Orange for average
    return "#FF5252";                            // Red for needs improvement
  };

  const color = getColor(percentage);
  
  return (
    <div className="progress-ring">
      <svg viewBox="0 0 36 36">
        {/* Background circle */}
        <circle
          cx="18"
          cy="18"
          r={radius}
          fill="none"
          stroke="rgba(255, 255, 255, 0.1)"
          strokeWidth="3"
        />
        {/* Progress circle */}
        <circle
          cx="18"
          cy="18"
          r={radius}
          fill="none"
          stroke={color}
          strokeWidth="3"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          strokeLinecap="round"
          style={{
            transform: 'rotate(-90deg)',
            transformOrigin: '50% 50%',
            transition: 'stroke-dashoffset 0.5s ease-in-out'
          }}
        />
        {/* Percentage text */}
        <text
          x="18"
          y="18"
          fill="white"
          fontSize="10"
          fontWeight="bold"
          dominantBaseline="middle"
          textAnchor="middle"
        >
          {Math.round(percentage)}%
        </text>
      </svg>
    </div>
  );
};

const HistoryCard = ({ exam, onClick }) => {
  const formatDate = (dateString) => {
    try {
      // Split the date string into components
      const [day, month, year] = dateString.split('-');
      // Create date object (month - 1 because months are 0-indexed)
      const date = new Date(year, month - 1, day);
      
      if (isNaN(date.getTime())) {
        return 'Invalid date';
      }
      
      // Format as relative time if less than 7 days old
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays <= 7) {
        if (diffDays === 0) return 'Today';
        if (diffDays === 1) return 'Yesterday';
        return `${diffDays} days ago`;
      }
      
      // Otherwise format as date
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    } catch (error) {
      console.error('Date parsing error:', error);
      return 'Invalid date';
    }
  };

  return (
    <motion.div
      className="exam-card"
      onClick={() => onClick(exam["exam-id"])}
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      whileHover={{ 
        scale: 1.02,
        y: -5,
        boxShadow: "0 8px 20px rgba(0, 0, 0, 0.3)",
        transition: {
          type: "spring",
          stiffness: 200,
          damping: 25
        },
        "@media (max-width: 768px)": {
          scale: 1.01,  // Smaller scale effect on mobile
          y: -2,  // Smaller lift effect
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.2)"  // Subtler shadow
        }
      }}
      whileTap={{ scale: 0.98 }}
      layout="position"
      transition={{
        layout: {
          type: "spring",
          stiffness: 200,
          damping: 25
        }
      }}
      style={{
        touchAction: "pan-x pan-y"  // Improve touch behavior
      }}
    >
      <div className="exam-card-header">
        <div className="subject-icon">
          <SubjectIcon subject={exam.subject} />
        </div>
        <div className="exam-info">
          <h3>{exam.subject}</h3>
          <span className="exam-date">{formatDate(exam.date)}</span>
        </div>
        <ProgressRing percentage={Math.round(exam.percentage)} />
      </div>
      <div className="exam-card-details">
        <div className="detail-grid">
          <div className="detail-item">
            <span className="detail-label">Questions</span>
            <span className="detail-value">{exam.totalQuestions}</span>
          </div>
          <div className="detail-item">
            <span className="detail-label">Correct</span>
            <span className="detail-value">{exam.score}</span>
          </div>
          <div className="detail-item">
            <span className="detail-label">Lessons</span>
            <span className="detail-value">
              {Array.isArray(exam.lessons) ? exam.lessons.length : exam.lessons}
            </span>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

const HistoryCardSkeleton = () => (
  <div className="exam-card skeleton">
    <div className="exam-card-header">
      <div className="subject-icon skeleton-circle"></div>
      <div className="exam-info">
        <div className="skeleton-text"></div>
        <div className="skeleton-text"></div>
      </div>
      <div className="skeleton-circle"></div>
    </div>
    <div className="exam-card-details">
      <div className="detail-grid">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="detail-item">
            <div className="skeleton-text"></div>
            <div className="skeleton-text"></div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

const FilterTab = ({ subject, active, onClick }) => (
  <motion.button
    className={`filter-tab ${active ? 'active' : ''}`}
    onClick={onClick}
    whileHover={{ 
      scale: 1.05,
      transition: {
        type: "spring",
        stiffness: 200,
        damping: 20
      }
    }}
    whileTap={{ scale: 0.95 }}
    initial={{ opacity: 0, scale: 0.95 }}
    animate={{ 
      opacity: 1,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 200,
        damping: 25,
        mass: 1
      }
    }}
  >
    <SubjectIcon subject={subject} />
    <span>{subject}</span>
  </motion.button>
);

const History = () => {
  const [examHistory, setExamHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('All');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchExamHistory = async () => {
      try {
        const data = await api.getUserExams();
        setExamHistory(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchExamHistory();
  }, [navigate]);

  const handleExamClick = (examId) => {
    navigate(`/exam/results/${examId}`);
  };

  const filteredExams = examHistory.filter(exam => {
    if (filter === 'All') return true;
    return exam.subject === filter;  // Exact match with API subject
  });

  const subjects = ['All', ...new Set(examHistory.map(exam => exam.subject))];

  return (
    <motion.div 
      className="history-container"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div 
        className="history-header"
        initial={{ y: -20 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1>Your Learning Journey</h1>
        {!loading && examHistory.length > 0 && (
          <div className="filter-tabs">
            {subjects.map(subject => (
              <FilterTab
                key={subject}
                subject={subject}
                active={filter === subject}
                onClick={() => setFilter(subject)}
              />
            ))}
          </div>
        )}
      </motion.div>

      {error && <Notification message={error} />}

      <AnimatePresence mode="wait">
        <motion.div 
          className="exam-grid"
          layout="position"
          style={{ overflow: "hidden" }}
          transition={{
            layout: {
              type: "spring",
              stiffness: 200,
              damping: 25,
              mass: 1
            }
          }}
        >
          {loading ? (
            Array(6).fill().map((_, index) => (
              <HistoryCardSkeleton key={`skeleton-${index}`} />
            ))
          ) : examHistory.length > 0 ? (
            <AnimatePresence mode="popLayout">
              {filteredExams
                .slice()
                .reverse()
                .map((exam, index) => (
                  <motion.div
                    key={`${exam["exam-id"]}-${index}`}
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ 
                      opacity: 1,
                      scale: 1,
                      transition: {
                        type: "spring",
                        stiffness: 200,
                        damping: 25,
                        mass: 1,
                        delay: index * 0.03
                      }
                    }}
                    exit={{ 
                      opacity: 0,
                      scale: 0.95,
                      transition: {
                        duration: 0.2,
                        ease: "easeInOut"
                      }
                    }}
                    layout="position"
                    transition={{
                      layout: {
                        type: "spring",
                        stiffness: 200,
                        damping: 25,
                        mass: 1
                      }
                    }}
                    style={{ 
                      width: "100%",
                      height: "100%",
                      position: "relative"
                    }}
                  >
                    <HistoryCard
                      exam={exam}
                      onClick={handleExamClick}
                    />
                  </motion.div>
                ))}
            </AnimatePresence>
          ) : (
            <motion.div 
              className="empty-state"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              transition={{ type: "spring", duration: 0.6 }}
            >
              <div className="empty-state-icon">
                <i className="fas fa-graduation-cap"></i>
              </div>
              <h2>Start Your Learning Journey</h2>
              <p>Take your first exam to see your progress here!</p>
            </motion.div>
          )}
        </motion.div>
      </AnimatePresence>
    </motion.div>
  );
};

export default History;


--------------------------------------------------------------------------------
File: src\components\LandingPage.jsx
--------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence, useScroll } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import './LandingPage.css';

const features = [
  {
    title: "Smart Exam Creation",
    description: "Tailor-made exams based on your chosen subjects and lessons.",
    icon: "📚"
  },
  {
    title: "AI-Powered Analysis",
    description: "Get detailed performance insights and personalized AI solutions for every question, helping you learn from mistakes and improve faster.",
    icon: "🤖"
  },
  {
    title: "Subject-wise Performance", 
    description: "Track progress across subjects and improve your weakest subjects.",
    icon: "⭐"
  },
  {
    title: "Monthly Leaderboard",
    description: "Compete with peers and track your standing in your division.",
    icon: "🏆"
  }
];

const LandingPage = () => {
  const navigate = useNavigate();
  const { scrollYProgress } = useScroll();
  const [isVisible, setIsVisible] = useState(false);

  const [featuresRef, featuresInView] = useInView({
    triggerOnce: true,
    threshold: 0.2
  });

  useEffect(() => {
    // Hide bottom nav when landing page mounts
    const bottomNav = document.querySelector('.bottom-nav');
    if (bottomNav) {
      bottomNav.style.display = 'none';
    }

    // Show bottom nav when component unmounts
    return () => {
      if (bottomNav) {
        bottomNav.style.display = 'block';
      }
    };
  }, []);

  useEffect(() => {
    const visited = localStorage.getItem('hasVisitedBefore');
    if (visited) {
      navigate('/login');
    }
  }, [navigate]);

  const handleGetStarted = () => {
    localStorage.setItem('hasVisitedBefore', 'true');
    navigate('/login');
  };

  useEffect(() => {
    const toggleVisibility = () => {
      setIsVisible(window.pageYOffset > 300);
    };

    window.addEventListener('scroll', toggleVisibility);
    return () => window.removeEventListener('scroll', toggleVisibility);
  }, []);

  return ( 
    <div className="landing-container">
      <motion.div 
        className="progress-bar"
        style={{ scaleX: scrollYProgress }}
      />

      <nav className="landing-nav">
        <motion.div 
          className="logo"
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          AcePlus
        </motion.div>
      </nav>

      <main className="landing-main">
        <section className="hero-section">
          <motion.div 
            className="hero-content"
            initial={{ y: -50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.2 }}
          >
            <h1>Elevate Your Learning with AcePlus</h1>
            <p>Empowering students of Holy Angels School with AI-driven exam preparation</p>
            <motion.button 
              className="get-started-btn"
              onClick={handleGetStarted}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              Get Started
              <span className="arrow-icon">→</span>
            </motion.button>
          </motion.div>
          
          <motion.div
            className="scroll-indicator"
            animate={{ y: [0, 10, 0] }}
            transition={{ repeat: Infinity, duration: 1.5 }}
          >
            ↓
          </motion.div>
        </section>

        <motion.section 
          ref={featuresRef}
          className="features-section"
        >
          <motion.h2 
            initial={{ opacity: 0, y: 30 }}
            animate={featuresInView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.6 }}
          >
            Key Features
          </motion.h2>
          
          <div className="features-grid">
            {features.map((feature, index) => (
              <motion.div 
                key={feature.title}
                className="feature-card"
                initial={{ opacity: 0, y: 50, scale: 0.9 }}
                animate={featuresInView ? { 
                  opacity: 1, 
                  y: 0, 
                  scale: 1 
                } : {}}
                transition={{
                  duration: 0.5,
                  delay: featuresInView ? 0.2 * index : 0,
                  type: "spring",
                  stiffness: 100,
                  damping: 15
                }}
                whileHover={{
                  scale: 1.05,
                  rotateY: 5,
                  boxShadow: "0 20px 40px rgba(79, 172, 254, 0.2)"
                }}
              >
                <div className="feature-icon">{feature.icon}</div>
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </motion.section>

        <motion.div 
          className="creator-section"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
        >
          <h2>About the Creator</h2>
          <p>Created with ❤️ by Ayush Pandey</p>
          <p>Class IX Student at Holy Angels School, Dombivli</p>
          <p>Designed exclusively for Holy Angels School students</p>
        </motion.div>
      </main>

      <footer className="landing-footer">
        <p>© 2024 AcePlus - Holy Angels School Dombivli</p>
        <p>A student initiative for smarter learning</p>
      </footer>
    </div>
  );
};

export default LandingPage;

--------------------------------------------------------------------------------
File: src\components\LeaderboardPopup.jsx
--------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';

const PopupOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(5px);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: ${props => props.$isActive ? 1000 : 999};
  pointer-events: ${props => props.$isActive ? 'all' : 'none'};
`;

const PopupContent = styled(motion.div)`
  background: rgba(26, 26, 26, 0.95);
  padding: 2rem;
  border-radius: 12px;
  max-width: 600px;
  width: 90%;
  max-height: 80vh;
  min-height: 500px;
  overflow-y: auto;
  position: relative;
  border: 1px solid #333;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
  filter: ${props => props.$isActive ? 'none' : 'blur(3px) brightness(0.7)'};
  transition: filter 0.3s;
  
  @media (max-width: 768px) {
    padding: 1.5rem;
    width: 95%;
  }
  
  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    background: #222;
    border-radius: 4px;
  }

  &::-webkit-scrollbar-thumb {
    background: #444;
    border-radius: 4px;
    
    &:hover {
      background: #555;
    }
  }
`;

const Header = styled(motion.h2)`
  text-align: center;
  margin-bottom: 1rem;
  color: #fff;
  font-size: 1.8rem;
  text-transform: uppercase;
  letter-spacing: 2px;
  
  @media (max-width: 768px) {
    font-size: 1.5rem;
    margin-bottom: 0.8rem;
  }
  
  @media (max-width: 480px) {
    font-size: 1.3rem;
    margin-bottom: 0.6rem;
  }
`;

const SubHeader = styled(motion.div)`
  text-align: center;
  margin-bottom: 1.5rem;
  color: #999;
  font-size: 0.9rem;
  
  @media (max-width: 768px) {
    font-size: 0.8rem;
    margin-bottom: 1.2rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.75rem;
    margin-bottom: 1rem;
  }
`;

const TableContainer = styled.div`
  width: 100%;
  overflow-x: hidden;
  margin-top: 1rem;
  
  @media (max-width: 768px) {
    margin-top: 0.8rem;
  }
  
  @media (max-width: 480px) {
    margin-top: 0.6rem;
  }
`;

const Table = styled(motion.table)`
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed;
  margin: 0;
  padding: 0;
  border: none;
`;

const Th = styled.th`
  padding: 0.75rem 0.5rem;
  text-align: left;
  border-bottom: 2px solid #333;
  color: #fff;
  font-weight: 600;
  white-space: normal;
  word-wrap: break-word;
  width: ${props => props.width || 'auto'};
  font-size: 0.95rem;
  line-height: 1.2;
  
  &:last-child {
    padding-right: 0;
  }
  
  @media (max-width: 768px) {
    padding: 0.5rem 0.3rem;
    font-size: 0.8rem;
  }
  
  @media (max-width: 600px) {
    padding: 0.4rem 0.25rem;
    font-size: 0.7rem;
  }
  
  @media (max-width: 480px) {
    padding: 0.3rem 0.2rem;
    font-size: 0.65rem;
  }
  
  @media (max-width: 400px) {
    padding: 0.25rem 0.15rem;
    font-size: 0.6rem;
  }
`;

const Td = styled.td`
  padding: 0.75rem 0.5rem;
  border-bottom: 1px solid #333;
  color: #ccc;
  white-space: normal;
  word-wrap: break-word;
  font-size: 1rem;
  
  &:last-child {
    padding-right: 0;
  }
  
  @media (max-width: 768px) {
    padding: 0.5rem 0.3rem;
    font-size: 0.9rem;
  }
  
  @media (max-width: 480px) {
    padding: 0.4rem 0.2rem;
    font-size: 0.8rem;
  }
`;

const MedalRow = styled(motion.tr)`
  background: ${props => {
    if (props.noExams) return 'rgba(255, 0, 0, 0.1)';
    if (props.rank === 1) return 'linear-gradient(to right, rgba(255, 215, 0, 0.15), transparent)';
    if (props.rank === 2) return 'linear-gradient(to right, rgba(192, 192, 192, 0.15), transparent)';
    if (props.rank === 3) return 'linear-gradient(to right, rgba(205, 127, 50, 0.15), transparent)';
    return 'transparent';
  }};
  transition: background-color 0.3s;

  &:hover {
    background: ${props => {
      if (props.noExams) return 'rgba(255, 0, 0, 0.15)';
      if (props.rank === 1) return 'linear-gradient(to right, rgba(255, 215, 0, 0.2), transparent)';
      if (props.rank === 2) return 'linear-gradient(to right, rgba(192, 192, 192, 0.2), transparent)';
      if (props.rank === 3) return 'linear-gradient(to right, rgba(205, 127, 50, 0.2), transparent)';
      return '#222';
    }};
  }
`;

const Medal = styled(motion.span)`
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  width: 32px;
  height: 32px;
  text-align: center;
  
  @media (max-width: 768px) {
    font-size: 1rem;
    width: 28px;
    height: 28px;
  }
  
  @media (max-width: 480px) {
    font-size: 0.9rem;
    width: 24px;
    height: 24px;
  }
`;

const RankNumber = styled(Medal)`
  font-size: 1rem;
  color: #666;
  
  @media (max-width: 768px) {
    font-size: 0.9rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.8rem;
  }
`;

const Score = styled(motion.span)`
  display: inline-block;
  color: ${props => {
    if (props.value >= 90) return '#4CAF50';
    if (props.value >= 70) return '#8BC34A';
    if (props.value >= 50) return '#FFC107';
    return '#ccc';
  }};
  font-size: 1rem;
  
  @media (max-width: 768px) {
    font-size: 0.9rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.8rem;
  }
`;

const CloseButton = styled.button`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #999;
  transition: color 0.3s;
  
  &:hover {
    color: #fff;
  }
`;

const NoDataMessage = styled(motion.div)`
  text-align: center;
  color: #999;
  padding: 2rem;
  font-style: italic;
  font-size: 1rem;
  
  @media (max-width: 768px) {
    font-size: 0.9rem;
    padding: 1.5rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.8rem;
    padding: 1rem;
  }
`;

const ResetMessage = styled(motion.div)`
  color: #666;
  font-size: 0.8rem;
  margin-top: 0.5rem;
  font-style: italic;
  
  @media (max-width: 768px) {
    font-size: 0.75rem;
    margin-top: 0.4rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.7rem;
    margin-top: 0.3rem;
  }
`;

const NoExamsText = styled.span`
  color: #ff6b6b;
  font-style: italic;
  font-size: 0.85rem;
  font-weight: 300;
  margin-left: 8px;
  display: inline-block;
  
  @media (max-width: 768px) {
    font-size: 0.75rem;
    margin-left: 6px;
  }
  
  @media (max-width: 480px) {
    font-size: 0.7rem;
    margin-left: 4px;
  }
`;

const EloScore = styled(motion.span)`
  color: #4dabf7;
  font-weight: 500;
  font-size: 1rem;
  
  @media (max-width: 768px) {
    font-size: 0.9rem;
  }
  
  @media (max-width: 480px) {
    font-size: 0.8rem;
  }
`;

const LeaderboardPopup = ({ isOpen, onClose, leaderboardData, updatePopupOpen }) => {
  const [isClosing, setIsClosing] = useState(false);
  const [showContent, setShowContent] = useState(false);

  useEffect(() => {
    if (!updatePopupOpen && isOpen) {
      const timer = setTimeout(() => {
        setShowContent(true);
      }, 300);
      return () => clearTimeout(timer);
    } else if (updatePopupOpen) {
      setShowContent(false);
    }
  }, [updatePopupOpen, isOpen]);

  const handleClose = () => {
    setIsClosing(true);
    // Trigger card number animations
    window.dispatchEvent(new CustomEvent('animateCards'));
    setTimeout(() => {
      setShowContent(false);
      setTimeout(() => {
        setIsClosing(false);
        onClose();
      }, 500);
    }, 1000);
  };

  if (!isOpen) return null;

  const getMedal = (rank) => {
    if (rank === 1) return '🥇';
    if (rank === 2) return '🥈';
    if (rank === 3) return '🥉';
    return null;
  };

  const filteredLeaderboard = leaderboardData.leaderboard
    .filter(entry => entry.name !== 'UNKNOWN')
    .map((entry, index) => ({
      ...entry,
      rank: index + 1
    }));

  const isActive = !updatePopupOpen;

  return (
    <AnimatePresence mode="wait">
      {isOpen && (
        <PopupOverlay
          className="leaderboard-popup"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.5 }}
          onClick={handleClose}
          $isActive={isActive}
        >
          <PopupContent
            initial={{ scale: 0.95, y: 20, opacity: 0 }}
            animate={{ 
              scale: 1, 
              y: 0, 
              opacity: 1,
              transition: { duration: 0.5 }
            }}
            exit={{ 
              opacity: 0,
              transition: { duration: 0.5 }
            }}
            onClick={(e) => e.stopPropagation()}
            $isActive={isActive}
          >
            <CloseButton onClick={handleClose}>&times;</CloseButton>
            
            <AnimatePresence mode="wait">
              {showContent ? (
                <motion.div
                  key="content"
                  style={{ marginRight: "-20px", marginLeft: "-20px", marginBottom: "-30px" }}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ 
                    opacity: 0,
                    transition: { duration: 0.2 }
                  }}
                >
                  <Header
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ duration: 0.5, delay: 0.2 }}
                  >
                    Leaderboard
                  </Header>
                  <SubHeader
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ duration: 0.5, delay: 0.3 }}
                  >
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.4 }}
                    >
                      Division {leaderboardData.division}
                    </motion.div>
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.5 }}
                    >
                      {leaderboardData.month}
                    </motion.div>
                    <ResetMessage
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.6 }}
                    >
                      Leaderboard resets at the beginning of each month
                    </ResetMessage>
                  </SubHeader>

                  {leaderboardData.zero ? (
                    <NoDataMessage
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.3 }}
                    >
                      No exams taken this month yet!
                    </NoDataMessage>
                  ) : (
                    <TableContainer>
                      <Table
                        initial={{ opacity: 0, scale: 0.95 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.5, delay: 0.4 }}
                      >
                        <motion.thead
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ delay: 0.5 }}
                        >
                          <tr>
                            <Th width="12%">Rank</Th>
                            <Th width="38%">Name</Th>
                            <Th width="16%">Exams</Th>
                            <Th width="17%">Avg %</Th>
                            <Th width="17%">ELO</Th>
                          </tr>
                        </motion.thead>
                        <tbody>
                          {filteredLeaderboard.map((entry, index) => (
                            <MedalRow
                              key={entry.name}
                              rank={entry.rank}
                              noExams={entry.total_exams === 0}
                              initial={{ opacity: 0, x: -50 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ 
                                duration: 0.3,
                                delay: 0.6 + (index * 0.1)
                              }}
                            >
                              <Td>
                                {getMedal(entry.rank) ? (
                                  <Medal
                                    initial={{ scale: 0, rotate: -180 }}
                                    animate={{ scale: 1, rotate: 0 }}
                                    transition={{ 
                                      type: "spring",
                                      stiffness: 200,
                                      damping: 15,
                                      delay: 0.7 + (index * 0.1)
                                    }}
                                  >
                                    {getMedal(entry.rank)}
                                  </Medal>
                                ) : (
                                  <RankNumber
                                    initial={{ scale: 0 }}
                                    animate={{ scale: 1 }}
                                    transition={{ 
                                      type: "spring",
                                      stiffness: 200,
                                      damping: 15,
                                      delay: 0.7 + (index * 0.1)
                                    }}
                                  >
                                    {entry.rank}
                                  </RankNumber>
                                )}
                              </Td>
                              <Td>
                                {entry.name}
                                {entry.total_exams === 0 && (
                                  <NoExamsText>(No Exams Given Yet)</NoExamsText>
                                )}
                              </Td>
                              <Td>{entry.total_exams}</Td>
                              <Td>
                                <Score
                                  value={entry.average_percentage}
                                  initial={{ opacity: 0, scale: 0.5 }}
                                  animate={{ opacity: 1, scale: 1 }}
                                  transition={{ 
                                    type: "spring",
                                    stiffness: 200,
                                    damping: 10,
                                    delay: 0.8 + (index * 0.1)
                                  }}
                                >
                                  {entry.average_percentage}%
                                </Score>
                              </Td>
                              <Td>
                                <EloScore
                                  initial={{ opacity: 0, scale: 0.5 }}
                                  animate={{ opacity: 1, scale: 1 }}
                                  transition={{ 
                                    type: "spring",
                                    stiffness: 200,
                                    damping: 10,
                                    delay: 0.8 + (index * 0.1)
                                  }}
                                >
                                  {entry.elo_score || entry.eloScore || 'N/A'}
                                </EloScore>
                              </Td>
                            </MedalRow>
                          ))}
                        </tbody>
                      </Table>
                    </TableContainer>
                  )}
                </motion.div>
              ) : (
                <motion.div
                  key="empty"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="empty-state"
                  style={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    height: '500px'
                  }}
                >
                  <Header style={{ color: '#666' }}>Leaderboard</Header>
                </motion.div>
              )}
            </AnimatePresence>
          </PopupContent>
        </PopupOverlay>
      )}
    </AnimatePresence>
  );
};

export default LeaderboardPopup;

--------------------------------------------------------------------------------
File: src\components\Login.jsx
--------------------------------------------------------------------------------

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { HiEye, HiEyeOff } from 'react-icons/hi';
import Spinner from './Spinner'; // Import your Spinner component
import Notification from './Notification'; // Import your Notification component
import { api } from '../utils/api';
import './login.css';

const Login = () => {
  const [userId, setUserId] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.3,
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 24
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    try {
      const data = await api.login({ userId, password });
      localStorage.setItem('token', data.token);
      localStorage.setItem('user_id', data.user_id);
      navigate('/home');
      window.location.reload();
    } catch (error) {
      setError(error.message || 'An error occurred during login.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-page">
      <motion.div 
        className="login-card"
        initial="hidden"
        animate="visible"
        variants={containerVariants}
      >
        {error && (
          <motion.div 
            className="error-message"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            {error}
          </motion.div>
        )}
        <form onSubmit={handleSubmit}>
          <motion.h2 
            className="login-title"
            variants={itemVariants}
          >
            Welcome Back
          </motion.h2>
          
          <motion.div 
            className="form-group"
            variants={itemVariants}
          >
            <input
              type="text"
              id="userId"
              className="form-input"
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              placeholder=" "
              required
            />
            <label htmlFor="userId" className="form-label">GR NUMBER</label>
          </motion.div>

          <motion.div 
            className="form-group"
            variants={itemVariants}
          >
            <div className="password-input-wrapper">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                className="form-input"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder=" "
                required
              />
              <label htmlFor="password" className="form-label">Password</label>
              <motion.button
                type="button"
                className="password-toggle"
                onClick={() => setShowPassword(!showPassword)}
                tabIndex="-1"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
                aria-label={showPassword ? "Hide password" : "Show password"}
              >
                {showPassword ? <HiEyeOff size={20} /> : <HiEye size={20} />}
              </motion.button>
            </div>
          </motion.div>

          <motion.button 
            type="submit" 
            className="login-button" 
            disabled={isLoading}
            variants={itemVariants}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isLoading ? (
              <>
                <div className="spinner" />
                <span>Logging in...</span>
              </>
            ) : (
              'Login'
            )}
          </motion.button>
        </form>
      </motion.div>
    </div>
  );
};

export default Login;

--------------------------------------------------------------------------------
File: src\components\mobile-bottomnav.jsx
--------------------------------------------------------------------------------

import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { RiDashboardLine, RiFileAddLine, RiBarChartLine, RiHistoryLine, RiFileTextLine } from 'react-icons/ri';

function BottomNav() {
  let navigate = useNavigate();
  const location = useLocation();

  return (
    <div className="bottom-nav">
      <div className="bottom-nav-content">
        <button 
          onClick={() => navigate('/')} 
          className={`nav-item ${location.pathname === '/home' ? 'active' : ''}`}
        >
          <RiDashboardLine size={20} />
          <span>Dashboard</span>
        </button>
        <button 
          onClick={() => navigate('/create')} 
          className={`nav-item ${location.pathname === '/create' ? 'active' : ''}`}
        >
          <RiFileAddLine size={20} />
          <span>Create</span>
        </button>
        <button 
          onClick={() => navigate('/test-series')} 
          className={`nav-item ${location.pathname === '/test-series' ? 'active' : ''}`}
        >
          <RiFileTextLine size={20} />
          <span>Tests</span>
        </button>
        <button 
          onClick={() => navigate('/analyse')} 
          className={`nav-item ${location.pathname === '/analyse' ? 'active' : ''}`}
        >
          <RiBarChartLine size={20} />
          <span>Analyse</span>
        </button>
        <button 
          onClick={() => navigate('/history')} 
          className={`nav-item ${location.pathname === '/history' ? 'active' : ''}`}
        >
          <RiHistoryLine size={20} />
          <span>History</span>
        </button>
      </div>
    </div>
  );
}

export default BottomNav;


--------------------------------------------------------------------------------
File: src\components\NotFound.jsx
--------------------------------------------------------------------------------

// components/NotFound.js
import React from 'react';

const NotFound = () => {
  return (
    <div  className='content'>
      <h1>We looked far, but couldn't find what you are looking for! 😢</h1>
    </div>
  );
};

export default NotFound;


--------------------------------------------------------------------------------
File: src\components\Notification.jsx
--------------------------------------------------------------------------------

import React from 'react';

const Notification = ({ message, type = 'info' }) => { // Default type is 'info'
  if (!message) {
    return null; // Don't render anything if there's no message
  }

  return (
    <div className={`notification ${type}`}> 
      {message}
    </div>
  );
};

export default Notification;

--------------------------------------------------------------------------------
File: src\components\ProtectedRoute.jsx
--------------------------------------------------------------------------------

import React from 'react';
import { Navigate } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
    const token = localStorage.getItem('token');
    return token ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;

--------------------------------------------------------------------------------
File: src\components\sidebar.jsx
--------------------------------------------------------------------------------

import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

function Sidebar({ isHeaderHidden }) {
  const navigate = useNavigate();
  const location = useLocation();

  return (
    <div className={`sidebar ${isHeaderHidden ? 'header-hidden' : ''}`}>
      <button onClick={() => navigate('/home')} className={`btn ${location.pathname === '/' ? 'active' : ''}`}>
        🏠
        <span>Home</span>
      </button>
      <button onClick={() => navigate('/create')} className={`btn ${location.pathname === '/create' ? 'active' : ''}`}>
        📖
        <span>Create Exam</span>
      </button>
      <button onClick={() => navigate('/test-series')} className={`btn ${location.pathname === '/test-series' ? 'active' : ''}`}>
        📝
        <span>Test Series</span>
      </button>
      <button onClick={() => navigate('/analyse')} className={`btn ${location.pathname === '/analyse' ? 'active' : ''}`}>
        📊
        <span>Analyse</span>
      </button>
      <button onClick={() => navigate('/history')} className={`btn ${location.pathname === '/history' ? 'active' : ''}`}>
        📜
        <span>History</span>
      </button>
    </div>
  );
}

export default Sidebar;

--------------------------------------------------------------------------------
File: src\components\Spinner.jsx
--------------------------------------------------------------------------------

function Spinner() {
    return <div className="spinner"></div>;
  }
export default Spinner;

--------------------------------------------------------------------------------
File: src\components\SubjectDetails.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { api } from '../utils/api';
import { motion } from 'framer-motion';

const SkeletonCard = () => (
  <div className="subject-detail-card skeleton">
    <div className="skeleton-text"></div>
    <div className="skeleton-text"></div>
  </div>
);

const SubjectDetails = ({ subject }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [details, setDetails] = useState(null);

  useEffect(() => {
    const fetchDetails = async () => {
      try {
        const data = await api.getSubjectStats(subject);
        setDetails(data);
      } catch (error) {
        console.error('Error fetching subject details:', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchDetails();
  }, [subject]);

  const detailCards = [
    { title: 'Exams Given', value: details?.attempted, icon: '📚', color: '#7FB069' },
    { title: 'Questions Attempted', value: details?.marksAttempted, icon: '✏️', color: '#64B5F6' },
    { title: 'Marks Gained', value: details?.marksGained, icon: '🎯', color: '#FFD54F' },
    { title: 'Average Percentage', value: details?.avgPercentage ? `${details.avgPercentage.toFixed(2)}%` : 'N/A', icon: '📊', color: '#BA68C8' },
    { title: 'Highest Percentage in Exam', value: details?.highestMark ? details.highestMark.toFixed(2) : 'N/A', icon: '💪', color: '#FF8A65' },
    { title: 'Lowest Percentage in Exam', value: details?.lowestMark ? details.lowestMark.toFixed(2) : 'N/A', icon: '🔍', color: '#A1887F' },
  ]
  return (
    <motion.div 
      className="subject-details-container"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay: 0.3 }}
    >
      <h1 className="subject-title">{subject.charAt(0).toUpperCase() + subject.slice(1)} Analysis</h1>
      <div className="subject-details-grid">
        {isLoading
          ? Array(6).fill(null).map((_, index) => <SkeletonCard key={index} />)
          : detailCards.map((card, index) => (
              <div key={index} className="subject-detail-card" style={{ '--card-color': card.color }}>
                <div className="card-icon">{card.icon}</div>
                <h2 className="card-title">{card.title}</h2>
                <p className="card-value">{card.value !== undefined ? card.value : 'N/A'}</p>
              </div>
            ))
        }
      </div>
    </motion.div>
  );
};

export default SubjectDetails;

--------------------------------------------------------------------------------
File: src\components\TestSeries.jsx
--------------------------------------------------------------------------------

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { ExamSkeletonLoading } from './Exam';
import { Skeleton } from "@mui/material";
import Select from 'react-select';
import { api } from '../utils/api';

const TestCard = styled(motion.div)`
  background: ${props => props.bgColor};
  border-radius: 15px;
  padding: 2rem;
  color: white;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
  cursor: pointer;
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
  }
  position: relative;
  z-index: 1;
`;

const TestInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const TestDetails = styled.div`
  margin-top: 1rem;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
`;

const Badge = styled.span`
  background: rgba(255, 255, 255, 0.2);
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
`;

const SkeletonWrapper = styled(motion.div)`
  margin-top: 0;
  height: 100vh;
  width: 100%;
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-color, #121212);
`;

const EmptyStateWrapper = styled(motion.div)`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 50vh;
  text-align: center;
  padding: 2rem;
`;

const EmptyStateIcon = styled(motion.div)`
  font-size: 5rem;
  margin-bottom: 1.5rem;
`;

const EmptyStateTitle = styled(motion.h2)`
  font-size: 1.8rem;
  margin-bottom: 1rem;
  color: #2d3748;
`;

const EmptyStateText = styled(motion.p)`
  font-size: 1.1rem;
  color: #718096;
  max-width: 500px;
  line-height: 1.6;
`;

const TeacherForm = styled(motion.div)`
  background: #1a1a1a;
  padding: 2rem;
  border-radius: 15px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  margin-bottom: 2rem;
  position: relative;
  z-index: 100;
  h2 {
    color: #ffffff;
    margin-bottom: 1.5rem;
  }
`;

const FormGroup = styled.div`
  margin-bottom: 1.5rem;
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #e2e8f0;
  }
  
  select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #2d3748;
    border-radius: 8px;
    background-color: #2d3748;
    color: #ffffff;
    font-size: 1rem;
    cursor: ${props => props.isDisabled ? 'not-allowed' : 'pointer'};

    &:disabled {
      background-color: #1a1a1a;
      border-color: #2d3748;
      color: #718096;
      cursor: not-allowed;
    }

    option {
      background-color: #2d3748;
      color: #ffffff;
    }
  }

  .react-select-container {
    .react-select__control {
      background-color: #2d3748;
      border-color: #4a5568;
      position: relative;
      z-index: 101;
      
      &:hover {
        border-color: #4a5568;
      }
    }

    .react-select__menu {
      background-color: #2d3748;
      border: 1px solid #4a5568;
      z-index: 102;
    }

    .react-select__option {
      background-color: #2d3748;
      color: #ffffff;

      &:hover {
        background-color: #4a5568;
      }
    }

    .react-select__multi-value {
      background-color: #4a5568;
      
      .react-select__multi-value__label {
        color: #ffffff;
      }
      
      .react-select__multi-value__remove {
        color: #ffffff;
        
        &:hover {
          background-color: #e53e3e;
          color: #ffffff;
        }
      }
    }

    .react-select__input-container {
      color: #ffffff;
    }

    .react-select__placeholder {
      color: #a0aec0;
    }
  }
`;

const DisabledInput = styled.input`
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #2d3748;
  border-radius: 8px;
  background-color: #1a1a1a;
  color: #718096;
  font-size: 1rem;
  cursor: not-allowed;
`;

const GenerateButton = styled.button`
  padding: 0.75rem 1.5rem;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
  width: 100%;
  font-size: 1rem;
  font-weight: 600;
  transition: background-color 0.2s ease;

  &:disabled {
    background-color: #2d3748;
    opacity: 0.7;
  }

  &:hover:not(:disabled) {
    background-color: #3d8b40;
  }
`;

const TestCardSkeleton = () => (
  <motion.div 
    className="test-card skeleton"
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    transition={{ duration: 0.3 }}
    style={{
      background: '#2a2a2a',
      borderRadius: '15px',
      padding: '2rem',
      marginBottom: '1.5rem',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
      height: '200px'
    }}
  >
    {/* Header with subject and ID */}
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
      <Skeleton variant="text" width={120} height={32} style={{ background: 'rgba(255, 255, 255, 0.1)' }} />
      <Skeleton variant="text" width={60} height={24} style={{ background: 'rgba(255, 255, 255, 0.1)' }} />
    </div>

    {/* Badges */}
    <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>
      <Skeleton 
        variant="rounded" 
        width={120} 
        height={35} 
        style={{ background: 'rgba(255, 255, 255, 0.1)', borderRadius: '20px' }} 
      />
      <Skeleton 
        variant="rounded" 
        width={120} 
        height={35} 
        style={{ background: 'rgba(255, 255, 255, 0.1)', borderRadius: '20px' }} 
      />
    </div>

    {/* Lesson tags */}
    <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>
      {[1, 2, 3].map((n) => (
        <Skeleton 
          key={n}
          variant="rounded" 
          width={80} 
          height={24} 
          style={{ background: 'rgba(255, 255, 255, 0.1)', borderRadius: '15px' }} 
        />
      ))}
    </div>
  </motion.div>
);

const PageHeader = styled(motion.div)`
  margin-bottom: 2rem;
  padding-top: 1.5rem;
  text-align: center;
  
  h1 {
    font-weight: 700;
    font-size: 2.2rem;
    letter-spacing: -0.5px;
    color: #ffffff;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    background: linear-gradient(135deg, #ffffff 0%, #b3b3b3 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
`;

const TestSeries = () => {
  const [tests, setTests] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showSkeletonLoading, setShowSkeletonLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const navigate = useNavigate();
  const progressInterval = useRef(null);
  const startTimeRef = useRef(null);
  const lastProgressRef = useRef(0);
  const [isTeacher, setIsTeacher] = useState(false);
  const [teacherSubject, setTeacherSubject] = useState('');
  const [teacherStandard, setTeacherStandard] = useState([]);
  const [selectedStandard, setSelectedStandard] = useState('');
  const [selectedLessons, setSelectedLessons] = useState([]);
  const [availableLessons, setAvailableLessons] = useState([]);
  const [isLessonsLoading, setIsLessonsLoading] = useState(false);

  const getSubjectColor = (subject) => {
    const colors = { 
      Math: '#4CAF50', 
      Science: '#2196F3', 
      English: '#FFC107', 
      SS: '#9C27B0' 
    };
    return colors[subject] || '#607D8B';
  };

  const getSubjectIcon = (subject) => {
    const icons = { 
      Math: '📐', 
      Science: '🧪', 
      English: '📚', 
      SS: '🌍' 
    };
    return icons[subject] || '📚';
  };

  useEffect(() => {
    const fetchTests = async () => {
      try {
        const data = await api.getTests();
        setTests(data.tests);
        setIsTeacher(data.teacher);
        if (data.teacher) {
          setTeacherSubject(data.teacher_subject);
          if (data.teacher_standard) {
            setTeacherStandard(data.teacher_standard);
            setSelectedStandard(data.teacher_standard[0]);
          }
        }
      } catch (error) {
        console.error('Error fetching tests:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchTests();
  }, []);

  useEffect(() => {
    if (selectedStandard && teacherSubject) {
      fetchLessons();
    }
  }, [selectedStandard, teacherSubject]);

  const fetchLessons = async () => {
    setIsLessonsLoading(true);
    try {
      const data = await api.getLessons(teacherSubject, selectedStandard === 10);
      setAvailableLessons(data.map(lesson => ({ value: lesson, label: lesson })));
    } catch (error) {
      console.error('Error fetching lessons:', error);
    } finally {
      setIsLessonsLoading(false);
    }
  };

  const handleGenerateTest = async (e) => {
    e.preventDefault();
    setShowSkeletonLoading(true);
    
    try {
      const data = await api.generateTest({
        subject: teacherSubject,
        lessons: selectedLessons.map(l => l.value),
        class10: selectedStandard === 10
      });
      
      navigate('/create-test', { state: { generatedTest: data } });
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setShowSkeletonLoading(false);
    }
  };

  const cardVariants = {
    hidden: { 
      opacity: 0, 
      scale: 0.8, 
      y: 50,
      rotateX: -15
    },
    visible: (index) => ({ 
      opacity: 1, 
      scale: 1, 
      y: 0,
      rotateX: 0,
      transition: {
        duration: 0.8,
        delay: index * 0.15,
        type: "spring",
        stiffness: 100,
        damping: 15
      }
    }),
    hover: {
      scale: 1.03,
      rotateX: 5,
      boxShadow: "0 15px 30px rgba(0,0,0,0.2)",
      transition: {
        duration: 0.3,
        type: "spring",
        stiffness: 400,
        damping: 10
      }
    }
  };

  const fadeTransition = {
    hidden: {
      opacity: 0,
      scale: 0.95,
      filter: 'blur(10px)',
    },
    visible: {
      opacity: 1,
      scale: 1,
      filter: 'blur(0px)',
      transition: {
        duration: 0.5,
        ease: "easeOut"
      }
    },
    exit: {
      opacity: 0,
      scale: 1.05,
      filter: 'blur(10px)',
      transition: {
        duration: 0.3,
        ease: "easeIn"
      }
    }
  };

  const handleTestClick = async (testId) => {
    setShowSkeletonLoading(true);
    setProgress(0);
    startTimeRef.current = Date.now();
    lastProgressRef.current = 0;

    const updateProgress = () => {
      const elapsedTime = Date.now() - startTimeRef.current;
      const newProgress = Math.min((elapsedTime / 1000) * 100, 100);

      if (newProgress > lastProgressRef.current) {
        setProgress(newProgress);
        lastProgressRef.current = newProgress;
      }
    };

    progressInterval.current = setInterval(updateProgress, 5);

    try {
      const examData = await api.createExam({
        test: true,
        'test-id': testId
      });
      
      clearInterval(progressInterval.current);
      setProgress(100);
      
      setTimeout(() => {
        navigate(`/exam/g/${examData['exam-id']}`);
      }, 100);
    } catch (error) {
      console.error('Error creating exam:', error);
      clearInterval(progressInterval.current);
      setShowSkeletonLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, ease: "easeOut" }}
      className="test-series-container"
    >
      <AnimatePresence mode="wait">
        {showSkeletonLoading ? (
          <SkeletonWrapper
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <ExamSkeletonLoading progress={progress} />
          </SkeletonWrapper>
        ) : (
          <>
            <PageHeader
              initial={{ y: -20 }}
              animate={{ y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h1>Test Series</h1>
            </PageHeader>

            {isTeacher && (
              <TeacherForm
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <h2>Create New Test</h2>
                <form onSubmit={handleGenerateTest}>
                  <FormGroup>
                    <label>Subject</label>
                    <DisabledInput
                      type="text"
                      value={teacherSubject}
                      disabled
                    />
                  </FormGroup>

                  <FormGroup isDisabled={teacherStandard.length === 1}>
                    <label>Standard</label>
                    {teacherStandard.length === 1 ? (
                      <DisabledInput
                        type="text"
                        value={`Standard ${selectedStandard}`}
                        disabled
                      />
                    ) : (
                      <select
                        value={selectedStandard}
                        onChange={(e) => setSelectedStandard(Number(e.target.value))}
                        required
                      >
                        <option value="">Select Standard</option>
                        {teacherStandard.includes(9) && <option value={9}>Standard 9</option>}
                        {teacherStandard.includes(10) && <option value={10}>Standard 10</option>}
                      </select>
                    )}
                  </FormGroup>

                  <FormGroup>
                    <label>Lessons</label>
                    <Select
                      isMulti
                      options={availableLessons}
                      value={selectedLessons}
                      onChange={setSelectedLessons}
                      isLoading={isLessonsLoading}
                      isDisabled={!selectedStandard}
                      placeholder={selectedStandard ? "Select lessons" : "Select standard first"}
                      className="react-select-container"
                      classNamePrefix="react-select"
                      styles={{
                        control: (base) => ({
                          ...base,
                          background: '#2d3748',
                          borderColor: '#4a5568',
                          '&:hover': {
                            borderColor: '#4a5568'
                          }
                        }),
                        menu: (base) => ({
                          ...base,
                          background: '#2d3748',
                          border: '1px solid #4a5568'
                        }),
                        option: (base, state) => ({
                          ...base,
                          background: state.isFocused ? '#4a5568' : '#2d3748',
                          color: '#ffffff',
                          cursor: 'pointer'
                        }),
                        multiValue: (base) => ({
                          ...base,
                          background: '#4a5568'
                        }),
                        multiValueLabel: (base) => ({
                          ...base,
                          color: '#ffffff'
                        }),
                        multiValueRemove: (base) => ({
                          ...base,
                          color: '#ffffff',
                          ':hover': {
                            background: '#e53e3e',
                            color: '#ffffff'
                          }
                        }),
                        input: (base) => ({
                          ...base,
                          color: '#ffffff'
                        }),
                        placeholder: (base) => ({
                          ...base,
                          color: '#a0aec0'
                        })
                      }}
                    />
                  </FormGroup>

                  <GenerateButton
                    type="submit"
                    disabled={!selectedStandard || selectedLessons.length === 0}
                  >
                    Generate Test
                  </GenerateButton>
                </form>
              </TeacherForm>
            )}

            <motion.div 
              key="content"
              initial="hidden"
              animate="visible"
              exit="exit"
              variants={fadeTransition}
              className="tests-grid"
            >
              {isLoading ? (
                <div className="tests-grid">
                  {[1, 2, 3].map((n) => (
                    <TestCardSkeleton key={n} />
                  ))}
                </div>
              ) : tests.length === 0 ? (
                <EmptyStateWrapper
                  initial={{ opacity: 0, y: 50 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ 
                    duration: 0.8,
                    type: "spring",
                    stiffness: 100,
                    damping: 15
                  }}
                >
                  <EmptyStateIcon
                    initial={{ scale: 0, rotate: -180 }}
                    animate={{ scale: 1, rotate: 0 }}
                    transition={{ 
                      duration: 0.8,
                      delay: 0.2,
                      type: "spring",
                      stiffness: 200
                    }}
                  >
                    🎉
                  </EmptyStateIcon>
                  <EmptyStateTitle
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.3 }}
                  >
                    All Caught Up!
                  </EmptyStateTitle>
                  <EmptyStateText
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.4 }}
                  >
                    You've completed all available tests. Check back later for new challenges to tackle and keep improving!
                  </EmptyStateText>
                </EmptyStateWrapper>
              ) : (
                tests.map((test, index) => (
                  <TestCard
                    key={test['test-id']}
                    bgColor={getSubjectColor(test.subject)}
                    variants={cardVariants}
                    initial="hidden"
                    animate="visible"
                    whileHover="hover"
                    whileTap={{ scale: 0.98 }}
                    custom={index}
                    onClick={() => handleTestClick(test['test-id'])}
                  >
                    <TestInfo>
                      <h2>{getSubjectIcon(test.subject)} {test.subject}</h2>
                      <span className="test-id">#{test['test-id']}</span>
                    </TestInfo>
                    
                    <TestDetails>
                      <Badge>
                        <span>📝</span>
                        {test.questions} Questions
                      </Badge>
                      <Badge>
                        <span>📚</span>
                        {test.lessons.length} Lessons
                      </Badge>
                    </TestDetails>

                    <div className="lessons-list">
                      {test.lessons.map((lesson, idx) => (
                        <motion.span
                          key={idx}
                          className="lesson-tag"
                          initial={{ opacity: 0, scale: 0.8, x: -20 }}
                          animate={{ opacity: 1, scale: 1, x: 0 }}
                          transition={{ 
                            delay: index * 0.1 + idx * 0.05,
                            type: "spring",
                            stiffness: 200,
                            damping: 15
                          }}
                        >
                          {lesson}
                        </motion.span>
                      ))}
                    </div>
                  </TestCard>
                ))
              )}
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default TestSeries;

--------------------------------------------------------------------------------
File: src\components\UpdatePopup.jsx
--------------------------------------------------------------------------------

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

function UpdatePopup({ isOpen, onClose, updates }) {
  const renderChange = (change) => {
    if (typeof change === 'string') {
      return <strong>{change}</strong>;
    }
    return <strong>{change.title}</strong>;
  };

  return (
    <AnimatePresence mode="wait">
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className="update-popup-overlay"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95, y: 20, opacity: 0 }}
            animate={{ 
              scale: 1, 
              y: 0, 
              opacity: 1,
              transition: { 
                type: "spring",
                stiffness: 300,
                damping: 30 
              }
            }}
            exit={{ 
              scale: 0.95,
              opacity: 0,
              transition: { 
                duration: 0.15,
                ease: "easeOut"
              }
            }}
            className="update-popup"
            onClick={e => e.stopPropagation()}
          >
            <h2>What's New</h2>
            {updates.map((update, index) => (
              <motion.div
                key={update.version}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
                className="version-info"
              >
                <div className="flex justify-between items-center mb-2">
                  <h3 className="text-lg font-semibold">
                    Version {update.version}
                  </h3>
                  <span className="text-sm text-gray-400">{update.date}</span>
                </div>
                <ul className="changes-list">
                  {update.changes.map((change, idx) => (
                    <motion.li
                      key={idx}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 + idx * 0.05 }}
                    >
                      <div className="change-item">
                        <div className="change-title">
                          <span className="bullet">•</span>
                          {renderChange(change)}
                        </div>
                        {typeof change === 'object' && change.description && (
                          <motion.p
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ delay: index * 0.1 + idx * 0.05 + 0.1 }}
                            className="change-description"
                          >
                            {change.description}
                          </motion.p>
                        )}
                      </div>
                    </motion.li>
                  ))}
                </ul>
              </motion.div>
            ))}
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="update-popup-button"
              onClick={onClose}
            >
              Got it!
            </motion.button>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

export default UpdatePopup;

================================================================================
Files with extension: .js
================================================================================


--------------------------------------------------------------------------------
File: src\index.js
--------------------------------------------------------------------------------

import React, { StrictMode } from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import { useEffect } from 'react';
import { useLocation} from 'react-router-dom';

function ScrollToTop() {
  const { pathname } = useLocation();
  
  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth'
    });
  }, [pathname]);

  return null;
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <BrowserRouter>
      <ScrollToTop /> 
      <App />
    </BrowserRouter>  

);

--------------------------------------------------------------------------------
File: src\reportWebVitals.js
--------------------------------------------------------------------------------

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--------------------------------------------------------------------------------
File: src\setupTests.js
--------------------------------------------------------------------------------

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--------------------------------------------------------------------------------
File: src\components\animations.js
--------------------------------------------------------------------------------

export const questionCardVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.3 },
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: { duration: 0.2 },
  },
};

export const buttonVariants = {
  hidden: { opacity: 0, scale: 0.8, y: 50 },
  visible: (index) => ({
    opacity: 1,
    scale: 1,
    y: 0,
    transition: {
      duration: 0.8,
      delay: index * 0.2,
      type: 'spring',
      stiffness: 100,
      damping: 15,
    },
  }),
};

export const fadeTransition = {
  hidden: {
    opacity: 0,
    scale: 0.95,
    filter: 'blur(10px)',
  },
  visible: {
    opacity: 1,
    scale: 1,
    filter: 'blur(0px)',
    transition: {
      duration: 0.5,
      ease: 'easeOut',
    },
  },
  exit: {
    opacity: 0,
    scale: 1.05,
    filter: 'blur(10px)',
    transition: {
      duration: 0.3,
      ease: 'easeIn',
    },
  },
}; 

--------------------------------------------------------------------------------
File: src\utils\api.js
--------------------------------------------------------------------------------

// API Base URL configuration
const DEV_API_URL = 'http://127.0.0.1:9027';
const PROD_API_URL = 'https://aceplus.vercel.app';

// For debugging
console.log('Current NODE_ENV:', process.env.NODE_ENV);
console.log('Current REACT_APP_ENV:', process.env.REACT_APP_ENV);

export const API_BASE_URL = process.env.NODE_ENV === 'production' ? PROD_API_URL : DEV_API_URL;

// Default headers that should be included in most requests
const getDefaultHeaders = () => {
  const token = localStorage.getItem('token');
  return {
    'Authorization': token ? `Bearer ${token}` : '',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
};

// Helper function to check if response is JSON
const isJsonResponse = (response) => {
  const contentType = response.headers.get('content-type');
  return contentType && contentType.includes('application/json');
};

// API request wrapper with error handling
export const apiRequest = async (endpoint, options = {}) => {
  try {
    // Ensure endpoint starts with /
    const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;
    const url = `${API_BASE_URL}${normalizedEndpoint}`;
    
    // Special handling for FormData
    const isFormData = options.body instanceof FormData;
    
    const headers = {
      ...(isFormData ? {} : getDefaultHeaders()), // Don't set default headers for FormData
      ...options.headers
    };

    // Always add Authorization header if token exists
    const token = localStorage.getItem('token');
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    // Remove Content-Type for FormData
    if (isFormData) {
      delete headers['Content-Type'];
    }

    // Set default timeout to 30 seconds, but use 120 seconds for image operations
    const isImageOperation = endpoint.includes('generate_from_images') || endpoint.includes('upload_images');
    const timeout = isImageOperation ? 120000 : 30000;

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    const config = {
      ...options,
      headers,
      mode: 'cors',
      credentials: 'include',
      signal: controller.signal
    };

    console.log('Making request to:', url);
    console.log('With config:', {
      ...config,
      headers: { ...config.headers }
    });

    const response = await fetch(url, config);
    clearTimeout(timeoutId);
    
    // Log response details for debugging
    console.log('Response status:', response.status);
    console.log('Response headers:', [...response.headers.entries()]);

    if (!response.ok) {
      if (response.status === 401) {
        localStorage.removeItem('token');
        localStorage.removeItem('user_id');
        window.location.href = '/login';
        throw new Error('Unauthorized access');
      }
      
      // Try to get error message from response
      let errorMessage = `Request failed with status ${response.status}`;
      if (isJsonResponse(response)) {
        const errorData = await response.json().catch(() => null);
        if (errorData) {
          errorMessage = errorData.msg || errorData.message || errorMessage;
        }
      }
      throw new Error(errorMessage);
    }

    // Handle successful response based on content type
    if (isJsonResponse(response)) {
      return await response.json();
    }

    // For non-JSON responses, return the raw response
    return response;
  } catch (error) {
    if (error.name === 'AbortError') {
      throw new Error('Request timed out. Please try again.');
    }
    console.error('API Request failed:', error);
    throw error;
  }
};

// Common API endpoints
export const endpoints = {
  userStats: 'api/user_stats',
  leaderboard: 'api/leaderboard',
  updates: 'api/updates',
  login: 'api/login',
  createExam: 'api/create_exam',
  submitExam: (examId) => `api/submit_exam/${examId}`,
  getExam: (examId) => `api/exam/${examId}`,
  getLessons: (subject, isClass10) => `api/lessons?subject=${subject}${isClass10 ? '&class10=true' : ''}`,
  getTests: 'api/tests',
  generateTest: 'api/generate_test',
  createTest: 'api/create_test',
  getUserExams: 'api/user_exams',
  getOverviewStats: 'api/overview_stats',
  getSubjectStats: (subject) => `api/subject_stats/${subject}`,
  reportQuestion: 'api/report',
  uploadImages: 'api/upload_images',
  getUploadedImage: (filename) => `api/uploads/${filename}`
};

// API methods for common operations
export const api = {
  getUserStats: () => apiRequest(endpoints.userStats),
  getOverviewStats: () => apiRequest(endpoints.getOverviewStats),
  getLeaderboard: () => apiRequest(endpoints.leaderboard),
  getUpdates: () => apiRequest(endpoints.updates),
  login: (data) => apiRequest(endpoints.login, {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  createExam: (data) => apiRequest(endpoints.createExam, {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  submitExam: (examId, data) => apiRequest(endpoints.submitExam(examId), {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  getExam: (examId) => apiRequest(endpoints.getExam(examId)),
  getLessons: (subject, isClass10 = false) => apiRequest(endpoints.getLessons(subject, isClass10)),
  getTests: () => apiRequest(endpoints.getTests),
  generateTest: (data) => apiRequest(endpoints.generateTest, {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  createTest: (data) => apiRequest(endpoints.createTest, {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  getUserExams: () => apiRequest(endpoints.getUserExams),
  getSubjectStats: (subject) => apiRequest(endpoints.getSubjectStats(subject)),
  reportQuestion: (data) => apiRequest(endpoints.reportQuestion, {
    method: 'POST',
    body: JSON.stringify(data)
  }),
  uploadImages: (formData) => apiRequest(endpoints.uploadImages, {
    method: 'POST',
    body: formData
  }),
  generateFromImages: async (filenames) => {
    try {
      // Start the job
      const startResponse = await apiRequest('api/generate_from_images', {
        method: 'POST',
        body: JSON.stringify({ filenames })
      });

      const jobId = startResponse.job_id;
      console.log('Job started with ID:', jobId);
      
      // Poll for results
      const pollInterval = 5000; // 5 seconds
      let attempts = 0;
      const maxAttempts = 24; // 2 minutes max

      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, pollInterval));
        
        const statusResponse = await apiRequest(`api/check_job_status/${jobId}`, {
          method: 'GET'
        });
        
        console.log('Status response:', statusResponse);
        
        if (statusResponse.status === 'completed' && statusResponse.questions) {
          if (!Array.isArray(statusResponse.questions)) {
            console.error('Invalid questions format:', statusResponse.questions);
            throw new Error('Invalid response format from server');
          }
          return statusResponse.questions;
        } else if (statusResponse.status === 'failed') {
          throw new Error(statusResponse.message || 'Failed to process images');
        }
        
        attempts++;
      }
      
      throw new Error('Operation timed out after 2 minutes');
    } catch (error) {
      console.error('Error in generateFromImages:', error);
      throw error;
    }
  },
  getUploadedImage: (filename) => apiRequest(endpoints.getUploadedImage(filename), {
    method: 'GET',
    headers: {
      'Accept': 'image/*'
    }
  })
}; 

================================================================================
Files with extension: .css
================================================================================


--------------------------------------------------------------------------------
File: src\App.css
--------------------------------------------------------------------------------

/*home page*/
* {
  box-sizing: border-box;
  font-family: 'Roboto', sans-serif;
}

body {
  margin: 0;
  padding: 0;
  background-color: #181818;
  color: white;
  font-family: 'Roboto', sans-serif;
}

.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 60px;
  background-color: #212121;
  height: 100%;
  padding: 10px 0;
  transition: width 0.3s ease-in-out;
  border-right: 1px solid #383838;
  z-index: 1000;
}

.btn {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  background-color: transparent;
  border: none;
  cursor: pointer;
  padding: 10px;
  width: 100%;
  border-radius: 10px;
  color: white;
  transition: all 0.3s;
  font-size: 17px;
}

.btn span {
  margin-left: 10px;
  opacity: 0;
  white-space: nowrap;
  overflow: hidden;
  transition: opacity 0.9s, width 0.9s;
  width: 0;
}

.btn:hover {
  background-color: #383838;
  font-size: 21px;
  margin-bottom: 20px;
}

.sidebar:hover {
  width: 200px;
}

.sidebar:hover .btn {
  padding-bottom: 15px;
  padding-top: 15px;
  width: 90%;
  align-items: center;
}

.sidebar:hover .btn span {
  opacity: 1;
  width: auto;
}

.content {
  margin-top: 25px;
  margin-left: 80px;
  padding: 20px;
  height: calc(100vh - 50px);
  box-sizing: border-box;
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  transition: margin-left 0.3s ease-in-out;
}

.sidebar:hover ~ .content {
  margin-left: 220px;
}

.container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  width: 100%;
  align-items: start;
  perspective: 1000px;
}

.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 20px;
  border-radius: 15px;
  color: white;
  text-align: center;
  height: 200px;
  transition: opacity 2s ease, transform 0.3s ease, box-shadow 0.3s ease, background-color 2s ease;
  transform-origin: center center;
  position: relative;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
}

.card::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background-size: 400% 400%;
  opacity: 0;
  z-index: -1;
  transition: opacity 0.3s ease;
}

.card:hover::before {
  opacity: 1;
  animation: rainbow 15s linear infinite;
}

.container:hover .card:not(:hover) {
  transform: scale(0.95);
}

.card:hover {
  transform: scale(1.05);
  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.4),
              0 0 20px rgba(255, 255, 255, 0.4);
  z-index: 1;
}

@keyframes rainbow {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.card:nth-child(1) { background-color: #667eea; }
.card:nth-child(2) { background-color: #f093fb; }
.card:nth-child(3) { background-color: #43e97b; }
.card:nth-child(4) { background-color: #fa709a; }

.card:nth-child(1)::before { background-image: linear-gradient(45deg, #667eea,#667eea,#667eea,#0000ff, #ff7f00, #ffff00, #00ff00, #8b00ff, #667eea); }
.card:nth-child(2)::before { background-image: linear-gradient(45deg, #f093fb,#f093fb,#f093fb, #ffff00, #00ff00, #0000ff, #8b00ff, #ff0000, #f093fb); }
.card:nth-child(3)::before { background-image: linear-gradient(45deg, #43e97b,#43e97b,#43e97b , #00ff00, #ffff00 , #8b00ff, #ff0000, #ff7f00, #43e97b); }
.card:nth-child(4)::before { background-image: linear-gradient(45deg, #fa709a,#fa709a,#fa709a,  #ff0000, #8b00ff, #ff7f00, #ffff00, #fa709a); }

.info-text {
  font-size: 18px;
  margin-bottom: 10px;
  position: relative;
  z-index: 2;
}

.number {
  font-size: 60px;
  font-weight: bold;
  text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
  position: relative;
  z-index: 2;
}

.bottom-nav {
  display: none;
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  background: linear-gradient(180deg, rgba(18, 18, 18, 0.95) 0%, rgba(18, 18, 18, 0.98) 100%);
  backdrop-filter: blur(10px);
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding: 8px 0;
  z-index: 1000;
  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.2);
}

.bottom-nav-content {
  display: flex;
  justify-content: space-around;
  align-items: center;
  max-width: 600px;
  margin: 0 auto;
  padding: 0 16px;
}

.nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 8px 12px;
  color: rgba(255, 255, 255, 0.6);
  background: none;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  gap: 4px;
  min-width: 64px;
  position: relative;
}

.nav-item span {
  font-size: 0.75rem;
  font-weight: 500;
  letter-spacing: 0.3px;
  transition: color 0.2s ease;
  white-space: nowrap;
}

.nav-item svg {
  font-size: 1.4rem;
  transition: transform 0.2s ease, color 0.2s ease;
}

.nav-item:hover {
  color: rgba(255, 255, 255, 0.9);
}

.nav-item:hover svg {
  transform: translateY(-2px);
}

.nav-item.active {
  color: #fff;
}

.nav-item.active::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 20px;
  height: 3px;
  background: #007bff;
  border-radius: 3px;
}

.nav-item.active svg {
  transform: translateY(-2px);
}

.nav-item.active span {
  font-weight: 600;
}

@media (max-width: 768px) {
  .bottom-nav {
    display: block;
  }
  
  .nav-item {
    padding: 6px 8px;
  }
  
  .nav-item span {
    font-size: 0.7rem;
  }
  
  .nav-item svg {
    font-size: 1.3rem;
  }
}

@media (max-width: 768px) {
.sidebar {
display: none;
}

.bottom-nav {
display: block;
}

.content {
margin-left: 0;
height: 90%;
}

.container {
grid-template-columns: 1fr;
width: 100%;
overflow-y: auto;
height: 100%;
padding-bottom: 60px;
}

.card {
height: 180px;
transform: none !important;
transition: box-shadow 0.3s ease;
}

.card:hover {
transform: none !important;
box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.4);
}

.container:hover .card:not(:hover) {
transform: none !important;
}
}

@media (max-height: 600px) {
.card {
height: 150px;
}
.card:hover {
transform: none !important;
}
.container:hover .card:not(:hover) {
transform: none !important;
}
}

/* components/Login.css */

.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  padding: 20px;
  box-sizing: border-box;
}

.login-container h2 {
  margin-bottom: 30px;
  color: #ffffff;
  font-size: 32px;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.login-container form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  background: rgba(255, 255, 255, 0.1);
  padding: 40px;
  border-radius: 10px;
  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(4px);
  border: 1px solid rgba(255, 255, 255, 0.18);
  width: 300px;
}

.login-container input {
  padding: 12px 15px;
  width: 100%;
  border: none;
  border-radius: 25px;
  background-color: rgba(255, 255, 255, 0.8);
  transition: all 0.3s ease;
  font-size: 16px;
}

.login-container input:focus {
  outline: none;
  background-color: white;
  box-shadow: 0 0 0 2px #667eea;
}

.login-container button {
  padding: 12px 20px;
  width: 100%;
  background-color: #667eea;
  color: white;
  border: none;
  border-radius: 25px;
  cursor: pointer;
  font-size: 18px;
  font-weight: bold;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.login-container button:hover {
  background-color: #5a6fd6;
  transform: translateY(-2px);
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}

.login-container button:active {
  transform: translateY(0);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

@media (max-width: 480px) {
  .login-container form {
    width: 100%;
    max-width: 300px;
  }
}

/* exam form */
.exam-container {
  max-width: 800px; /* Increased from 600px */
  margin: 3rem auto; /* Increased top and bottom margin */
  padding: 3rem; /* Increased padding */
  background: rgba(255, 255, 255, 0.1);
  border-radius: 20px; /* Increased border radius */
  box-shadow: 0 8px 100px rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.18);
  color: white;
}

.exam-container h2 {
  text-align: center;
  margin-bottom: 3rem; /* Increased margin */
  font-size: 2.5rem; /* Increased font size */
  color: #667eea;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-group {
  margin-bottom: 2rem; /* Increased margin */
}

.form-group label {
  display: block;
  margin-bottom: 0.75rem; /* Increased margin */
  font-size: 1.2rem; /* Increased font size */
  font-weight: bold;
}

.form-group select,
.lessons-select .select__control {
  width: 100%;
  padding: 1rem; /* Increased padding */
  border-radius: 12px; /* Increased border radius */
  border: 1px solid rgba(255, 255, 255, 0.3);
  background-color: rgba(33, 33, 33, 0.9); /* Darker background */
  color: white;
  font-size: 1.1rem; /* Increased font size */
  transition: all 0.3s ease;
}

.form-group select:focus,
.lessons-select .select__control--is-focused {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.5);
}

.lessons-select .select__menu {
  background-color: #212121;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.lessons-select .select__option {
  background-color: transparent;
  color: white;
  padding: 12px; /* Added padding */
  font-size: 1.1rem; /* Increased font size */
}

.lessons-select .select__option--is-focused {
  background-color: rgba(102, 126, 234, 0.2);
}

.lessons-select .select__option--is-selected {
  background-color: #667eea;
}

.lessons-select .select__multi-value {
  background-color: rgba(102, 126, 234, 0.2);
}

.lessons-select .select__multi-value__label {
  color: white;
}

.lessons-select .select__placeholder,
.lessons-select .select__single-value {
  color: rgba(255, 255, 255, 0.7); /* Lighter text color for better visibility */
}

.lessons-select .select__indicator-separator {
  background-color: rgba(255, 255, 255, 0.3); /* Lighter separator */
}

.lessons-select .select__dropdown-indicator {
  color: rgba(255, 255, 255, 0.7); /* Lighter dropdown indicator */
}

.submit-btn {
  display: block;
  width: 100%;
  padding: 1.25rem; /* Increased padding */
  background-color: #667eea;
  color: white;
  border: none;
  border-radius: 12px; /* Increased border radius */
  font-size: 1.2rem; /* Increased font size */
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-top: 2rem; /* Increased margin */
}

.submit-btn:hover {
  background-color: #5a6fd6;
  transform: translateY(-2px);
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2); /* Increased shadow */
}

.submit-btn:active {
  transform: translateY(0);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
}

@media (max-width: 768px) {
  .exam-container {
    margin: 1.5rem; /* Adjusted for mobile */
    margin-bottom: 60px;
    padding: 2rem; /* Adjusted for mobile */
  }
  
  .exam-container h2 {
    font-size: 2rem; /* Slightly smaller for mobile */
  }
  
  .form-group label,
  .form-group select,
  .lessons-select .select__control,
  .lessons-select .select__option,
  .submit-btn {
    font-size: 1rem; /* Adjusted for mobile */
  }
}
.notification {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  background-color: #ff6b6b;
  color: white;
  padding: 1rem 2rem;
  border-radius: 5px;
  z-index: 1000;
  animation: slideDown 0.5s ease-out;
}


@keyframes slideDown {
  from {
    top: -50px;
    opacity: 0;
  }
  to {
    top: 20px;
    opacity: 1;
  }
}

.submit-btn {
  position: relative;
  display: inline-flex;
  align-content: center;
  justify-content: center;
  min-width: 150px;
  /* ... (keep other existing styles for .submit-btn) */
}

.submit-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.submit-btn .spinner {
  margin-right: 8px;
}

.spinner {
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 2px solid #ffffff;
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.analysis-container {
  padding: 2rem;
  background-color: #181818;
  min-height: 100vh;
  transition: margin-left 0.3s ease-in-out;
  margin-left: 80px; /* Initial margin to account for the collapsed sidebar */
  padding-top: 4px; /* To account for the loading bar */

}

.analysis-title {
  text-align: center;
  color: #ffffff;
  margin-bottom: 2rem;
  font-size: 2.5rem;
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 2rem;
}

.analysis-card {
  background-color: #212121;
  border-radius: 15px;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  overflow: hidden;
}

.analysis-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 5px;
  background-color: var(--card-color);
}

.analysis-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.card-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.card-title {
  color: #ffffff;
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.card-content {
  color: #b0b0b0;
  text-align: center;
  margin-bottom: 1rem;
}

.card-button {
  background-color: var(--card-color);
  color: #ffffff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.card-button:hover {
  background-color: color-mix(in srgb, var(--card-color) 80%, black);
}

/* Responsive styles */
.sidebar:hover ~ .analysis-container {
  margin-left: 220px;
}

@media (max-width: 768px) {
  .analysis-container {
    margin-left: 0;
    margin-bottom: 60px;
  }

  .card-grid {
    grid-template-columns: 1fr;
  }
}

/* Skeleton Loading Styles */
@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.skeleton {
  background: #2a2a2a;
  background-image: linear-gradient(
    110deg,
    #2a2a2a 25%,
    #3a3a3a 37%,
    #2a2a2a 63%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite linear;
}

.skeleton-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  margin-bottom: 10px;
}

.skeleton-text {
  height: 20px;
  margin-bottom: 10px;
  border-radius: 4px;
}

.skeleton-button {
  width: 100px;
  height: 30px;
  border-radius: 4px;
  margin-top: 10px;
}

.analysis-card.skeleton {
  height: 250px; /* Adjust based on your actual card height */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.analysis-card.skeleton .card-content {
  width: 100%;
}

.analysis-card.skeleton .skeleton-text {
  width: 80%;
}

/* Transition Styles */
.card-wrapper {            
  position: relative;
}

.card-wrapper.loading .skeleton {
  opacity: 1;
  transition: opacity 0.3s ease-out;
}

.card-wrapper.loaded .skeleton {
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.card-wrapper.loaded .analysis-card {
  opacity: 0;
  animation: fadeIn 0.5s ease-in forwards;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Stagger the fade-in of cards */
.card-wrapper.loaded:nth-child(1) .analysis-card { animation-delay: 0.1s; }
.card-wrapper.loaded:nth-child(2) .analysis-card { animation-delay: 0.2s; }
.card-wrapper.loaded:nth-child(3) .analysis-card { animation-delay: 0.3s; }
.card-wrapper.loaded:nth-child(4) .analysis-card { animation-delay: 0.4s; }

/* ExamTaking.css */
.exam-taking-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  transition: margin-left 0.3s ease-in-out;
  margin-bottom: 40px;
}

.question-card {
  background-color: #2a2a2a;
  border-radius: 10px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.options-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;
  margin-top: 1rem;
}

.option {
  background-color: #3a3a3a;
  border-radius: 5px;
  padding: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.option:hover {
  background-color: #4a4a4a;
}

.option.selected {
  background-color: #667eea;
  color: white;
}

.submit-btn {
  display: block;
  width: 100%;
  padding: 1rem;
  background-color: #667eea;
  color: white;
  border: none;
  border-radius: 5px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-top: 2rem;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 150px;
  /* Center horizontally */
}

.submit-btn:hover {
  background-color: #5a6fd6;
}

@media (max-width: 768px) {
  .options-container {
    grid-template-columns: 1fr;
  }
}

/* ExamResults.css */
.exam-results-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  transition: margin-left 0.3s ease-in-out;
  margin-bottom: 40px;

}

.results-summary {
  background-color: #2a2a2a;
  border-radius: 10px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  text-align: center;
}

.question-result {
  background-color: #2a2a2a;
  border-radius: 10px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  position: relative;
}

.result-icon {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 24px;
  height: 24px;
}

.solution-card {
  background-color: #3a3a3a;
  border-radius: 5px;
  padding: 1rem;
  margin-top: 1rem;
}

.correct {
  border-left: 5px solid #4caf50;
}

.incorrect {
  border-left: 5px solid #f44336;
}

@media (max-width: 768px) {
  .exam-results-container {
    padding: 1rem;
  }
}

/* Exam Skeleton Loading Styles */
.exam-skeleton-container {
  max-width: 800px;
  margin: 3rem auto;
  padding: 3rem;
}

.exam-skeleton-card {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  animation: pulse 1.5s infinite;
}

.exam-skeleton-question {
  height: 24px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
  margin-bottom: 1.5rem;
}

.exam-skeleton-options {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;
}

.exam-skeleton-option {
  height: 40px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
}

@keyframes pulse {
  0% {
    opacity: 0.3;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.3;
  }
}
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.question-card {
  animation: fadeInUp 1s ease-out forwards;
  opacity: 0;
}

.exam-taking-container {
  overflow-y: auto;
  max-height: 90%; /* Adjust based on your layout */
}
/* Subject Details Styles */
.subject-details-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  color: white;
  transition: margin-left 0.3s ease-in-out, max-width 0.3s ease-in-out;
  text-align: center;
}

.sidebar ~ .subject-details-container {
  margin-left: 80px;
  max-width: calc(100% - 80px);
}

.sidebar:hover ~ .subject-details-container {
  margin-left: 220px;
  max-width: calc(100% - 220px);
}

.subject-title {
  margin-bottom: 2rem;
  font-size: 2.5rem;
  color: #ffffff;
}

.subject-details-grid {
  display: grid;
  grid-template-columns: repeat(3, minmax(0, 1fr));
  gap: 1.5%;
  justify-content: center;
  max-width: 1200px;
  margin: 0 auto;
  padding: 1%;
  height: 90%;
}

.subject-detail-card {
  background-color: #212121;
  border-radius: 15px;
  padding: 2% 1.5%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  overflow: hidden;
  height: 25vh;
}

.subject-detail-card .card-icon {
  font-size: 2.5vw;
  margin-bottom: 3%;
}

.subject-detail-card .card-title {
  font-size: 1.2vw;
  margin-bottom: 3%;
  text-align: center;
}

.subject-detail-card .card-value {
  font-size: 2vw;
}

@media (max-width: 768px) {
  .subject-details-grid {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;
    height: auto;
  }

  .subject-detail-card {
    height: auto;
    padding: 1.5rem;
  }

  .subject-detail-card .card-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .subject-detail-card .card-title {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }

  .subject-detail-card .card-value {
    font-size: 2rem;
  }
}

.subject-detail-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 5px;
  background-color: var(--card-color);
}

.subject-detail-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.history-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  transition: margin-left 0.3s ease-in-out, max-width 0.3s ease-in-out;
}

.sidebar ~ .history-container {
  margin-left: 80px;
  max-width: calc(100% - 80px);
}

.sidebar:hover ~ .history-container {
  margin-left: 220px;
  max-width: calc(100% - 220px);
}

.history-title {
  text-align: center;
  color: #ffffff;
  margin-bottom: 2rem;
  font-size: 2.5rem;
}

.history-list {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.history-card {
  background-color: #212121;
  border-radius: 15px;
  padding: 1.5rem;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  overflow: hidden;
}

.history-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  width: 5px;
  background-color: var(--card-color);
}

.history-card:hover {
  transform: translateX(5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.history-card-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.history-card-left {
  flex: 1;
}

.history-card-middle {
  flex: 2;
  display: flex;
  justify-content: space-around;
}

.history-card-right {
  flex: 0 0 auto;
  display: flex;
  justify-content: flex-end;
}

.subject-name {
  color: #ffffff;
  margin-bottom: 0.5rem;
  font-size: 1.5rem;
}

.exam-date {
  color: #b0b0b0;
  font-size: 0.9rem;
}

.detail-item {
  display: flex;
  align-items: center;
  color: #b0b0b0;
  font-size: 0.9rem;
}

.detail-item i {
  margin-right: 0.5rem;
  color: var(--card-color);
}

.score-container {
  text-align: center;
  background-color: var(--card-color);
  border-radius: 50%;
  width: 70px;
  height: 70px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.score {
  font-size: 1.5rem;
  font-weight: bold;
  color: #ffffff;
}

.percentage {
  font-size: 1rem;
  vertical-align: super;
}

/* Skeleton loading styles */
.history-card.skeleton {
  background-color: #212121;
}

.skeleton-text {
  background: linear-gradient(90deg, #333 25%, #444 37%, #333 63%);
  background-size: 400% 100%;
  animation: shimmer 1.5s ease-in-out infinite;
}

.skeleton-circle {
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background: linear-gradient(90deg, #333 25%, #444 37%, #333 63%);
  background-size: 400% 100%;
  animation: shimmer 1.5s ease-in-out infinite;
}
@keyframes shimmer {
  0% {
    background-position: 100% 0;
  }
  100% {
    background-position: -100% 0;
  }
}
.no-history-message {
  text-align: center;
  color: #b0b0b0;
  font-size: 1.2rem;
  margin-top: 2rem;
}

@media (max-width: 768px) {
  .sidebar ~ .history-container,
  .sidebar:hover ~ .history-container {
    margin-left: 0;
    max-width: 100%;
    margin-bottom: 60px;
    padding: 1rem;
  }

  .history-card-content {
    flex-wrap: wrap;
  }

  .history-card-left {
    flex: 1 0 100%;
    margin-bottom: 1rem;
  }

  .history-card-middle {
    flex: 1 0 100%;
    justify-content: space-between;
    margin-bottom: 1rem;
  }

  .history-card-right {
    flex: 0 0 auto;
    width: 100%;
    justify-content: flex-end;
  }

  .score-container {
    width: 60px;
    height: 60px;
  }

  .score {
    font-size: 1.3rem;
  }

  .percentage {
    font-size: 0.9rem;
  }
}
.question-number {
  background-color: #007bff;
  color: white;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  margin-right: 10px;
  flex-shrink: 0;
  font-size: 0.9em;
}

.question-header {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.question-text {
  margin: 0;
  font-size: 1.1em;
}
.progress-bar {
  width: 100%;
  height: 20px;
  background-color: #f0f0f0;
  border-radius: 10px;
  margin-bottom: 20px;
}

.progress {
  height: 100%;
  background-color: #4CAF50;
  border-radius: 10px;
  transition: width 0.5s ease-in-out;
}
.header {
  display: flex;
  justify-content: center;
  align-items: center;
  vertical-align: middle;
  padding: 0.5rem 1rem;
  background-color: #212121;
  height: 50px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1001;
  transition: transform 0.3s ease;
}

.header--hidden {
  transform: translateY(-50px);
}

.header-logo {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 1rem;
}

.header-text {
  font-weight: bold;
  font-size: 1.2rem;
  color: white;
}

/* Adjust other components */

.sidebar {
  top: 50px;
  height: calc(100% - 50px);
  transition: all 0.3s ease-in-out, top 0.3s ease;
}

.sidebar.header-hidden {
  top: 0;
  height: 100%;
}

.content {
  margin-top: 60px;
}
.exam-taking-container,
.exam-results-container,
.subject-details-container,
.history-container {
  margin-top: 20px;
}
.analysis-container{
  margin-top: 30px;
}
.exam-container{
  margin-top: 55px;
}

.header-hidden .exam-taking-container,
.header-hidden .exam-results-container,
.header-hidden .subject-details-container,
.header-hidden .history-container {
  margin-top: 10px;
}

.header-hidden .analysis-container {
  margin-top: 20px;
}

.header-hidden .exam-container {
  margin-top: 45px;
}
.header-hidden .ProgressBar {
  top: 0;
}
.report-button, .submit-btn, .option {
  backface-visibility: hidden;
  transform-style: preserve-3d;
  will-change: transform;
}

.spinning-icon {
  transform-origin: center;
}
particles-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 10;
}

.particle {
  position: absolute;
  width: 8px;
  height: 8px;
  background: #4f46e5;
  border-radius: 50%;
}

.submit-button-container {
  position: relative;
  width: 100%;
  display: flex;
  justify-content: center;
  margin: 2rem 0;
}

.submitting-content {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}
.submit-loading {
  display: flex;
  align-items: center;
  gap: 10px;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 3px solid #ffffff3d;
  border-top: 3px solid white;
  border-radius: 50%;
  display: inline-block;
}

/* Add these to your existing styles */
.update-popup-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: blur(4px);
  z-index: 9999; /* Higher than everything else */
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.update-popup {
  background: #212121;
  border-radius: 15px;
  padding: 2rem;
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
  color: white;
  position: relative;
  z-index: 10000;
  will-change: transform, opacity;
}

.update-popup h2 {
  color: white;
  font-size: 1.8rem;
  margin-bottom: 1.5rem;
}

.update-popup .version-info {
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding-bottom: 1rem;
  margin-bottom: 1rem;
}

.update-popup .changes-list {
  list-style: none;
  padding: 0;
}

.update-popup .changes-list li {
  margin-bottom: 0.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: rgba(255, 255, 255, 0.9);
}

@media (prefers-color-scheme: dark) {
  .update-popup {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
  }
}

/* Update the existing update-popup styles */
.update-popup-button {
  width: 100%;
  padding: 12px;
  background: linear-gradient(135deg, #4f46e5 0%, #3c3599 100%);
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 1.5rem;
  transition: all 0.2s ease;
  box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
}

.update-popup-button:hover {
  background: linear-gradient(135deg, #5b52ff 0%, #4840b3 100%);
  box-shadow: 0 6px 16px rgba(79, 70, 229, 0.4);
}
.change-item {
  display: flex;
  flex-direction: column;
  margin-bottom: 8px;
}

.change-title {
  display: flex;
  align-items: flex-start;
}

.bullet {
  margin-right: 8px;
}

.change-description {
  margin-left: 20px;
  margin-top: 4px;
  color: #666;
  margin-bottom:-5px;
  font-size: 0.9em;
  font-style: italic;

}

.subject-popup-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: blur(8px);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.subject-popup {
  background: #111111;
  border-radius: 15px;
  width: 70%;
  height: 90%;
  max-width: 1200px;
  position: relative;
  overflow: hidden;
  transition: margin-left 0.3s ease-in-out;
}

.popup-content {
  height: 100%;
  width: 100%;
  overflow-y: auto;
  padding: 2rem;
  /* Add smooth scrolling */
  scroll-behavior: smooth;
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.close-button {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.1);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  z-index: 2;
}

/* Add sidebar open state */
.sidebar:hover ~ .subject-popup-overlay .subject-popup {
  margin-left: 220px; /* Match the expanded sidebar width */
  width: calc(70% - 140px); /* Adjust width to account for expanded sidebar */
}

/* Update mobile styles */
@media (max-width: 768px) {
  .subject-popup {
    width: 100%;
    height: 100%;
    margin-left: 0;
    margin-bottom: 20px;
  }

  .popup-content {
    padding: 1rem;
  }

  .sidebar:hover ~ .subject-popup-overlay .subject-popup {
    margin-left: 0;
    width: 95%;
  }
}

/* Update the subject details container inside popup */
.subject-popup .subject-details-container {
  margin: 0;
  padding: 0;
  height: auto;
}

.subject-popup .subject-details-grid {
  padding-bottom: 2rem;
}
.lessons-attempted {
  display: flex;
  align-items: center;
  gap: 15px;
  margin: 20px 0;
}

.lessons-attempted h4 {
  margin: 0;
  white-space: nowrap;
}

.lessons-list {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.lesson-item {
  background-color: #2a2a2a;
  padding: 6px 12px;
  border-radius: 6px;
  font-weight: bold;
  font-size: 0.9em;
}
.nav-item.active {
  color: #007bff; /* or your preferred highlight color */
  position: relative;
}

.sidebar .btn.active {
  color: #007bff;
  background-color: rgba(0, 123, 255, 0.1);
  position: relative;
  width: 90%;
  
}

.test-series-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  transition: margin-left 0.3s ease-in-out, max-width 0.3s ease-in-out;
  margin-left: 80px;
  max-width: calc(100% - 80px);
}

.sidebar:hover ~ .test-series-container {
  margin-left: 220px;
  max-width: calc(100% - 220px);
}

@media (max-width: 768px) {
  .test-series-container {
    margin-left: 0;
    max-width: 100%;
    padding: 1rem;
    margin-bottom: 70px;
  }
  
  .sidebar:hover ~ .test-series-container {
    margin-left: 0;
    max-width: 100%;
  }
}

.page-title {
  font-size: 2.5rem;
  margin-bottom: 2rem;
  color: white;
  text-align: center;
}

.tests-grid {
  display: grid;
  gap: 2rem;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.lesson-tag {
  display: inline-block;
  background: rgba(255, 255, 255, 0.15);
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  margin: 0.5rem 0.5rem 0 0;
  font-size: 0.9rem;
}

.test-id {
  font-family: ROBOTO;
  font-size: 1.1rem;
  opacity: 0.8;
}

.loading-skeleton {
  display: grid;
  gap: 2rem;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.skeleton-card {
  height: 200px;
  background: linear-gradient(90deg, #2a2a2a 25%, #3a3a3a 50%, #2a2a2a 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: 15px;
}

@keyframes shimmer {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

@media (max-width: 768px) {
  .test-series-container {
    padding: 1rem;
  }
  
  .tests-grid {
    grid-template-columns: 1fr;
  }
}


.test-card.skeleton {
  padding: 20px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  height: 100%;
}

.test-card.skeleton:hover {
  transform: translateY(-2px);
  transition: transform 0.2s ease;
}

.question-card textarea {
  background: #3a3a3a;
  border: none;
  border-radius: 5px;
  padding: 1rem;
  color: white;
  font-size: 1rem;
  min-height: 100px;
  resize: vertical;
}

.question-card input {
  background: #3a3a3a;
  border: none;
  border-radius: 5px;
  padding: 0.5rem;
  color: white;
  font-size: 1rem;
}

.question-card .option input[type="radio"] {
  margin-left: 1rem;
}
.question-actions {
  position: absolute;
  top: 10px;
  right: 10px;
  display: flex;
  gap: 10px;
}

.question-actions button {
  background: transparent;
  border: none;
  cursor: pointer;
  color: #666;
  padding: 5px;
}

.edit-question-form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 15px;
}

.edit-question-form input {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.add-question-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  margin: 20px auto;
  padding: 12px 24px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

.create-test-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.create-test-container h1 {
  margin-bottom: 2rem;
  color: #fff;
}

.options-container {
  display: grid;
  gap: 1rem;
  margin-top: 1rem;
}

.option {
  background: #333;
  padding: 1rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.2s;
}


@media (max-width: 768px) {
  .sidebar {
    display: none;
  }
  .bottom-nav {
    display: block;
  }
}

@media (min-width: 769px) {
  .bottom-nav {
    display: none;
  }
  .sidebar {
    display: block;
  }
}
/* Add these styles to your existing CSS file */

.performance-analysis {
  background: #1a1a1a;
  border-radius: 15px;
  padding: 2rem;
  margin: 2rem 0;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.performance-header {
  display: flex;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.performance-header h2 {
  margin: 0;
  margin-left: 1rem;
  color: #fff;
  font-size: 1.8rem;
}

.analysis-icon {
  font-size: 2rem;
  color: #667eea;
}

.analysis-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.analysis-section {
  background: rgba(255, 255, 255, 0.03);
  border-radius: 12px;
  padding: 1.5rem;
}

.section-header {
  display: flex;
  align-items: center;
  margin-bottom: 1rem;
}

.section-icon {
  font-size: 1.4rem;
  margin-right: 1rem;
}

.section-header h3 {
  margin: 0;
  font-size: 1.4rem;
  color: #fff;
}

.section-content {
  color: rgba(255, 255, 255, 0.9);
  line-height: 1.6;
}

.content-line {
  margin: 0.5rem 0;
}

.indent-0 { margin-left: 0; }
.indent-2 { margin-left: 1.5rem; }
.indent-4 { margin-left: 3rem; }

/* Icon colors based on section */
.section-icon {
  &.fa-chart-line { color: #667eea; }
  &.fa-exclamation-triangle { color: #f6ad55; }
  &.fa-lightbulb { color: #faf089; }
  &.fa-check-circle { color: #68d391; }
}

@media (max-width: 768px) {
  .performance-analysis {
    padding: 1rem;
  }
  
  .analysis-section {
    padding: 1rem;
  }
  
  .section-header h3 {
    font-size: 1.2rem;
  }
  
  .indent-2 { margin-left: 1rem; }
  .indent-4 { margin-left: 2rem; }
}

--------------------------------------------------------------------------------
File: src\components\exam.css
--------------------------------------------------------------------------------

.exam-page {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  position: relative;
  overflow: hidden;
}

.exam-page::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle at center, #4facfe15 0%, transparent 50%);
  animation: rotate 30s linear infinite;
  z-index: -1;
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.exam-card {
  background: rgba(33, 33, 33, 0.8);
  padding: 2.5rem;
  border-radius: 24px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.3),
    inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(12px);
  width: 100%;
  max-width: 500px;
  margin: 20px auto;
  position: relative;
  overflow: hidden;
}

.exam-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(79, 172, 254, 0.3) 50%, 
    transparent 100%
  );
}

.exam-title {
  color: #fff;
  font-size: 2.2rem;
  font-weight: 800;
  text-align: center;
  margin-bottom: 2.5rem;
  background: linear-gradient(135deg, #4facfe, #00f2fe);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  position: relative;
  text-shadow: 0 2px 10px rgba(79, 172, 254, 0.3);
}

.exam-title::after {
  content: '';
  display: block;
  width: 60px;
  height: 4px;
  background: linear-gradient(90deg, #4facfe, #00f2fe);
  margin: 0.5rem auto 0;
  border-radius: 2px;
  box-shadow: 0 2px 10px rgba(79, 172, 254, 0.3);
}

.form-group {
  --scale: 1;
  display: flex;
  flex-direction: column;
  margin-bottom: 2rem;
  position: relative;
}

.form-group label {
  display: flex;
  align-items: center;
  margin-bottom: 0.8rem;
  color: #fff;
  font-weight: 600;
  font-size: 1rem;
  letter-spacing: 0.5px;
  text-transform: uppercase;
  opacity: 0.9;
  white-space: nowrap;
  line-height: 1;
}

.form-group select {
  width: 100%;
  padding: 1rem;
  border: 2px solid rgba(79, 172, 254, 0.2);
  border-radius: 12px;
  background-color: rgba(33, 33, 33, 0.6);
  font-size: 1rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  color: #fff;
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  background-size: 1em;
  cursor: pointer;
}

.form-group select:hover {
  border-color: rgba(79, 172, 254, 0.4);
  box-shadow: 0 0 15px rgba(79, 172, 254, 0.1);
}

.form-group select:focus {
  outline: none;
  border-color: #4facfe;
  box-shadow: 
    0 0 0 3px rgba(79, 172, 254, 0.2),
    0 0 15px rgba(79, 172, 254, 0.2);
}

.form-group select option {
  background-color: #212121;
  color: #fff;
  padding: 1rem;
}

.lessons-select {
  margin-top: 0.5rem;
}

.select__control {
  background-color: rgba(33, 33, 33, 0.6) !important;
  border: 2px solid rgba(79, 172, 254, 0.2) !important;
  border-radius: 12px !important;
  min-height: 50px !important;
  box-shadow: none !important;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
  cursor: pointer !important;
}

.select__control:hover {
  border-color: rgba(79, 172, 254, 0.4) !important;
  box-shadow: 0 0 15px rgba(79, 172, 254, 0.1) !important;
}

.select__control--is-focused {
  border-color: #4facfe !important;
  box-shadow: 
    0 0 0 3px rgba(79, 172, 254, 0.2),
    0 0 15px rgba(79, 172, 254, 0.2) !important;
}

.select__menu {
  background-color: rgba(33, 33, 33, 0.95) !important;
  border: 1px solid rgba(79, 172, 254, 0.2) !important;
  color: #fff !important;
  border-radius: 12px !important;
  overflow: hidden !important;
  backdrop-filter: blur(12px);
  margin-top: 8px !important;
  z-index: 1000 !important;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2) !important;
  position: fixed !important;
  max-height: 60vh !important;
  width: calc(100% - 40px) !important;
  left: 20px !important;
  right: 20px !important;
}

.select__menu-list {
  background-color: rgba(33, 33, 33, 0.95) !important;
  padding: 8px !important;
  max-height: calc(60vh - 20px) !important;
  overflow-y: auto !important;
  scrollbar-width: thin;
  scrollbar-color: rgba(79, 172, 254, 0.5) rgba(33, 33, 33, 0.2);
}

@media (max-width: 768px) {
  .select__menu {
    position: fixed !important;
    bottom: 80px !important;
    top: auto !important;
    max-height: 50vh !important;
  }

  .select__menu-list {
    max-height: calc(50vh - 20px) !important;
  }
}

.select__menu-list::-webkit-scrollbar {
  width: 6px;
}

.select__menu-list::-webkit-scrollbar-track {
  background: rgba(33, 33, 33, 0.2);
  border-radius: 3px;
}

.select__menu-list::-webkit-scrollbar-thumb {
  background: rgba(79, 172, 254, 0.5);
  border-radius: 3px;
}

.select__option {
  background-color: transparent !important;
  color: #fff !important;
  padding: 12px !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
}

.select__option--is-focused {
  background-color: rgba(79, 172, 254, 0.1) !important;
}

.select__option--is-selected {
  background: linear-gradient(90deg, #4facfe, #00f2fe) !important;
  color: #000 !important;
  font-weight: 600 !important;
}

.select__multi-value {
  background: rgba(79, 172, 254, 0.15) !important;
  border-radius: 6px !important;
  margin: 3px !important;
  padding: 2px !important;
  max-width: calc(100% - 6px) !important;
  display: inline-flex !important;
  flex-shrink: 0 !important;
  border: 1px solid rgba(79, 172, 254, 0.3) !important;
  transition: all 0.2s ease !important;
}

.select__multi-value:hover {
  background: rgba(79, 172, 254, 0.25) !important;
  border-color: rgba(79, 172, 254, 0.4) !important;
  transform: translateY(-1px) !important;
}

.select__multi-value__label {
  color: #fff !important;
  font-size: 0.9rem !important;
  padding: 3px 8px !important;
  font-weight: 500 !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
}

.select__multi-value__remove {
  padding: 0 4px !important;
  color: rgba(255, 255, 255, 0.7) !important;
}

.select__multi-value__remove:hover {
  background: rgba(255, 255, 255, 0.1) !important;
  color: #fff !important;
}

.select__value-container {
  flex-wrap: wrap !important;
  max-height: none !important;
  overflow-y: auto !important;
  padding: 4px 8px !important;
  gap: 4px !important;
}

.submit-button {
  width: 100%;
  padding: 1rem;
  background: linear-gradient(135deg, #4facfe, #00f2fe);
  color: #000;
  border: none;
  border-radius: 12px;
  font-size: 1.1rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  margin-top: 2rem;
  position: relative;
  overflow: hidden;
  letter-spacing: 0.5px;
  text-transform: uppercase;
}

.submit-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transform: translateX(-100%);
}

.submit-button:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 8px 20px rgba(79, 172, 254, 0.3),
    0 0 0 1px rgba(79, 172, 254, 0.3);
}

.submit-button:hover::before {
  transform: translateX(100%);
  transition: transform 0.8s ease;
}

.submit-button:active {
  transform: translateY(0);
}

.submit-button:disabled {
  background: #2a2a2a;
  color: rgba(255, 255, 255, 0.3);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 1rem 1.5rem;
  background: rgba(33, 33, 33, 0.95);
  border: 1px solid rgba(79, 172, 254, 0.2);
  border-radius: 12px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    0 0 0 1px rgba(255, 255, 255, 0.1);
  color: #fff;
  z-index: 1000;
  max-width: 300px;
  backdrop-filter: blur(12px);
  animation: slideIn 0.3s ease forwards;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.tip-badge {
  display: inline-flex;
  align-items: center;
  margin-left: 6px;
  padding: 2px 8px;
  background: rgba(79, 172, 254, 0.1);
  border-radius: 16px;
  font-size: 0.7rem;
  color: #4facfe;
  border: 1px solid rgba(79, 172, 254, 0.2);
  box-shadow: 0 2px 8px rgba(79, 172, 254, 0.1);
  font-weight: 500;
  letter-spacing: 0.3px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  height: 18px;
  line-height: 1;
  transform-origin: left center;
  scale: var(--scale, 1);
}

@container form-group (max-width: 300px) {
  .tip-badge {
    --scale: 0.9;
  }
}

@container form-group (max-width: 250px) {
  .tip-badge {
    --scale: 0.8;
  }
}

@container form-group (max-width: 200px) {
  .tip-badge {
    --scale: 0.7;
  }
}

.required-field {
  color: #ff4d4d;
  margin-left: 4px;
  font-weight: bold;
}

/* Loading skeleton styles */
.exam-skeleton-container {
  padding: 2rem;
}

.exam-skeleton-card {
  background: rgba(33, 33, 33, 0.8);
  padding: 1.5rem;
  border-radius: 12px;
  margin-bottom: 1rem;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(12px);
}

.exam-skeleton-question {
  height: 24px;
  background: linear-gradient(90deg, 
    rgba(79, 172, 254, 0.05) 25%, 
    rgba(79, 172, 254, 0.1) 50%, 
    rgba(79, 172, 254, 0.05) 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: 6px;
  margin-bottom: 1rem;
}

.exam-skeleton-option {
  height: 20px;
  background: linear-gradient(90deg, 
    rgba(79, 172, 254, 0.05) 25%, 
    rgba(79, 172, 254, 0.1) 50%, 
    rgba(79, 172, 254, 0.05) 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: 6px;
  margin: 0.5rem 0;
  width: 80%;
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

@media (max-width: 768px) {
  .exam-card {
    margin-bottom: 80px;
  }
  
  .select__menu {
    position: fixed !important;
    top: auto !important;
    bottom: 80px !important;
    left: 10px !important;
    right: 10px !important;
    width: calc(100% - 20px) !important;
    margin: 0 !important;
  }

  .select__menu-list {
    max-height: 40vh !important;
  }

  .select__multi-value {
    max-width: calc(100% - 6px) !important;
  }

  .select__control {
    min-height: 50px !important;
  }
}

/* Prevent keyboard from showing on first tap */
.select__input-container {
  pointer-events: none !important;
}

.select__control--menu-is-open .select__input-container {
  pointer-events: auto !important;
}

body.select-menu-open {
  overflow: hidden !important;
}

.lessons-popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 20px;
}

.lessons-popup {
  background: #1a1a1a;
  border-radius: 16px;
  width: 100%;
  max-width: 600px;
  max-height: 80vh;
  display: flex;
  flex-direction: column;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.lessons-popup-header {
  padding: 20px 24px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.lessons-popup-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #fff;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 12px;
}

.lessons-popup-title-icon {
  color: #4facfe;
  display: flex;
  align-items: center;
  justify-content: center;
}

.lessons-popup-close {
  background: none;
  border: none;
  color: rgba(255, 255, 255, 0.6);
  cursor: pointer;
  padding: 8px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.lessons-popup-close:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #fff;
}

.lessons-popup-content {
  padding: 24px;
  flex: 1;
  overflow-y: auto;
  min-height: 0;
}

.lessons-popup-search {
  position: relative;
  margin-bottom: 20px;
}

.lessons-popup-search input {
  width: 100%;
  padding: 12px 16px 12px 44px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: #fff;
  font-size: 1rem;
  transition: all 0.2s ease;
}

.lessons-popup-search input:focus {
  outline: none;
  border-color: #4facfe;
  background: rgba(255, 255, 255, 0.08);
}

.lessons-popup-search-icon {
  position: absolute;
  left: 16px;
  top: 50%;
  transform: translateY(-50%);
  color: rgba(255, 255, 255, 0.4);
  pointer-events: none;
}

.lessons-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 12px;
}

.lesson-item {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 12px 16px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  transition: all 0.2s ease;
}

.lesson-item:hover {
  background: rgba(255, 255, 255, 0.08);
  border-color: rgba(255, 255, 255, 0.2);
}

.lesson-item.selected {
  background: rgba(79, 172, 254, 0.15);
  border-color: #4facfe;
}

.lesson-item-text {
  color: #fff;
  font-size: 0.9rem;
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.lesson-item-checkbox {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 6px;
  position: relative;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.lesson-item.selected .lesson-item-checkbox {
  background: #4facfe;
  border-color: #4facfe;
}

.lesson-item.selected .lesson-item-checkbox::after {
  content: '';
  position: absolute;
  left: 6px;
  top: 3px;
  width: 4px;
  height: 8px;
  border: solid #fff;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}

.lessons-popup-footer {
  padding: 20px 24px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  gap: 16px;
}

.selected-count {
  color: rgba(255, 255, 255, 0.6);
  font-size: 0.9rem;
  margin-right: auto;
}

.lessons-popup-btn {
  padding: 8px 20px;
  border-radius: 8px;
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.lessons-popup-btn-secondary {
  background: rgba(255, 255, 255, 0.1);
  border: none;
  color: #fff;
}

.lessons-popup-btn-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
}

.lessons-popup-btn-primary {
  background: #4facfe;
  border: none;
  color: #fff;
}

.lessons-popup-btn-primary:hover {
  background: #3d9be7;
}

@media (max-width: 768px) {
  .lessons-popup {
    max-height: 90vh;
  }

  .lessons-grid {
    grid-template-columns: 1fr;
  }

  .lessons-popup-footer {
    flex-wrap: wrap;
  }

  .selected-count {
    width: 100%;
    margin-bottom: 12px;
  }

  .lessons-popup-btn {
    flex: 1;
  }
}

.lessons-display {
  width: 100%;
  padding: 1rem !important;
  background-color: rgba(33, 33, 33, 0.6) !important;
  border: 2px solid rgba(79, 172, 254, 0.2) !important;
  border-radius: 12px !important;
  min-height: 50px !important;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
  cursor: pointer !important;
  display: flex !important;
  flex-wrap: wrap !important;
  gap: 6px !important;
}

.lessons-display:hover {
  border-color: rgba(79, 172, 254, 0.4) !important;
  box-shadow: 0 0 15px rgba(79, 172, 254, 0.1) !important;
}

.lessons-display.focused {
  border-color: #4facfe !important;
  box-shadow: 
    0 0 0 3px rgba(79, 172, 254, 0.2),
    0 0 15px rgba(79, 172, 254, 0.2) !important;
}

.lesson-tag {
  background: rgba(79, 172, 254, 0.15) !important;
  border-radius: 6px !important;
  margin: 2px !important;
  padding: 4px 12px !important;
  display: inline-flex !important;
  align-items: center !important;
  gap: 8px !important;
  border: 1px solid rgba(79, 172, 254, 0.3) !important;
  transition: all 0.2s ease !important;
  color: #fff !important;
  font-size: 0.9rem !important;
  font-weight: 500 !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  max-width: calc(100% - 4px) !important;
}

.lesson-tag:hover {
  background: rgba(79, 172, 254, 0.25) !important;
  border-color: rgba(79, 172, 254, 0.4) !important;
  transform: translateY(-1px) !important;
}

.lessons-placeholder {
  color: rgba(255, 255, 255, 0.5) !important;
  font-size: 0.9rem !important;
  padding: 4px !important;
}

.lesson-item.skeleton {
  cursor: default;
  pointer-events: none;
  overflow: hidden;
  position: relative;
}

.lesson-skeleton-content {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
}

.lesson-skeleton-text {
  height: 16px;
  flex: 1;
  background: linear-gradient(90deg, 
    rgba(79, 172, 254, 0.05) 25%, 
    rgba(79, 172, 254, 0.1) 50%, 
    rgba(79, 172, 254, 0.05) 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: 4px;
}

.lesson-skeleton-checkbox {
  width: 20px;
  height: 20px;
  border-radius: 6px;
  background: linear-gradient(90deg, 
    rgba(79, 172, 254, 0.05) 25%, 
    rgba(79, 172, 254, 0.1) 50%, 
    rgba(79, 172, 254, 0.05) 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  flex-shrink: 0;
}

.lesson-item.skeleton::after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.05),
    transparent
  );
  transform: translateX(-100%);
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  100% {
    transform: translateX(100%);
  }
}

/* Table responsive styles */
@media (max-width: 768px) {
  .exam-page .table-container {
    margin: 0.5rem -1rem;
    width: calc(100% + 2rem);
    border-radius: 0;
  }

  .exam-page table {
    font-size: 0.9rem;
  }

  .exam-page th,
  .exam-page td {
    padding: 0.5rem;
  }
}

@media (max-width: 480px) {
  .exam-page table {
    font-size: 0.8rem;
  }

  .exam-page th,
  .exam-page td {
    padding: 0.4rem;
  }
}

/* Add smooth scrolling for table container */
.exam-page .table-container {
  -webkit-overflow-scrolling: touch;
  scrollbar-width: thin;
  scrollbar-color: rgba(79, 172, 254, 0.5) transparent;
}

.exam-page .table-container::-webkit-scrollbar {
  height: 6px;
}

.exam-page .table-container::-webkit-scrollbar-track {
  background: transparent;
}

.exam-page .table-container::-webkit-scrollbar-thumb {
  background-color: rgba(79, 172, 254, 0.5);
  border-radius: 3px;
}

/* Table responsive styles for CreateTest */
.create-test-container .table-container {
  -webkit-overflow-scrolling: touch;
  scrollbar-width: thin;
  scrollbar-color: rgba(79, 172, 254, 0.5) transparent;
}

.create-test-container .table-container::-webkit-scrollbar {
  height: 6px;
}

.create-test-container .table-container::-webkit-scrollbar-track {
  background: transparent;
}

.create-test-container .table-container::-webkit-scrollbar-thumb {
  background-color: rgba(79, 172, 254, 0.5);
  border-radius: 3px;
}

@media (max-width: 768px) {
  .create-test-container .table-container {
    margin: 0.5rem -1rem;
    width: calc(100% + 2rem);
    border-radius: 0;
  }

  .create-test-container table {
    font-size: 0.9rem;
  }

  .create-test-container th,
  .create-test-container td {
    padding: 0.5rem;
  }
}

@media (max-width: 480px) {
  .create-test-container table {
    font-size: 0.8rem;
  }

  .create-test-container th,
  .create-test-container td {
    padding: 0.4rem;
  }
}


--------------------------------------------------------------------------------
File: src\components\History.css
--------------------------------------------------------------------------------

.history-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  min-height: calc(100vh - 4rem);
}

.history-header {
  margin-bottom: 3rem;
  position: relative;
  text-align: center;
}

.history-header::after {
  content: '';
  position: absolute;
  bottom: -1.5rem;
  left: 50%;
  transform: translateX(-50%);
  width: 100px;
  height: 3px;
  background: linear-gradient(90deg, #2196F3, transparent);
  border-radius: 2px;
  opacity: 0.8;
}

.history-header h1 {
  font-size: 2.2rem;
  font-weight: 700;
  letter-spacing: -0.5px;
  margin-bottom: 1.5rem;
  text-transform: uppercase;
  background: linear-gradient(45deg, #fff, #2196F3);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 0 2px 10px rgba(33, 150, 243, 0.2);
}

/* Stats Container */
.stats-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.5rem;
  backdrop-filter: blur(10px);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transform: translateX(-100%);
  transition: transform 0.6s;
}

.stat-card:hover {
  transform: translateY(-5px) scale(1.02);
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
  border-color: rgba(255, 255, 255, 0.2);
}

.stat-card:hover::before {
  transform: translateX(100%);
}

.stat-card i {
  font-size: 2.2rem;
  color: #2196F3;
  opacity: 0.9;
  transition: transform 0.3s ease;
}

.stat-card:hover i {
  transform: scale(1.1);
}

.stat-info {
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
}

.stat-value {
  font-size: 1.8rem;
  font-weight: 700;
  color: #fff;
  letter-spacing: 0.5px;
}

.stat-label {
  font-size: 0.95rem;
  color: rgba(255, 255, 255, 0.7);
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 500;
}

/* Filter Tabs */
.filter-tabs {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  justify-content: center;
}

.filter-tab {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1.5rem;
  border-radius: 20px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  color: rgba(255, 255, 255, 0.7);
}

.filter-tab:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #fff;
}

.filter-tab.active {
  background: #2196F3;
  color: #fff;
  font-weight: 600;
  box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
}

/* Exam Grid */
.exam-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 1.5rem;
}

/* Exam Card */
.exam-card {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.exam-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.05), transparent);
  transform: translateX(-100%);
  transition: transform 0.6s;
}

.exam-card:hover {
  transform: translateY(-5px);
  border-color: rgba(33, 150, 243, 0.5);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

.exam-card:hover::before {
  transform: translateX(100%);
}

.exam-card-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.subject-icon {
  width: 40px;
  height: 40px;
  background: #212121;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.subject-icon i {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.9);
}

.subject-icon:hover {
  background: #2a2a2a;
  border-color: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

.exam-info {
  flex: 1;
}

.exam-info h3 {
  margin: 0;
  font-size: 1.4rem;
  color: #fff;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.exam-date {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.6);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.exam-date::before {
  content: '•';
  color: #2196F3;
}

/* Progress Ring */
.progress-ring {
  width: 50px;
  height: 50px;
  position: relative;
  margin-left: 10px;
}

.progress-ring svg {
  width: 100%;
  height: 100%;
  filter: drop-shadow(0px 2px 4px rgba(0, 0, 0, 0.2));
}

.progress-ring circle {
  transition: stroke-dashoffset 0.5s ease-in-out;
}

/* Exam Details */
.exam-card-details {
  padding: 1.8rem;
}

.detail-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
}

.detail-item {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
}

.detail-label {
  font-size: 0.85rem;
  color: rgba(255, 255, 255, 0.6);
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 500;
}

.detail-value {
  font-size: 1.2rem;
  color: #fff;
  font-weight: 600;
  letter-spacing: 0.5px;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 3rem;
  background: rgba(255, 255, 255, 0.02);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.empty-state-icon {
  font-size: 3rem;
  color: #2196F3;
  margin-bottom: 1rem;
  opacity: 0.8;
}

.empty-state h2 {
  color: #fff;
  font-size: 2rem;
  margin-bottom: 1rem;
  font-weight: 700;
}

.empty-state p {
  color: rgba(255, 255, 255, 0.6);
  font-size: 1.1rem;
  max-width: 400px;
  margin: 0 auto;
  line-height: 1.6;
}

/* Skeleton Loading */
.skeleton {
  position: relative;
  overflow: hidden;
}

.skeleton-circle {
  width: 54px;
  height: 54px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
}

.skeleton-text {
  height: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 4px;
  margin: 0.25rem 0;
}

.skeleton::after {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.08),
    transparent
  );
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .history-container {
    padding: 1rem;
  }

  .history-header h1 {
    font-size: 2rem;
  }

  .stats-container {
    gap: 1rem;
  }

  .stat-card {
    padding: 1.2rem;
  }

  .exam-grid {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }

  .exam-card {
    margin-bottom: 0.5rem;
    padding: 1rem;
  }

  .exam-card-header {
    padding: 1.2rem;
  }

  .exam-card-details {
    padding: 1.2rem;
  }

  .detail-grid {
    gap: 0.8rem;
  }

  .filter-tabs {
    display: flex;
    flex-wrap: nowrap;     /* Prevent wrapping */
    overflow-x: auto;      /* Allow horizontal scroll if needed */
    gap: 0.3rem;
    margin-bottom: 1rem;
    width: 100%;
    -webkit-overflow-scrolling: touch;  /* Smooth scroll on iOS */
  }

  .filter-tab {
    padding: 0.4rem;
    font-size: 0.85rem;
    flex: 0 0 auto;       /* Don't allow shrinking */
    min-width: min-content;  /* Take minimum width needed */
    white-space: nowrap;
  }

  .filter-tab .subject-icon {
    width: 20px;
    height: 20px;
    margin-right: 3px;
  }

  .filter-tab .subject-icon i {
    font-size: 0.75rem;
  }

  .exam-card {
    margin-bottom: 1rem;
  }
}

@media (max-width: 480px) {
  .history-container {
    padding: 0.8rem;
  }

  .history-header h1 {
    font-size: 1.8rem;
  }

  .stat-card {
    padding: 1rem;
  }

  .exam-card-header {
    padding: 1rem;
  }

  .exam-card-details {
    padding: 1rem;
  }

  .detail-grid {
    gap: 0.6rem;
  }
}

/* Filter Tab Icon Styles */
.filter-tab .subject-icon {
  width: 30px;
  height: 30px;
  background: #212121;
  margin-right: 5px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.filter-tab .subject-icon i {
  font-size: 1rem;
  color: rgba(255, 255, 255, 0.7);
}

.filter-tab:hover .subject-icon {
  background: #2a2a2a;
  border-color: rgba(255, 255, 255, 0.2);
}

.filter-tab.active .subject-icon {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
}

.filter-tab.active .subject-icon i {
  color: white;
}


--------------------------------------------------------------------------------
File: src\components\LandingPage.css
--------------------------------------------------------------------------------

.landing-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #1a202c 0%, #000000 100%);
    color: white;
    overflow-x: hidden;
    position: relative;
  }
  
  .landing-nav {
    padding: 1.5rem 2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 100;
    background: rgba(26, 38, 44, 0.9);
    backdrop-filter: blur(10px);
  }
  
  .logo {
    font-size: 2rem;
    font-weight: bold;
    background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .landing-main {
    padding: 0;
    max-width: 100%;
    margin: 0;
  }
  
  .hero-section {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    padding: 0 1rem;
  }
  
  .hero-content {
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .hero-section h1 {
    font-size: 4rem;
    font-weight: bold;
    background: linear-gradient(45deg, #3182ce, #805ad5);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1.5rem;
  }
  
  .hero-section p {
    font-size: 1.2rem;
    color: #b0b0b0;
    max-width: 600px;
    margin: 0 auto 2rem;
  }
  
  .get-started-btn {
    padding: 1rem 2.5rem;
    font-size: 1.2rem;
    background: linear-gradient(45deg, #3182ce, #805ad5);
    border: none;
    border-radius: 9999px;
    color: white;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    overflow: hidden;
  }
  
  .get-started-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 0 20px rgba(49, 130, 206, 0.4);
  }
  
  .features-section {
    min-height: 100vh;
    padding: 6rem 2rem;
    background: rgba(15, 15, 15, 0.95);
    position: relative;
  }
  
  .features-section h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
  }
  
  .features-grid {
    max-width: 1400px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 3rem;
    padding: 4rem 2rem;
  }
  
  .feature-card {
    background: rgba(26, 32, 44, 0.8);
    border-radius: 15px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  
  .feature-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #4facfe, #00f2fe);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .feature-card h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: white;
  }
  
  .feature-card p {
    color: #b0b0b0;
    line-height: 1.6;
  }
  
  .scroll-indicator {
    font-size: 2rem;
    color: rgba(255, 255, 255, 0.5);
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
  }
  
  .creator-section {
    text-align: center;
    padding: 4rem 2rem;
    background: rgba(15, 15, 15, 0.95);
  }
  
  .creator-section h2 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    background: linear-gradient(45deg, #4facfe, #00f2fe);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .creator-section p {
    color: #b0b0b0;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }
  
  .landing-footer {
    text-align: center;
    padding: 2rem;
    background: rgba(0, 0, 0, 0.9);
    color: #666;
  }
  
  .progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(to right, #4facfe, #00f2fe);
    transform-origin: 0%;
    z-index: 1000;
  }
  
  .arrow-icon {
    display: inline-block;
    margin-left: 0.5rem;
    transition: transform 0.3s ease;
  }
  
  .get-started-btn:hover .arrow-icon {
    transform: translateX(5px);
  }
  
  /* Media Queries for Responsiveness */
  @media (max-width: 768px) {
    .hero-section h1 {
      font-size: 2.5rem;
    }
  
    .features-grid {
      grid-template-columns: 1fr;
      padding: 2rem 1rem;
    }
  
    .get-started-btn {
      padding: 0.8rem 2rem;
      font-size: 1rem;
    }
  
    .feature-card {
      padding: 1.5rem;
    }
  }
  
  @media (max-width: 480px) {
    .hero-section h1 {
      font-size: 2rem;
    }
  
    .hero-section p {
      font-size: 1rem;
    }
  
    .logo {
      font-size: 1.5rem;
    }
  
    .feature-icon {
      font-size: 2rem;
    }
  
    .feature-card h3 {
      font-size: 1.2rem;
    }
  }
  
  /* Animation Keyframes */
  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  @keyframes glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(79, 172, 254, 0.2);
    }
    50% {
      box-shadow: 0 0 30px rgba(79, 172, 254, 0.4);
    }
  }

--------------------------------------------------------------------------------
File: src\components\login.css
--------------------------------------------------------------------------------

.login-page {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #181818;
  position: relative;
  overflow: hidden;
}

.login-page::before {
  content: '';
  position: absolute;
  width: 150%;
  height: 150%;
  background: radial-gradient(circle, rgba(14, 165, 233, 0.05), transparent 50%);
  top: -25%;
  left: -25%;
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.login-card {
  background: rgba(26, 26, 26, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 3rem;
  width: 100%;
  max-width: 420px;
  box-shadow: 
    0 4px 32px rgba(0, 0, 0, 0.2),
    inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  z-index: 1;
}

.login-card:hover {
  transform: translateY(-4px);
  box-shadow: 
    0 8px 40px rgba(0, 0, 0, 0.3),
    inset 0 0 0 1px rgba(255, 255, 255, 0.15);
}

.login-title {
  color: #fff;
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 2.5rem;
  text-align: center;
  letter-spacing: -0.025em;
  position: relative;
}

.login-title::after {
  content: '';
  position: absolute;
  bottom: -0.75rem;
  left: 50%;
  transform: translateX(-50%);
  width: 40px;
  height: 3px;
  background: #0EA5E9;
  border-radius: 4px;
}

.form-group {
  position: relative;
  margin-bottom: 1.75rem;
}

.password-input-wrapper {
  position: relative;
}

.form-input {
  width: 100%;
  padding: 1rem 1.25rem;
  padding-right: 3rem;
  font-size: 1rem;
  background: rgba(255, 255, 255, 0.03);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: #fff;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  font-weight: 500;
  line-height: 1.5;
}

.form-input:-webkit-autofill,
.form-input:-webkit-autofill:hover,
.form-input:-webkit-autofill:focus,
.form-input:-webkit-autofill:active {
  -webkit-background-clip: text;
  -webkit-text-fill-color: #fff !important;
  transition: background-color 5000s ease-in-out 0s;
  box-shadow: inset 0 0 20px 20px rgba(255, 255, 255, 0.03);
}

.form-input:hover:not(:focus) {
  border-color: rgba(255, 255, 255, 0.2);
}

.form-input:focus {
  outline: none;
  border-color: #0EA5E9;
  box-shadow: 
    0 0 0 4px rgba(14, 165, 233, 0.1),
    0 0 0 1px #0EA5E9;
  background: rgba(14, 165, 233, 0.03);
}

.form-label {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: rgba(255, 255, 255, 0.5);
  pointer-events: none;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  padding: 0 0.5rem;
  font-weight: 500;
}

.form-input:focus ~ .form-label,
.form-input:not(:placeholder-shown) ~ .form-label {
  top: 0;
  left: 0.75rem;
  font-size: 0.75rem;
  padding: 0 0.5rem;
  background: #1a1a1a;
  border-radius: 4px;
  color: #0EA5E9;
  font-weight: 600;
  transform: translateY(-50%);
}

.password-toggle {
  position: absolute;
  right: 0.75rem;
  top: 0;
  bottom: 0;
  margin: auto;
  height: 36px;
  width: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: none;
  border: none;
  color: rgba(255, 255, 255, 0.5);
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 50%;
  padding: 0;
}

.password-toggle:hover {
  color: rgba(255, 255, 255, 0.9);
}

.login-button {
  width: 100%;
  padding: 1rem;
  background: linear-gradient(to right, #0EA5E9, #38BDF8);
  color: white;
  border: none;
  border-radius: 12px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  position: relative;
  overflow: hidden;
}

.login-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: 0.5s;
}

.login-button:hover:not(:disabled)::before {
  left: 100%;
}

.login-button:hover:not(:disabled) {
  background: linear-gradient(to right, #0284C7, #0EA5E9);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(14, 165, 233, 0.3);
}

.login-button:active:not(:disabled) {
  transform: translateY(0);
}

.login-button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  background: linear-gradient(to right, #64748B, #94A3B8);
}

.spinner {
  width: 20px;
  height: 20px;
  border: 2.5px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: #fff;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.error-message {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.2);
  color: #ef4444;
  padding: 1rem;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-weight: 500;
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .login-card {
    padding: 2rem;
    margin: 1rem;
    border-radius: 20px;
  }

  .login-title {
    font-size: 1.75rem;
  }

  .form-input {
    padding: 0.875rem 1rem;
  }
}

